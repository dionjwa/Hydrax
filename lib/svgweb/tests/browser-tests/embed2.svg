<?xml version="1.0"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://web.resource.org/cc/"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   width="450"
   height="450"
   id="svg2"
   sodipodi:version="0.32"
   inkscape:version="0.45"
   sodipodi:docbase="/home/lukisuser/Desktop/mounted storage/bfiles 2007/Projects/Squares - 08 August"
   sodipodi:docname="spring_tree_final.svg"
   inkscape:output_extension="org.inkscape.output.svg.inkscape"
   version="1.0"
   sodipodi:modified="true"
   onload="loaded(this)"><defs
     id="defs4" />
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     gridtolerance="10000"
     guidetolerance="10"
     objecttolerance="10"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="1.6488889"
     inkscape:cx="225"
     inkscape:cy="225"
     inkscape:document-units="px"
     inkscape:current-layer="layer2"
     inkscape:window-width="910"
     inkscape:window-height="945"
     inkscape:window-x="25"
     inkscape:window-y="25"
     width="5in"
     height="5in"
     units="in"
     borderlayer="true" /><metadata
     id="metadata7"><rdf:RDF><cc:Work
         rdf:about=""
         id="myCCWork"><dc:format>image/svg+xml</dc:format><dc:type id="myDCType"
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /></cc:Work></rdf:RDF></metadata>
  <svg id="nestedSVG" > 
  <rect id="nestedRect"/>
  </svg>
  <script type="text/javascript"><![CDATA[
    var sodipodi_ns = 'http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
    var dc_ns = "http://purl.org/dc/elements/1.1/";
    var rdf_ns = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    var cc_ns = "http://web.resource.org/cc/";

    var myRect, mySVG, rects, sodipodi, rdf, div, dc, bad, root, rect, 
        path, gradient, group, child, whitespaceAreNodes, metadata,
        cc, svg, svgText, textNode, text, desc, title, format, type,
        className, htmlTitle, head, circle, lengthBefore, matches, temp,
        gradient, stop, defs, parent, textNode2, group2, renderer,
        origText, exp, html, ns, nextToLast, paths, styleStr, circle,
        image, line, defs, runTests, styleReturned, use, regExp, split, doc,
        orig, rect1, rect2, obj1, obj2, obj3, params, hasParams, hasParam1,
        hasParam2, param1Value, param2Value, pathname, origUrl, origWindowLoc,
        loc, fakeLoc, timerID, frag, clone;

    var allStyles = [
      'font', 'fontFamily', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle',
      'fontVariant', 'fontWeight', 'direction', 'letterSpacing', 'textDecoration',
      'unicodeBidi', 'wordSpacing', 'clip', 'color', 'cursor', 'display', 'overflow',
      'visibility', 'clipPath', 'clipRule', 'mask', 'opacity', 'enableBackground',
      'filter', 'floodColor', 'floodOpacity', 'lightingColor', 'stopColor',
      'stopOpacity', 'pointerEvents', 'colorInterpolation',
      'colorInterpolationFilters', 'colorProfile', 'colorRendering', 'fill',
      'fillOpacity', 'fillRule', 'imageRendering', 'marker', 'markerEnd',
      'markerMid', 'markerStart', 'shapeRendering', 'stroke', 'strokeDasharray',
      'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit',
      'strokeOpacity', 'strokeWidth', 'textRendering', 'alignmentBaseline', 
      'baselineShift', 'dominantBaseline', 'glyphOrientationHorizontal',
      'glyphOrientationVertical', 'kerning', 'textAnchor',
      'writingMode'
    ];

    // save 'this' so we can make sure it points to our fake window object
    var outerThis = this;
    
    // the 'this' that was passed into our loaded listener; saved so we
    // can do top.assertions later on it to make sure its correct
    var passedInThis;
    
    // the 'this' that is accessible from our loaded listener; saved so we
    // can do top.assertions later on it
    var loadedThis;
    
    // a global variable that we set to ensure we don't clash variables
    // between ourselves, other SVG files, and the global scope
    var shouldNotClash = 'set globally in embed2';
    
    // a global function we define to ensure that it doesn't clash with local
    // functions in our SVG files
    var globalFunction = function() { return 'returned from embed2'; };
    
    // A list of timer functions that have been called so we can ensure
    // timer functions work correctly; used by testTimingFunctions(). We
    // also store a lookup from the name of the function to it's timing
    // ID so we can clear it out later. Once we have cleared out the given
    // timing functions using clearTimeout, we change the
    // value for this ID to the word 'finished'.
    var timingFuncsCalled = [];
    
    // To test setInterval, we use a lookup table keyed by the name
    // of the timing function (such as 'intervalFunc1') to the number of times
    // it has run. After two such runs we know to clear out the interval.
    var numIntervals = {};
    
    // expose this on the window object so that the test_js.js file can make
    // sure all of our timing functions ran at the end of everything
    top.window._timingFuncsCalled = timingFuncsCalled;

    function loaded(_passedInThis) {
      // save the 'this' in this variable for later testing in testScope()
      loadedThis = this;
      passedInThis = _passedInThis;
      
      // tell containing testing class that we have loaded
      top.svgweb._embedOnloads.push(1);
                       
      // change onloadFunc to point to your real onload function that you
      // want called when the page is truly ready
      var onloadFunc = testLoaded;
      
      if (top.svgweb != undefined) {
        top.svgweb.addOnLoad(onloadFunc, true, window);
      } else {
        onloadFunc();
      }
    }
    
    function testLoaded() {
      // set top.window._objectsLoadedFirst to be false; we check for this
      // in test_js.js testScope() function to ensure that objects load 
      // before any onload listeners in embedded SVG files
      top.window._objectsLoadedFirst = true;
      
      // tell containing testing class that our particular file has loaded
      // so it can top.assert this later
      top.svgweb._objectLoaded(1);
      
      // kick off our suite of SVG OBJECT in-file unit tests; we do it here 
      // instead of later such as in one of the other onload methods below
      // because we can ensure they will run before the unit tests in the
      // main HTML page by putting them here
      runObjectTests();
    }
    
    // make sure subscribing to the window.onload and _then_ SVG Web works
    window.addEventListener('load', function() {
      window.addEventListener('SVGLoad', function() {
        top.window._wrappedOnLoadInsideEmbed2Called = true;
      }, false);
    }, false);

    function runObjectTests() {
      top.console.log('Inside SVG OBJECT: Running suite of tests');
      
      // a suite of tests to ensure that working with script inside of 
      // SVG OBJECTs works
      
      // test the scope before calling top.svgweb.getHandlerType()
      testScope();
      
      renderer = top.svgweb.getHandlerType();
      
      testIncorrectConversions();
      testHostObjects();
      testTimingFunctions();
      testClassProgramming();
      testGetElementById();
      testGetElementsByTagNameNS();
      testSVGSVGElementProperties();
      testGetAttribute();
      testSetAttribute();
      testChildNodes();
      testOwnerDocument();
      testTextNodes();
      testDOMHierarchyAccessors();
      testAppendChild();
      testRemoveChild();
      testReplaceChild();
      testInsertBefore();
      testHasChildNodes();
      testStyle();
      testSuspendRedraw();
      testDocumentFragment();
      testCloneNode();
      testNestedSVGElements();
      
      // print out what should be visible after all tests
      top.console.log('2ND IMAGE: There should be blue text saying '
                      + '"set through textContent" near the top');
      top.console.log('2ND IMAGE: There should be bolded yellow text saying '
                      + '"Some bolded text!" near the bottom');
      top.console.log('2ND IMAGE: There should be a green circle with a blue '
                      + 'border in the middle');
      top.console.log('2ND IMAGE: There should be a rectangle with some opacity '
                      + 'in the upper right corner with blue fill and multiple '
                      + 'green stroke around the outside');
    }
    
    // @param calledFromTimer Optional. If true, we are being called from
    // a timer function in testTimingFunctions.
    function testScope(calledFromTimer) {
      if (calledFromTimer == undefined) {
        calledFromTimer = false;
      }
      
      if (!calledFromTimer) {
        top.console.log('Inside SVG OBJECT: Testing scope...');
      }
      
      // test various scoping issues between us and our containing page
      
      // make sure our 'this' variables are correct
      top.assertEquals('The passed in "this" should equal our fake SVG root',
                       document.documentElement, passedInThis);
      top.assertEquals('The outer "this" should equal our fake win object',
                       document.defaultView, outerThis);
      top.assertEquals('"this" inside of the loaded() function block should '
                       + 'be our fake win object', document.defaultView, 
                       loadedThis);
                       
      // make sure variables don't clash
      top.assertEquals('shouldNotClash == set globally in embed2',
                       'set globally in embed2', shouldNotClash);
      top.assertEquals('t' + 'op.shouldNotClash == set globally in test_js.js',
                       'set globally in test_js.js', top.shouldNotClash);
                       
      // make sure functions don't clash
      top.assertEquals('globalFunction() == returned from embed2',
                       'returned from embed2', globalFunction());
      top.assertEquals('t' + 'op.globalFunction() == returned from test_js.js',
                       'returned from test_js.js', top.globalFunction());
                       
      // make sure we have our own window object; we set this flag in
      // test_js.js on the outer window object
      top.assertUndefined('window._outerWindow should be undefined',
                          window._outerWindow);
      top.assertTrue('top.window._outerWindow == true', 
                     top.window._outerWindow);
                     
      // our assertion functions should not be available without preceding
      // with 'top'
      top.assertTrue('assertEquals should be undefined', 
                     (typeof assertEquals == 'undefined'));
                     
      // make sure some of our top.* variables show up
      top.assertExists('top.svgweb should exist', top.svgweb);
      top.assertExists('top.isIE should exist', top.isIE);
      top.assertExists('top.isFF should exist', top.isFF);
    }
    
    function testIncorrectConversions() {
      top.console.log('Inside SVG OBJECT: Testing code conversions...');
      
      // test having potential incorrect conversions around the document
      // and window objects in here to make sure they don't get incorrectly
      // transformed
      
      // variable with document in its name
      exp = null;
      try {
        var mydocument = 'should not be transformed';
        top.assertEquals('mydoc' + 'ument == should not be transformed',
                         'should not be transformed',
                         mydocument);
      } catch (e) {
        exp = e;
      }
      top.assertNull('Using myd' + 'ocument variable should not have thrown an '
                     + 'exception', exp);
      
      // variable with window in its name
      exp = null;
      try {
        var mywindow = 'should not be transformed';
        top.assertEquals('mywin' + 'dow == should not be transformed',
                         'should not be transformed',
                         mywindow);
      } catch (e) {
        exp = e;
      }
      top.assertNull('Using myw' + 'indow variable should not have thrown an '
                     + 'exception', exp);
      
      // have a createTextNode function where the string runs over 
      // several lines.
      exp = null;
      try {
        temp = document.createTextNode('This is a multi line string'
                                       + ' that runs over multiple lines'
                                       + ' and which is not very'
                                       + ' interesting', true);
        top.assertExists('multi line text node should exist', temp);
        top.assertEquals('multi line text node should have its string',
                     'This is a multi line string'
                     + ' that runs over multiple lines'
                     + ' and which is not very'
                     + ' interesting',
                     temp.nodeValue);
        // repeat with double quotes
        temp = document.createTextNode("This is a multi line string"
                                       + " that runs over multiple lines"
                                       + " and which is not very"
                                       + " interesting", true);
        top.assertExists('multi line text node should exist', temp);
        top.assertEquals('multi line text node should have its string',
                     'This is a multi line string'
                     + ' that runs over multiple lines'
                     + ' and which is not very'
                     + ' interesting',
                     temp.nodeValue);
      } catch (e) {
        exp = e;
      }
      top.assertNull('Doing multiline createTextNode should not have thrown an '
                     + 'exception', exp);
      
      // ensure window.document is the same as document
      top.assertEquals('window.doc' + 'ument == doc' + 'ument', document,
                   window.document);
      
      // access the parent document or window object:
      // top.document and top.window
      top.assertTrue('top.doc' + 'ument._topLevel == true', top.document);
      top.assertTrue('top.win' + 'dow._topLevel == true', top.window);
      
      // use document and window inside of a double and single quoted
      // string; if transformed incorrectly, will throw an exception
      
      // document with single quoted string
      exp = null;
      try {
        tmp = 'var crazyTimes = document.getElementById("foobar");';
      } catch (e) {
        exp = e;
      }
      top.assertNull('Using doc' + 'ument in a single quoted string '
                 + 'should work; there should be no exception', exp);
                      
      // document with double quoted string
      exp = null;
      try {
        tmp = "var crazyTimes = document.getElementById('foobar');";
      } catch (e) {
        exp = e;
      }
      top.assertNull('Using doc' + 'ument in a double quoted string '
                 + 'should work; there should be no exception', exp);
                 
      // window with single quoted string
      exp = null;
      try {
        tmp = 'var crazyTimes = window.ownerDocument';
      } catch (e) {
        exp = e;
      }
      top.assertNull('Using win' + 'dow in a single quoted string '
                 + 'should work; there should be no exception', exp);
                 
      // window with double quoted string
      exp = null;
      try {
        tmp = "var crazyTimes = window.ownerDocument";
      } catch (e) {
        exp = e;
      }
      top.assertNull('Using win' + 'dow in a double quoted string '
                 + 'should work; there should be no exception', exp);
      
      // new lines in our strings; make sure they don't have _SVGNL_ in them
      tmp = '\nhello world\n';
      top.assertTrue('hello world string with newlines should not have _SVGNL_ '
                     + 'in it', (tmp.indexOf('_SVGNL') == -1));
                     
      // test using double backslashes
      exp = null;
      try {
        tmp = "\\";
      } catch (e) {
        exp = e;
      }
      top.assertNull('Two backslashes should have worked with no exception', 
                     exp);
      top.assertEquals('tmp should be equal to one backslash', '\\', tmp);
                     
      // test using backslashed single and double quotes
      exp = null;
      try {
        tmp = "\"\"";
      } catch (e) {
        top.console.log(e);
        exp = e;
      }
      top.assertNull("Backslashed double quotes should have worked with "
                     + "no exception", exp);
      top.assertEquals('tmp should be equal to two double quotes', '""', tmp);
      exp = null;
      try {
        tmp = '\'\'';
      } catch (e) {
        exp = e;
      }
      top.assertNull('Backslashed single quotes should have worked with no '
                     + 'exception', exp);
      top.assertEquals('tmp should be equal to two single quotes', "''", tmp);
                     
      // complicated nested string, mimicing someone building up dynamic code 
      // as a script
      exp = null;
      try {
        tmp = 
            "var tmp = 'var crazyTimes = document.getElementById(\"foobar\");\n " // string starts
            + "alert(\"dogtimes\");\n "
            + "alert(\'Something Else\');\n "
            + "var fooDocument = document.getElementsByTagNameNS(svgns, \\'circle\\');';\n " // string ends
            + "var matches = document.getElementsByTagNameNS(svgns, \"rect\");\n " // normal non-string statement
            + "var anotherString = 'alert(\"should not match: \" + document)';\n"; // another string
      } catch (e) {
        exp = e;
      }
      top.assertNull('Complicated string expression with host objects should '
                     + 'work; there should be no exception', exp);
                     
      // test using eval() on a dynamic string and ensure it runs
      // in the correct context
      tmp = 'top.assertExists("shouldNotClash should exist", shouldNotClash);'
            + 'top.assertEquals("shouldNotClash == set globally in embed2", '
            + '"set globally in embed2", shouldNotClash);';
      eval(tmp);
      
      // have a test string where we have all sorts of strange characters
      // to ensure the Flash/JS boundry correctly passes them over
      tmp = '!@#$%^&*()\u000B~`-\u0027=_+\n\r\f\t{}[]\\:";\u0009\'<>?,	\u0022./\"';
      // no assertion needed; this script will get passed around in general over
      // the boundry for the Flash Handler
      
      // make sure that we don't end up with incorrect <__text> sections
      // inside CDATA blocks
      tmp = '<foo>This is some text!!</foo> if (foo > bar && bar < foo)';
      top.assertEquals('Our tmp string with markup should not have <__text>'
                       + 'blocks',
                       '\u003Cfoo\u003EThis is some text!!\u003C/foo\u003E if '
                       + '(foo \u003E bar && bar \u003C foo)',
                       tmp);
    }
  
    function testHostObjects() {
      top.console.log('Inside SVG OBJECT: Testing host objects...');

      // top
      top.assertExists('top should exist', top);
      top.assertExists('window.top should exist', window.top);
      // we set these in test_js.js to help with testing
      top.assertExists('top.window._topWindow should exist',
                       top.window._topWindow);
      top.assertExists('top.window._topDocument should exist',
                       top.window._topDocument);
      top.assertEquals('top.window == top.window._topWindow',
                       top.window._topWindow, top.window);

      // window
      top.assertExists('window should exist', window);
      top.assertTrue('top.window !== window', (top.window !== window));

      // document
      top.assertExists('document should exist', document);
      top.assertTrue('top.doc' + 'ument !== doc' + 'ument', 
                 (top.document !== document));

      // self
      top.assertExists('self should exist', self);
      top.assertExists('window.self should exist', window.self);
      top.assertEquals('self == window', window, self);
      top.assertTrue('self !== top.window._topWindow', 
                 (self !== top.window._topWindow));

      // test window.location
      
      // only possible to override for Flash handler
      if (renderer == 'flash') {
        // internal variable to override SVG URL for testing
        origUrl = document._handler._svgObject.url;
        // internal variable to override window.location of containing HTML
        // page for testing
        origWindowLoc = window.location;
        // force the value so we can have consistency across testing
        // environments
        fakeLoc =
                 { href: 'http://brad.com/dev/sgweb-brad-merge-to-trunk/tests/browser-tests/test_js2.html',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '/dev/sgweb-brad-merge-to-trunk/tests/browser-tests/test_js2.html',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        window.location = document._handler.window._createLocation(fakeLoc);
                 
        // basic test of window.location
        top.assertExists('w' + 'indow.location should exist', window.location);
        top.assertTrue('w' + 'indow.location != top.window._topWindow.location',
                   (window.location !== top.window._topWindow));
        top.assertEquals('w' + 'indow.location.hash == #someHash', '#someHash',
                     window.location.hash);
        top.assertEquals('w' + 'indow.location.host == '
                     + 'top.window._topWindow.location.host',
                     'brad.com', window.location.host);
        top.assertEquals('w' + 'indow.location.hostname == brad.com', 'brad.com', 
                         window.location.hostname);
        top.assertEquals('w' + 'indow.location.port == ""', "", 
                         window.location.port);
        top.assertEquals('w' + 'indow.location.protocol == http:', 'http:', 
                         window.location.protocol);
        pathname = '/dev/sgweb-brad-merge-to-trunk/tests/browser-tests/';
        top.assertEquals('w' + 'indow.location.pathname == /dev/sgweb-brad-merge-to-trunk/tests/browser-tests/embed2.svg', 
                        '/dev/sgweb-brad-merge-to-trunk/tests/browser-tests/embed2.svg', 
                        window.location.pathname);
        top.assertEquals('w' + 'indow.location.search == '
               + '?queryParam1=queryValue1&queryParam2=query%20with%20spaces',
               '?queryParam1=queryValue1&queryParam2=query%20with%20spaces',
               window.location.search); 
        // build up what the full href should look like
        temp = window.location.protocol + '//' + window.location.host + pathname 
               + 'embed2.svg?queryParam1=queryValue1&'
               + 'queryParam2=query%20with%20spaces#someHash';
        top.assertTrue('w' + 'indow.location !== top.window._topWindow.location',
                    (window.location !== top.window._topWindow.location));
        top.assertTrue('w' + 'indow.location.href !== top.window._topWindow.location.href',
                    (window.location.href !== 
                        top.window._topWindow.location.href));            
        top.assertEquals('w' + 'indow.location == ' + temp, temp, window.location);
        top.assertEquals('w' + 'indow.location.href == ' + temp, temp, 
                         window.location.href);

        // test window.location but use a variable as an intermediary to ensure
        // transformation happens correctly
        loc = window.location;
        top.assertExists('loc should exist', loc);
        top.assertTrue('loc != top.window._topWindow',
                       (loc !== top.window._topWindow));
        top.assertEquals('loc.hash == #someHash', '#someHash',
                     loc.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', loc.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', loc.hostname);
        top.assertEquals('loc.port == ""', "", loc.port);
        top.assertEquals('loc.protocol == http:', 'http:', loc.protocol);
        top.assertEquals('loc == ' + pathname, pathname + 'embed2.svg', 
                         loc.pathname);
        top.assertEquals('loc.search == '
               + '?queryParam1=queryValue1&queryParam2=query%20with%20spaces',
               '?queryParam1=queryValue1&queryParam2=query%20with%20spaces',
               loc.search); 
        // build up what the full href should look like
        // NOTE: browsers natively leave search portion URL encoded
        temp = loc.protocol + '//' + loc.host + pathname 
               + 'embed2.svg?queryParam1=queryValue1&'
               + 'queryParam2=query%20with%20spaces#someHash';
        top.assertTrue('loc !== top.window._topWindow',
                    (loc !== top.window._topWindow));
        top.assertTrue('loc.href !== top.window._topWindow.location.href',
                    (loc.href !== 
                        top.window._topWindow.location.href));            
        top.assertEquals('loc == ' + temp, temp, loc);
        top.assertEquals('loc.href == ' + temp, temp, 
                     loc.href);

        // access some name/value pairs on the window.location object, which
        // in the real world would be used to pass in information to the SVG
        // file for programmatic control
        var search = decodeURIComponent(window.location.search);
        top.assertExists('decoded search should exist', search);
        search = search.split('&');
        top.assertEquals('search.length == 2', 2, search.length);
        param1Value = search[0].split('=')[1];
        param2Value = search[1].split('=')[1];
        top.assertEquals('query parameter 1 == queryValue1', 'queryValue1', 
                      param1Value);
        top.assertEquals('query parameter 2 == query with spaces', 
                      'query with spaces', param2Value);

        // manually call _SVGWindow._createLocation() with some fake window
        // object values
      
        // have a different protocol and port with an IP address, with a 
        // hash and search query on the containing HTML page; have no hash or 
        // search query on the SVG object
        fakeLoc =
                 { href: 'https://10.0.1.3:9000/foobar/nested?someQuery=SomeValue#fooHash',
                   protocol: 'https:',
                   port: '9000',
                   host: '10.0.1.3:9000',
                   hostname: '10.0.1.3',
                   pathname: '/foobar/nested',
                   search: '?someQuery=SomeValue',
                   hash: '#fooHash',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 'embed2.svg';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == 10.0.1.3:9000', '10.0.1.3:9000', 
                         window.location.host);
        top.assertEquals('loc.hostname == 10.0.1.3', '10.0.1.3', 
                         window.location.hostname);
        top.assertEquals('loc.protocol == https:', 'https:', 
                         window.location.protocol);
        top.assertEquals('loc.port == 9000', 9000, window.location.port);
        top.assertEquals('loc.pathname == /foobar/embed2.svg', 
                         '/foobar/embed2.svg', window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == https://10.0.1.3:9000/foobar/embed2.svg',
                         'https://10.0.1.3:9000/foobar/embed2.svg',
                         window.location.href);
        top.assertEquals('loc == https://10.0.1.3:9000/foobar/embed2.svg',
                         'https://10.0.1.3:9000/foobar/embed2.svg', 
                         window.location);
                       
        // have no path on the containing HTML page's window.location but
        // have a search query string
        fakeLoc =
                 { href: 'http://brad.com?someQuery=SomeValue',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '',
                   search: '?someQuery=SomeValue',
                   hash: '',
                    toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 'dynamic_file.php';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', window.location.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /dynamic_file.php', '/dynamic_file.php', 
                         window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == http://brad.com/dynamic_file.php',
                         'http://brad.com/dynamic_file.php', window.location.href);
        top.assertEquals('loc == http://brad.com/dynamic_file.php',
                         'http://brad.com/dynamic_file.php', window.location);
                       
        // have no path on the containing HTML page's window.location
        fakeLoc =
                 { href: 'http://brad.com',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 'index.php';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', window.location.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /index.php', '/index.php', 
                         window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == http://brad.com/index.php',
                         'http://brad.com/index.php', window.location.href);
        top.assertEquals('loc == http://brad.com/index.php',
                         'http://brad.com/index.php', window.location);
                       
        // have a path with no trailing slash
        fakeLoc =
                 { href: 'http://brad.com/foobar/nested',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '/foobar/nested',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 'embed2.svg';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', window.location.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /foobar/embed2.svg', 
                         '/foobar/embed2.svg', window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == http://brad.com/foobar/embed2.svg',
                         'http://brad.com/foobar/embed2.svg', window.location.href);
        top.assertEquals('loc == http://brad.com/foobar/embed2.svg',
                         'http://brad.com/foobar/embed2.svg', window.location);
      
        // have a path _with_ a trailing slash
        fakeLoc =
                 { href: 'http://brad.com/foobar/nested/',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '/foobar/nested/',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 'embed2.svg';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', window.location.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /foobar/nested/embed2.svg', 
                        '/foobar/nested/embed2.svg', window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == http://brad.com/foobar/nested/embed2.svg',
                         'http://brad.com/foobar/nested/embed2.svg', window.location.href);
        top.assertEquals('loc == http://brad.com/foobar/nested/embed2.svg',
                         'http://brad.com/foobar/nested/embed2.svg', window.location);
      
        // have an absolute directory path on the SVG file
        fakeLoc =
                 { href: 'http://brad.com/foobar/nested2/',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '/foobar/nested2/',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = '/somewhereElse/nested7/embed2.svg';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', window.location.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /somewhereElse/nested7/embed2.svg', 
                         '/somewhereElse/nested7/embed2.svg', window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == '
                         + 'http://brad.com/somewhereElse/nested7/embed2.svg',
                         'http://brad.com/somewhereElse/nested7/embed2.svg', 
                         window.location.href);
        top.assertEquals('loc == '
                         + 'http://brad.com/somewhereElse/nested7/embed2.svg',
                         'http://brad.com/somewhereElse/nested7/embed2.svg', 
                         window.location);
      
        // have a full URL that is the same as our containing HTML page's
        // window.location
        fakeLoc =
                 { href: 'http://brad.com/foobar/nested/',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '/foobar/nested/',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 
                'http://brad.com/foobar/nested/embed2.svg';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', window.location.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /foobar/nested/embed2.svg', 
                         '/foobar/nested/embed2.svg', window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == http://brad.com/foobar/nested/embed2.svg',
                         'http://brad.com/foobar/nested/embed2.svg', window.location.href);
        top.assertEquals('loc == http://brad.com/foobar/nested/embed2.svg',
                         'http://brad.com/foobar/nested/embed2.svg', window.location);
                       
        // have a full URL that is on a different path than the containing
        // HTML page
        fakeLoc =
                 { href: 'http://brad.com/foobar/nested/',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '/foobar/nested/',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 
                'http://brad.com/somewhereElse/nested99/embed2.svg';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == ""', "", window.location.hash);
        top.assertEquals('loc.host == brad.com', 'brad.com', window.location.host);
        top.assertEquals('loc.hostname == brad.com', 'brad.com', window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /somewhereElse/nested99/embed2.svg', 
                         '/somewhereElse/nested99/embed2.svg', window.location.pathname);
        top.assertEquals('loc.search == ""', "", window.location.search);
        top.assertEquals('loc.href == '
                         + 'http://brad.com/somewhereElse/nested99/embed2.svg',
                         'http://brad.com/somewhereElse/nested99/embed2.svg', 
                         window.location.href);
        top.assertEquals('loc == '
                         + 'http://brad.com/somewhereElse/nested99/embed2.svg',
                         'http://brad.com/somewhereElse/nested99/embed2.svg', 
                         window.location);
      
        // have a full URL that is on a different domain than the containing
        // HTML page
        fakeLoc =
                 { href: 'http://brad.com/foobar/nested/',
                   protocol: 'http:',
                   port: '',
                   host: 'brad.com',
                   hostname: 'brad.com',
                   pathname: '/foobar/nested/',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 
                'http://example.com:1010/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == #myHash', "#myHash", window.location.hash);
        top.assertEquals('loc.host == example.com:1010', 'example.com:1010', 
                         window.location.host);
        top.assertEquals('loc.hostname == example.com', 'example.com', 
                         window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == 1010', 1010, window.location.port);
        top.assertEquals('loc.pathname == /foobar/example.svg', 
                         '/foobar/example.svg', window.location.pathname);
        top.assertEquals('loc.search =='
                    + '?someQuery=someValue&anotherQuery=anotherValue', 
                    '?someQuery=someValue&anotherQuery=anotherValue', window.location.search);
        top.assertEquals('loc.href == http://example.com:1010/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         'http://example.com:1010/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         window.location.href);
        top.assertEquals('loc == http://example.com:1010/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         'http://example.com:1010/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         window.location);
                       
        // have a full URL that is on a different domain than the containing
        // HTML page, and have the containing HTML have a port
        fakeLoc =
                 { href: 'http://brad.com:9000/foobar/nested/',
                   protocol: 'http:',
                   port: '9000',
                   host: 'brad.com:9000',
                   hostname: 'brad.com',
                   pathname: '/foobar/nested/',
                   search: '',
                   hash: '',
                   toString: function() { return this.href } 
                 };
        document._handler._svgObject.url = 
                'http://example.com/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash';
        window.location = document._handler.window._createLocation(fakeLoc);
        top.assertExists('Custom created loc should exist', window.location);
        top.assertEquals('loc.hash == #myHash', "#myHash", window.location.hash);
        top.assertEquals('loc.host == example.com', 'example.com', 
                         window.location.host);
        top.assertEquals('loc.hostname == example.com', 'example.com', 
                         window.location.hostname);
        top.assertEquals('loc.protocol == http:', 'http:', window.location.protocol);
        top.assertEquals('loc.port == ""', "", window.location.port);
        top.assertEquals('loc.pathname == /foobar/example.svg', 
                         '/foobar/example.svg', window.location.pathname);
        top.assertEquals('loc.search =='
                    + '?someQuery=someValue&anotherQuery=anotherValue', 
                    '?someQuery=someValue&anotherQuery=anotherValue', window.location.search);
        top.assertEquals('loc.href == http://example.com/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         'http://example.com/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         window.location.href);
        top.assertEquals('loc == http://example.com/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         'http://example.com/foobar/example.svg?someQuery=someValue&anotherQuery=anotherValue#myHash',
                         window.location);
      
        // restore the original window.location URL value
        window.location = origWindowLoc;
        document._handler._svgObject.url = origUrl;
      }

      // window.frameElement -- should be our SVG OBJECT or Flash element
      top.assertExists('window.frameElement', window.frameElement);
      top.assertEqualsAny('window.frameElement.nodeName == OBJECT or EMBED',
                          ['OBJECT', 'EMBED'],
                          window.frameElement.nodeName.toUpperCase());

      // test accessing PARAMs inside of the window.frameElement, which
      // in the real world would be used to pass in information to the SVG
      // file for programmatic control
      top.assertExists('window.frameElement.childNodes should exist',
                   window.frameElement.childNodes);
      params = window.frameElement.childNodes;
      top.assertTrue('window.frameElement.childNodes > 0', (params.length > 0));
      // make sure there is at least one PARAM object
      hasParams = false;
      for (var i = 0; i < params.length; i++) {
        if (params[i].nodeType == 1 
            && params[i].nodeName.toUpperCase() == 'PARAM') {
          hasParams = true;
          break;
        }
      }
      top.assertTrue('There should be at least one PARAM element', hasParams);
      // in our markup when we embedded embed2.svg we have two custom PARAMs,
      // Param1 and Param2
      hasParam1 = hasParam2 = false;
      param1Value = param2Value = null;
      for (var i = 0; i < params.length; i++) {
        if (params[i].nodeType == 1 
            && params[i].nodeName.toUpperCase() == 'PARAM'
            && params[i].getAttribute('name') == 'Param1') {
          hasParam1 = true;
          param1Value = params[i].getAttribute('value');
        } else if (params[i].nodeType == 1 
                   && params[i].nodeName.toUpperCase() == 'PARAM'
                   && params[i].getAttribute('name') == 'Param2') {
            hasParam2 = true;
            param2Value = params[i].getAttribute('value');
          }
      }
      top.assertTrue('Param1 should exist', hasParam1);
      top.assertTrue('Param2 should exist', hasParam2);
      top.assertTrue('Param1 should have the value ParamValue1', 'ParamValue1',
                 param1Value);
      top.assertTrue('Param2 should have the value ParamValue2', 'ParamValue2',
                 param2Value);

      // test accessing the svgns and xmlns variables
      top.assertExists('w' + 'indow.svgns should exist', window.svgns);
      top.assertExists('svgns should exist', svgns);
      top.assertEquals('svgns == http://www.w3.org/2000/svg',
                       'http://www.w3.org/2000/svg', svgns);
      top.assertExists('w' + 'indow.xlinkns should exist', window.xlinkns);
      top.assertExists('xlinkns should exist', xlinkns);
      top.assertEquals('xlinkns == http://www.w3.org/1999/xlink',
                       'http://www.w3.org/1999/xlink', xlinkns);
    }
    
    function testClassProgramming() {
      top.console.log('Inside SVG OBJECT: Testing JavaScript OOP '
                      + 'Programming...');
      // have a JavaScript OOP class to make sure 'this' keyword correctly
      // points to instance and not HTML window object to ensure we don't
      // mess up JavaScript OOP programming with our transformations
      
      function MyClass() {
        this._privateVar = 'hello world';
      }
      
      MyClass.prototype.someMethod = function() {
        this._thisPointer = this;
        return '_privateVar = ' + this._privateVar;
      };
      
      var instance = new MyClass();
      
      top.assertEquals('instance.someMethod() == _privateVar = hello world',
                       '_privateVar = hello world', instance.someMethod());
      top.assertEquals('instance._thisPointer == instance', instance,
                       instance._thisPointer);
      top.assertTrue('instance._thisPointer != window',
                     (instance._thisPointer != window));
    }
    
    // start of functions used by testTimingFunctions
    
    function timeoutFunc(timerNumber) {
      // make sure we aren't being incorrectly called again
      timingID = timingFuncsCalled['timerFunc' + timerNumber];
      if (timingID == 'finished') {
        top.assertFailed('Timer timeoutFunc' + timerNumber + ' did not clear '
                         + 'out');
        return;
      }
      
      testScope(true);
      _testFromTimingFunc();
      timingFuncsCalled.push('timeoutFunc' + timerNumber);
      
      // clear this timing function
      clearTimeout(timingID);
      timingFuncsCalled['timeoutFunc' + timerNumber] = 'finished';
    }
    
    function timeoutFuncPointer() {
      timeoutFunc(3);
    }
    
    function intervalFunc(timerNumber) {
      // make sure we aren't being incorrectly called more than twice
      timingID = timingFuncsCalled['intervalFunc' + timerNumber];
      // see how many times this interval has been run
      var numTimes = numIntervals['intervalFunc' + timerNumber];
      if (numTimes == undefined) {
        numTimes = 1;
      } else {
        numTimes++;
      }
      numIntervals['intervalFunc' + timerNumber] = numTimes;
      
      top.assertTrue('Timer intervalFunc' + timerNumber + ' should only '
                       + 'run 2 times', (numTimes <= 2));

      // do some tests on the first interval
      if (timingID._numTimesCalled == 1) {
        testScope(true);
        _testFromTimingFunc();
      }
      
      if (numTimes == 2) {
        timingFuncsCalled['intervalFunc' + timerNumber] = 'finished';
        timingFuncsCalled.push('intervalFunc' + timerNumber);
        
        // clear this timing function after two intervals
        window.clearInterval(timingID);
      }
    }
    
    function intervalFuncPointer() {
      intervalFunc(3);
    }
      
    function _testFromTimingFunc() {
      // do a small number of tests to ensure they can run within a timing 
      // function
      
      // getElementById
      group = document.getElementById('layer4');
      top.assertExists('SVG g element with ID layer4 should exist', group);
      top.assertEquals('group.nodeName == g', 'g', group.nodeName);
      top.assertEquals('group.id == layer4', 'layer4', group.id);
      
      // .style
      circle = document.createElementNS(svgns, 'circle');
      circle.id = 'deleteMeWhenDone';
      svg = document.getElementById('svg2');
      svg.appendChild(circle);
      circle.setAttribute('cx', 200);
      circle.setAttribute('cy', 200);
      circle.setAttribute('r', 50);
      circle.style.fill = 'red';
      circle.style.stroke = 'blue';
      circle.style.strokeWidth = 10;
      // test style values
      top.assertEqualsAny('circle.style.fill == red or #FF0000 or #ff0000',
                      ['red', '#FF0000', '#ff0000'], 
                      circle.style.fill);
      top.assertEqualsAny('circle.style.stroke == blue or #0000FF or #0000ff',
                      ['blue', '#0000FF', '#0000ff'],
                      circle.style.stroke);
      top.assertEqualsAny('circle.style.strokeWidth == 10 or 10px',
                      [10, '10px'],
                      circle.style.strokeWidth);
      // cleanup so we have no side-effects
      circle.parentNode.removeChild(circle);
    }
      
    // end of functions used by testTimingFunctions
    
    function testTimingFunctions() {
      top.console.log('Inside SVG OBJECT: Testing timing functions...');
      
      // add setTimeout and setIntervals here that call a global function
      // relative to ourselves (i.e. setTimeout("tick()", 500) with the 
      // following tests:
      //  * Pass in string functions to both, using both double and single
      //  quoted delimiters, with backslashed versions inside each string,
      //  with string functions that go over several lines
      //  * Pass in normal function pointers
      //  * Pass in a variable that is a string to execute
      //  * Pass in an inline anonymous function that is multiline and which
      //  uses double and single quotes inside of it
      //  * Preface call with window.setTimeout and window.setInterval
      // Also call clearTimeout and clearInterval to ensure these work with
      // the styles above
      
      // setTimeout tests
      
      // setTimeout calling global function using string
      timerID = setTimeout('timeoutFunc(1)', 1);
      timingFuncsCalled['timeoutFunc1'] = timerID;
      
      // window.setTimeout calling global function using string
      timerID = window.setTimeout('timeoutFunc(2)', 10);
      timingFuncsCalled['timeoutFunc2'] = timerID;
      
      // setTimeout using a function pointer
      timerID = setTimeout(timeoutFuncPointer, 20);
      timingFuncsCalled['timeoutFunc3'] = timerID;
      
      // setTimeout using multi-line string with double quotes using a
      // variable to pass value in
      temp = 
          "// make sure we arent being incorrectly called again\n"
          + "timingID = timingFuncsCalled['timerFunc4'];\n"
          + "if (timingID == 'finished') {\n"
          + " top.assertFailed('Timer timeoutFunc4 did not clear out');\n"
          + "} else {\n"
          + " \n"
          + " testScope(true);\n"
          + " _testFromTimingFunc();\n"
          + " timingFuncsCalled.push('timeoutFunc4');\n"
          + " \n"
          + " // clear this timing function\n"
          + " clearTimeout(timingID);\n"
          + " timingFuncsCalled['timeoutFunc4'] = 'finished';\n"
          + "}\n";
      timerID = window.setTimeout(temp, 30);
      timingFuncsCalled['timeoutFunc4'] = timerID;
            
      // setTimeout using multi-line string with single quotes with string
      // to run passed right in
      timerID = setTimeout(
                '// make sure we arent being incorrectly called again\n'
                + 'timingID = timingFuncsCalled["timerFunc5"];\n'
                + 'if (timingID == "finished") {\n'
                + ' top.assertFailed(\'Timer timeoutFunc5 did not clear out\');\n'
                + '} else {\n'
                + ' \n'
                + ' testScope(true);\n'
                + ' _testFromTimingFunc();\n'
                + ' timingFuncsCalled.push(\'timeoutFunc5\');\n'
                + ' \n'
                + ' // clear this timing function\n'
                + ' window.clearTimeout(timingID);\n'
                + ' timingFuncsCalled[\'timeoutFunc5\'] = \"finished\";\n'
                + '}\n',
                40);
      timingFuncsCalled['timeoutFunc5'] = timerID;
      
      // setTimeout using anonymous inline function
      var inlineDefinedTimerNumber = 6;
      timerID = 
        setTimeout(function() {
          // make sure we can see closure variables
          top.assertExists('inlineDefinedTimerNumber should exist',
                           inlineDefinedTimerNumber);
          top.assertEquals('inlineDefinedTimerNumber == 6', 6,
                           inlineDefinedTimerNumber);
                           
          // make sure we aren't being incorrectly called again
          timingID = timingFuncsCalled['timerFunc' + inlineDefinedTimerNumber];
          if (timingID == 'finished') {
            top.assertFailed('Timer timeoutFunc' + inlineDefinedTimerNumber 
                             + ' did not clear out');
            return;
          }

          testScope(true);
          _testFromTimingFunc();
          timingFuncsCalled.push('timeoutFunc' + inlineDefinedTimerNumber);

          // clear this timing function
          window.clearTimeout(timingID);
          timingFuncsCalled['timeoutFunc' + inlineDefinedTimerNumber] = 
                                                                    'finished';
        }, 50);
      timingFuncsCalled['timeoutFunc6'] = timerID;
      
      // setInterval tests
      
      // setInterval calling global function using string
      timerID = setInterval('intervalFunc(1)', 1);
      timingFuncsCalled['intervalFunc1'] = timerID;
            
      // window.setInterval calling global function using string
      timerID = window.setInterval('intervalFunc(2)', 10);
      timingFuncsCalled['intervalFunc2'] = timerID;
      
      // setInterval using a function pointer
      timerID = setInterval(intervalFuncPointer, 20);
      timingFuncsCalled['intervalFunc3'] = timerID;
            
      // setInterval using multi-line string with single quotes using a
      // variable to pass value in
      temp = 
          '// make sure we arent being incorrectly called more than twice\n'
          + 'timingID = timingFuncsCalled[\'intervalFunc4\'];\n'
          + '// see how many times this interval has been run\n'
          + 'var numTimes = numIntervals[\"intervalFunc\" + 4];\n'
          + 'if (numTimes == undefined) {\n'
          + '  numTimes = 1;\n'
          + '} else {\n'
          + '  numTimes++;\n'
          + '}\n'
          + 'numIntervals[\'intervalFunc\' + 4] = numTimes;\n'
          + '\n'
          + 'top.assertTrue("Timer intervalFunc" + 4 + \' should only \'\n'
          + '                 + "run 2 times", (numTimes <= 2));\n'
          + '\n'
          + '// do some tests\n'
          + 'if (timingID._numTimesCalled == 1) {\n'
          + ' testScope(true);\n'
          + ' _testFromTimingFunc();\n'
          + '}\n'
          + '\n'
          + '// clear this timing function\n'
          + 'if (numTimes == 2) {\n'
          + ' timingFuncsCalled[\"intervalFunc\" + 4] = \'finished\';\n'
          + ' timingFuncsCalled.push(\"intervalFunc\" + 4);\n'
          + ' window.clearInterval(timingID);\n'
          + '}\n';
      timerID = window.setInterval(temp, 30);
      timingFuncsCalled['intervalFunc4'] = timerID;
      
      // setInterval using multi-line string with double quotes with string
      // to run passed right in
      timerID = setInterval(
                "// make sure we arent being incorrectly called more than twice\n"
                + "var timingID = timingFuncsCalled[\'intervalFunc\' + 5];\n"
                + "// see how many times this interval has been run\n"
                + "var numTimes = numIntervals[\"intervalFunc\" + 5];\n"
                + "if (numTimes == undefined) {\n"
                + "  numTimes = 1;\n"
                + "} else {\n"
                + "  numTimes++;\n"
                + "}\n"
                + "numIntervals['intervalFunc\' + 5] = numTimes;\n"
                + "\n"
                + "top.assertTrue(\"Timer intervalFunc\" + 5 + ' should only '\n"
                + "                 + \"run 2 times\", (numTimes <= 2));\n"
                + "\n"
                + "// do some tests\n"
                + "if (numTimes == 1) {\n"
                + " testScope(true);\n"
                + " _testFromTimingFunc();\n"
                + "}\n"
                + "\n"
                + "// clear this timing function\n"
                + "if (numTimes == 2) {\n"
                + " timingFuncsCalled[\"intervalFunc\" + 5] = 'finished';\n"
                + " timingFuncsCalled.push(\"intervalFunc\" + 5);\n"
                + " window.clearInterval(timingID);\n"
                + "}\n",
                40);
      timingFuncsCalled['intervalFunc5'] = timerID;
      
      // setInterval using anonymous inline function
      var intervalDefinedTimerNumber = 6;
      var closureTimerID =
        setInterval(function() {
          // make sure we can see closure variables
          top.assertExists('intervalDefinedTimerNumber should exist',
                           intervalDefinedTimerNumber);
          top.assertEquals('intervalDefinedTimerNumber == 6', 6,
                           intervalDefinedTimerNumber);
                           
          // see how many times this interval has been run
          var numTimes = numIntervals['intervalFunc' + intervalDefinedTimerNumber];
          if (numTimes == undefined) {
            numTimes = 1;
          } else {
            numTimes++;
          }
          numIntervals['intervalFunc' + intervalDefinedTimerNumber] = numTimes;
      
          top.assertTrue('Timer intervalFunc' + intervalDefinedTimerNumber + ' should only '
                           + 'run 2 times', (numTimes <= 2));

          // do some tests on the first interval
          if (numTimes == 1) {
            testScope(true);
            _testFromTimingFunc();
          } else if (numTimes == 2) {
            // make sure our closureTimerID can be seen
            top.assertExists('closureTimerID should exist', closureTimerID);
            
            // clear this timing function after two intervals
            timingFuncsCalled['intervalFunc' + intervalDefinedTimerNumber] = 'finished';
            timingFuncsCalled.push('intervalFunc' + intervalDefinedTimerNumber);
            clearInterval(closureTimerID);
          }
        }, 50);
      timingFuncsCalled['intervalFunc6'] = closureTimerID;
      
      // TODO: Add tests where we have a bunch of setTimeout and setInterval
      // methods, and then remove the SVG object they are attached to to
      // ensure that we properly dispatch of interval timers after a 
      // call to svgweb.removeChild
      
      // TODO: Add interval timing functions to top.window; this should work,
      // and these should also persist once the SVG OBJECT is removed from
      // the page
    } 
    
    function testGetElementById() {
      // getElementById
      top.console.log('Inside SVG OBJECT: Testing getElementById...');
      
      // SVG nodes
      root = document.getElementById('svg2');
      top.assertExists('svg2 should exist', root);
      top.assertEquals('root.id == svg2', 'svg2', root.id);
      group = document.getElementById('layer4');
      top.assertExists('layer4 should exist', group);
      top.assertEquals('group.getAttribute(id) == layer4', 'layer4',
                   group.getAttribute('id'));

      // get non-SVG node
      cc = document.getElementById('myCCWork');
      top.assertExists('myCCWork should exist', cc);
      top.assertEquals('myCCWork.getAttribute(id) == myCCWork', 'myCCWork',
                   cc.getAttribute('id'));
      top.assertEquals('g.id == myCCWork', 'myCCWork',
                   cc.id);
                   
      // element.id syntax
      top.console.log('Inside SVG OBJECT: Testing element.id...');

      // SVG Group
      group = document.getElementById('layer4');
      top.assertExists('SVG g element with ID layer4 should exist', group);
      top.assertEquals('group.nodeName == g', 'g', group.nodeName);
      top.assertEquals('group.id == layer4', 'layer4', group.id);

      // SVGSVGElement
      svg = document.getElementById('svg2');
      top.assertEquals('svg.id == svg2', 'svg2', svg.id);

      // change the ID and make sure getElementById still sees it
      path = document.getElementById('path3182');
      path.id = 'path3182_changed';
      top.assertExists('doc.getElementById(path3182_changed) should exist',
                   document.getElementById('path3182_changed'));
      top.assertNull('doc.getElementById(path3182) == null',
                 document.getElementById('path3182'));

      // change the ID through setAttribute and make sure getElementById
      // still sees it
      path = document.getElementById('path3182_changed');
      path.setAttribute('id', 'path3182_changed_again');
      top.assertExists('doc.getElementById(path3182_changed_again) should '
                   + 'exist',
                   document.getElementById('path3182_changed_again'));
      top.assertNull('doc.getElementById(path3182_changed) == null',
                 document.getElementById('path3182_changed'));

      // change the ID and make sure getElementById still sees it for a
      // non-SVG, non-HTML element
      cc = document.getElementById('myCCWork');
      cc.id = 'myCCWork_changed';
      top.assertExists('doc.getElementById(myCCWork_changed) should exist',
                   document.getElementById('myCCWork_changed'));
      top.assertNull('doc.getElementById(myCCWork) == null',
                 document.getElementById('myCCWork'));

      // change the ID through setAttribute and make sure getElementById
      // still sees it for a non-SVG, non-HTML element
      cc = document.getElementById('myCCWork_changed');
      cc.setAttribute('id', 'myCCWork_changed_again');
      top.assertExists('doc.getElementById(myCCWork_changed_again) should '
                   + 'exist',
                   document.getElementById('myCCWork_changed_again'));
      top.assertNull('doc.getElementById(myCCWork_changed) == null',
                 document.getElementById('myCCWork_changed'));
      cc.id = 'myCCWork';
      top.assertExists('doc.getElementById(myCCWork) should exist',
                   document.getElementById('myCCWork'));
    }

    function testGetElementsByTagNameNS() {
      // getElementsByTagNameNS
      top.console.log('Inside SVG OBJECT: Testing getElementsByTagNameNS...');

      rects = document.getElementsByTagNameNS(svgns, 'rect');
      top.assertExists("doc.getElementsByTagNameNS(svgns, 'rect')", rects);
      top.assertEquals("doc.getElementsByTagNameNS(svgns, 'rect').length "
                  + "should be 6", 6, rects.length);

      sodipodi = document.getElementsByTagNameNS(sodipodi_ns, '*');
      top.assertExists("doc.getElementsByTagNameNS(sodipodi_ns, '*')", sodipodi);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, '*').length "
                  + "should be 1", 1, sodipodi.length);

      sodipodi = document.getElementsByTagNameNS(sodipodi_ns, 'namedview');
      top.assertExists("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')",
                   sodipodi);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview') "
                   + "length should be 1", 1, sodipodi.length);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')"
                   + "[0].nodeName == namedview", 'sodipodi:namedview',
                   sodipodi[0].nodeName);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')"
                  + "[0].localName == namedview", 'namedview',
                  sodipodi[0].localName);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')"
                  + "[0].prefix == sodipodi", 'sodipodi',
                  sodipodi[0].prefix);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')"
                   + "[0].namespaceURI == sodipodi_ns", sodipodi_ns,
                   sodipodi[0].namespaceURI);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')"
                  + "[0].nodeType == 1", 1, sodipodi[0].nodeType);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')"
                  + "[0].getAttribute('gridtolerance') == 10000", 10000,
                  sodipodi[0].getAttribute('gridtolerance'));
      sodipodi[0].setAttribute('gridtolerance', 20000);
      top.assertEquals("doc.getElementsByTagNameNS(sodipodi_ns, 'namedview')"
                  + "[0].getAttribute('gridtolerance') should now be 20000", 
                  20000,
                  sodipodi[0].getAttribute('gridtolerance'));
      // restore original value to make page-level tests work
      sodipodi[0].setAttribute('gridtolerance', 10000);

      rdf = document.getElementsByTagNameNS(rdf_ns, 'RDF');
      top.assertExists('RDF elements should exist', rdf);
      top.assertEquals('# of RDF elements == 1', 1, rdf.length);
      rdf = rdf[0];
      top.assertExists('RDF element', rdf);
      top.assertEquals('rdf.childNodes.length == 1', 1, rdf.childNodes.length);
      top.assertEquals('rdf.nodeName == rdf:RDF', 'rdf:RDF', rdf.nodeName);
      top.assertEquals('rdf.prefix == rdf', 'rdf', rdf.prefix);
      top.assertEquals('rdf.namespaceURI == '
                   + 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', rdf_ns,
                   rdf.namespaceURI);
      top.assertEquals('rdf.localName == RDF', 'RDF', rdf.localName);
      top.assertEquals('rdf.nodeType == 1', 1, rdf.nodeType);

      rdf = document.getElementsByTagNameNS(
                          'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
                          'badName');
      top.assertEquals('rdf.length == 0', 0, rdf.length);

      dc = document.getElementsByTagNameNS(dc_ns, 'format');
      top.assertExists("doc.getElementsByTagNameNS(dc_ns, 'format')", dc);
      top.assertEquals("doc.getElementsByTagNameNS(dc_ns, 'format').length "
                   + "== 1", 1, dc.length);
      dc = dc[0];
      top.assertEquals('dc.childNodes.length == 1', 1, dc.childNodes.length);
      top.assertExists('dc.firstChild should exist', dc.firstChild);
      top.assertEquals('dc.firstChild.nodeType == 3', 3, dc.firstChild.nodeType);
      child = dc.firstChild;
      top.assertEquals("dc.firstChild.nodeValue == image/svg+xml", 
                   'image/svg+xml', child.nodeValue);
      top.assertEquals("dc.firstChild.nodeName == #text", '#text',
                  child.nodeName);
      child.nodeValue = 'foobar/changed';
      top.assertEquals("dc.firstChild.nodeValue == foobar/changed", 
                  'foobar/changed', child.nodeValue);
      top.assertEquals("dc.firstChild.data == foobar/changed", 'foobar/changed',
                  child.data);
      top.assertEquals("dc.firstChild.textContent == foobar/changed", 
                  'foobar/changed', child.textContent);
      child.data = 'foobar/changed2';
      top.assertEquals("dc.firstChild.nodeValue == foobar/changed2", 
                  'foobar/changed2', child.nodeValue);
      top.assertEquals("dc.firstChild.data == foobar/changed2", 'foobar/changed2',
                  child.data);
      top.assertEquals("dc.firstChild.textContent == foobar/changed2", 
                  'foobar/changed2', child.textContent);
      child.textContent = 'foobar/changed3';
      top.assertEquals("dc.firstChild.nodeValue == foobar/changed3", 
                  'foobar/changed3', child.nodeValue);
      top.assertEquals("dc.firstChild.data == foobar/changed3", 'foobar/changed3',
                  child.data);
      top.assertEquals("dc.firstChild.textContent == foobar/changed3", 
                  'foobar/changed3', child.textContent);
      child.nodeValue = 'image/svg+xml';

      bad = document.getElementsByTagNameNS('http://bad-namespace.com',
                                            'rect');
      top.assertExists("doc.getElementsByTagNameNS('http://bad-namespace.com', "
                   + "'rect')", bad);
      top.assertEquals("doc.getElementsByTagNameNS('http://bad-namespace.com', "
                   + "'rect') length should be 0", 0, bad.length);

      bad = document.getElementsByTagNameNS('http://bad-namespace.com', '*');
      top.assertExists("doc.getElementsByTagNameNS('http://bad-namespace.com', "
                  + "'*')", bad);
      top.assertEquals("doc.getElementsByTagNameNS('http://bad-namespace.com', "
                   + "'*') length should be 0", 0, bad.length);
    }

    function testSVGSVGElementProperties() {
      // SVGSVGElement.x, .y, .width, .height
      top.console.log('Inside SVG OBJECT: Testing SVGSVGElement.x, .y, .width, '
                      + 'and .height...');
                  
      root = document.getElementById('svg2');
      top.assertEquals("svg2.x.baseVal.value should be 0", 0, 
                   root.x.baseVal.value);
      top.assertEquals("svg2.y.baseVal.value should be 0", 0, 
                   root.y.baseVal.value);
      top.assertEquals("svg2.width.baseVal.value should be 450", 450, 
                   root.width.baseVal.value);
      top.assertEquals("svg2.height.baseVal.value should be 450", 450, 
                   root.height.baseVal.value);
    }

    function testGetAttribute() {
      // getAttribute
      top.console.log('Inside SVG OBJECT: Testing getAttribute...');

      root = document.getElementById('svg2');
      top.assertExists("svg2 root should exist", root);
      top.assertEquals("root.getAttribute(width) == 450", 450,
                    root.getAttribute('width'));
      top.assertEquals("root.getAttribute(height) == 450", 450,
                    root.getAttribute('height')); 
      top.assertNull("root.getAttribute(badproperty) == null",
                 root.getAttribute('badproperty'));
                 
      rect = document.getElementById('rect3926');
      top.assertEquals("rect.getAttribute(width) == 455.04538", 455.04538,
                    rect.getAttribute('width'));      
      top.assertEquals("rect.getAttribute(height) == 455.04538", 455.04538,
                    rect.getAttribute('height')); 
      top.assertEquals("rect.getAttribute(x) == -2.2665024", -2.2665024,
                    rect.getAttribute('x')); 
      top.assertEquals("rect.getAttribute(y) == -1.7111325", -1.7111325,
                    rect.getAttribute('y'));

      path = document.getElementById('path3936');
      top.assertExists('path3936', path);
      top.assertEquals("path.getAttribute('id') == path3936", 'path3936',
                    path.getAttribute('id'));
      top.assertEquals("path.getAttribute(d)", 'M -46.533786,262.52475 C -46.533786,262.16533 -46.533786,261.80586 -46.533786,261.44645 C -46.533786,243.62866 16.554981,229.01164 23.485398,228.01906 C 43.635049,225.13323 96.995265,231.69508 116.84434,238.80207 C 147.34473,249.72283 184.4183,244.30422 215.02288,238.8252 C 252.24764,232.16103 286.868,208.98234 323.89032,200.14508 C 346.16295,194.82854 375.76711,197.75111 397.37169,206.59173 C 409.70541,211.63876 446.75054,212.33172 462.87351,215.21819 C 472.53968,216.9487 480.83934,220.60965 490.73062,220.60965 C 497.75494,220.60965 499.74082,201.30564 501.27114,194.73044 C 508.32008,164.44377 505.67234,129.04022 508.80009,97.683202 C 511.01863,75.441418 506.5414,52.97892 506.5414,30.828408 C 506.5414,17.668612 505.29744,4.6674469 503.52982,-7.9904811 C 500.04884,-32.918035 486.04048,-30.634835 470.40248,-30.634835 C 429.12258,-30.634835 387.49351,-45.73107 346.17488,-45.73107 C 311.26695,-45.73107 276.46532,-46.809369 241.52253,-46.809369 C 213.1252,-46.809369 184.94239,-42.496173 156.44546,-42.496173 C 136.10784,-42.496173 109.82707,-44.135484 90.19075,-37.104653 C 69.826652,-29.813245 47.25022,-40.060831 26.947603,-32.791432 C 18.52442,-29.775503 8.4274651,-32.015368 -0.15658888,-29.556536 C -10.878005,-26.485473 -16.581633,-28.643702 -25.755006,-17.695196 C -36.996821,-4.2780101 -49.812115,7.9805779 -53.612111,29.750109 C -58.322411,56.734631 -59.45499,82.116074 -62.646843,109.54451 C -65.945261,137.88872 -65.356136,173.28344 -65.356136,202.1398 C -65.356136,213.09986 -65.340402,225.97518 -63.850359,236.6455 C -63.01255,242.64504 -57.628423,243.79681 -54.062716,246.35022 C -49.532279,249.59448 -48.420809,254.41694 -46.533786,262.52475 z ',
                    path.getAttribute('d'));
      top.assertNull("path.getAttribute('fill') == null", 
                  path.getAttribute('fill'));

      sodipodi = document.getElementById('base');
      top.assertExists("doc.getElementById('base')", sodipodi);
      top.assertEquals("sodipodi.getAttribute('objecttolerance') == 10", 
                    '10', sodipodi.getAttribute('objecttolerance'));
    }

    function testSetAttribute() {
      // setAttribute
      top.console.log('Inside SVG OBJECT: Testing setAttribute...');

      rect = document.getElementById('rect5692');
      rect.setAttribute('fill', 'yellow');
      top.assertEquals("rect.getAttribute('fill') == yellow", 'yellow',
                    rect.getAttribute('fill'));
      rect.setAttribute('stroke', 'rgb(0,0,0)');
      top.assertEquals("rect.getAttribute('stroke') == rgb(0,0,0)", 'rgb(0,0,0)',
                    rect.getAttribute('stroke'));              
      rect.setAttribute('width', 400);
      top.assertEquals("rect.getAttribute('width') == 400", '400',
                    rect.getAttribute('width'));   
      rect.setAttribute('width', '450');
      top.assertEquals("rect.getAttribute('width') == 450", '450',
                    rect.getAttribute('width'));   
      rect.setAttribute('height', 400);
      top.assertEquals("rect.getAttribute('height') == 400", '400',
                    rect.getAttribute('height'));   
      rect.setAttribute('height', '450');
      top.assertEquals("rect.getAttribute('height') == 450", '450',
                    rect.getAttribute('height')); 
      rect.setAttribute('stroke-width', '5px');
      top.assertEquals("rect.getAttribute('stroke-width') == 5px", '5px',
                    rect.getAttribute('stroke-width'));
      rect.setAttribute('stroke', 'pink');
      top.assertEquals("rect.getAttribute('stroke') == pink", 'pink',
                    rect.getAttribute('stroke')); 
      rect.setAttribute('fill-opacity', '0.3');
      top.assertEquals("rect.getAttribute('fill-opacity') == 0.3", '0.3',
                    rect.getAttribute('fill-opacity')); 

      sodipodi = document.getElementById('base');
      top.assertExists("doc.getElementById('base')", sodipodi);
      sodipodi.setAttribute('pagecolor', '#0f0f0f');
      top.assertEquals("sodipodi.getAttribute('pagecolor') == #0f0f0f", '#0f0f0f',
                    sodipodi.getAttribute('pagecolor'));
      sodipodi.setAttribute('newAttribute', 'hello world');
      top.assertEquals("sodipodi.getAttribute('newAttribute') == hello world", 
                    'hello world',
                    sodipodi.getAttribute('newAttribute'));
    }

    function testChildNodes() {
      // childNodes
      top.console.log('Inside SVG OBJECT: Testing childNodes...');

      // NOTE: remember, whitespace are treated as real nodes

      // test the child nodes of an SVG group element
      group = document.getElementById('layer4');
      top.assertExists("group.childNodes", group.childNodes);
      top.assertEquals("group.length == 9", 9, group.childNodes.length);
      // child 0 is whitespace
      child = group.childNodes[0];
      top.assertExists("group.childNodes[first child]", child);
      top.assertEquals("group.childNodes[first child].nodeType == 3", 3,
                       child.nodeType);      
      child = group.childNodes[1]; 
      top.assertExists("group.childNodes[first element]", child);
      top.assertEquals("child.childNodes[first element].id == rect5688", 'rect5688', 
                    child.id);
      top.assertEquals("child.childNodes[first element].nodeName", 'rect', 
                   child.nodeName);
      top.assertEquals("child.childNodes[first element].nodeType", 1, child.nodeType);
      top.assertUndefined("child.childNodes[first element].data == undefined", 
                      child.data);
      top.assertEquals("child.childNodes[first element].textContent == ''", '', 
                   child.textContent);
      top.assertNull("child.childNodes[first element].nodeValue == null", 
                 child.nodeValue);
      top.assertExists("child.childNodes", child.childNodes);
      top.assertEquals("child.childNodes.length == 0", 0, 
                   child.childNodes.length);
      top.assertUndefined("group.childNodes[9] == undefined", group.childNodes[9]);
      for (var i = 0; i < group.childNodes.length; i++) {
        top.assertExists('looping through childNodes, i=' + i, 
                     group.childNodes[i]);
        top.assertExists('looping through childNodes, .nodeName for i=' + i,
                     group.childNodes[i].nodeName);
      }

      // test non-SVG content
      metadata = document.getElementsByTagNameNS(svgns, 'metadata')[0];
      top.assertExists('metadata element', metadata);
      top.assertEquals('metadata.getAttribute(id) == metadata7', 'metadata7',
                   metadata.getAttribute('id'));
      metadata.setAttribute('id', 'metadata8');
      top.assertEquals('After setting, metadata.getAttribute(id) == metadata8', 
                   'metadata8', metadata.getAttribute('id'));
      metadata = document.getElementById('metadata7');
      top.assertNull('metadata.id was changed, should be null now', metadata);
      metadata = document.getElementById('metadata8');
      top.assertExists('metadata.id was changed, should not be null', metadata);
      metadata.id = 'metadata7';
      top.assertEquals('metadata.childNodes == 1', 1, metadata.childNodes.length);
      rdf = metadata.childNodes[0];
      top.assertExists('RDF element', rdf);
      top.assertEquals('rdf.childNodes.length == 1', 1, rdf.childNodes.length);
      top.assertEquals('rdf.nodeName == rdf:RDF', 'rdf:RDF', rdf.nodeName);
      top.assertEquals('rdf.prefix == rdf', 'rdf', rdf.prefix);
      top.assertEquals('rdf.namespaceURI == http://www.w3.org/1999/02/22-rdf-syntax-ns#',
                   rdf_ns, rdf.namespaceURI);
      top.assertEquals('rdf.localName == RDF', 'RDF', rdf.localName);
      top.assertEquals('rdf.nodeType == 1', 1, rdf.nodeType);
      rdf = document.getElementsByTagNameNS(rdf_ns, 'RDF');
      top.assertExists('RDF elements should exist', rdf);
      top.assertEquals('# of RDF elements == 1', 1, rdf.length);
      rdf = rdf[0];
      top.assertExists('RDF element', rdf);
      top.assertEquals('rdf.childNodes.length == 1', 1, rdf.childNodes.length);
      top.assertEquals('rdf.nodeName == rdf:RDF', 'rdf:RDF', rdf.nodeName);
      top.assertEquals('rdf.prefix == rdf', 'rdf', rdf.prefix);
      top.assertEquals('rdf.namespaceURI == '
                   + 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', rdf_ns,
                   rdf.namespaceURI);
      top.assertEquals('rdf.localName == RDF', 'RDF', rdf.localName);
      top.assertEquals('rdf.nodeType == 1', 1, rdf.nodeType);
      cc = rdf.childNodes[0];
      top.assertExists('Creative Commons element should exist', cc);
      top.assertEquals('cc.childNodes.length == 2', 2, cc.childNodes.length);
      top.assertEquals('cc.nodeName == cc:Work', 'cc:Work', cc.nodeName);
      top.assertEquals('cc.prefix == cc', 'cc', cc.prefix);
      top.assertEquals('cc.namespaceURI == http://web.resource.org/cc/', cc_ns, 
                   cc.namespaceURI);
      top.assertEquals('cc.localName == Work', 'Work', cc.localName);
      top.assertEquals('cc.nodeType == 1', 1, cc.nodeType);  
    }
    
    function testOwnerDocument() {
      // ownerDocument
      top.console.log('Inside SVG OBJECT: Testing ownerDocument...');

      // root element
      svg = document.getElementById('svg2');
      top.assertEquals('svg.ownerDocument == doc', document, svg.ownerDocument);

      // SVG element
      path = document.getElementById('path3924');
      top.assertExists('path3924 should exist', path);
      top.assertEquals('path.ownerDocument == doc', document, path.ownerDocument);

      // SVG element using ownerDocument reference
      path = svg.ownerDocument.getElementById('path3924');
      top.assertExists('path3924 should exist', path);
      top.assertEquals('path.ownerDocument == doc', document, path.ownerDocument);

      // non-SVG element
      rdf = document.getElementsByTagNameNS(rdf_ns, 'RDF')[0];
      top.assertEquals('rdf.ownerDocument == doc', document, rdf.ownerDocument);
    }

    function testTextNodes() {
      top.console.log('Inside SVG OBJECT: Testing text node...');
      
      // text nodes (createTextNode, textNode.nodeValue, textNode.textContent,
      // and textNode.data) including setting and getting
      
      // text node
      svgText = document.getElementById('myText');
      top.assertExists('svgText should exist', svgText);
      top.assertEquals('svgText.nodeName == text', 'text', svgText.nodeName);
      top.assertEquals('svgText.childNodes.length == 1', 1, 
                   svgText.childNodes.length);
      textNode = svgText.childNodes[0];
      top.assertExists('svgText should have a DOM TEXT NODE', textNode);
      top.assertEquals('textNode.nodeType == 3', 3, textNode.nodeType);
      top.assertEquals('textNode.nodeName == #text', '#text', textNode.nodeName);
      top.assertNull('textNode.localName == null', textNode.localName);
      top.assertNull('textNode.namespaceURI == null', textNode.namespaceURI);
      top.assertNull('textNode.prefix == null', textNode.prefix);
      top.assertUndefined('textNode.x == undefined', textNode.x);
      top.assertUndefined('textNode.y == undefined', textNode.y);
      top.assertUndefined('textNode.width == undefined', textNode.width);
      top.assertUndefined('textNode.height == undefined', textNode.height);
      top.assertUndefined('textNode.id == undefined', textNode.id);
      top.assertExists('textNode.childNodes should exist', textNode.childNodes);
      top.assertEquals('textNode.childNodes.length == 0', 0,
                   textNode.childNodes.length);
      top.assertEquals('textNode.ownerDocument == doc', 
                   document, textNode.ownerDocument);
      top.assertEquals('textNode.nodeValue == hello world', 'hello world',
                   textNode.nodeValue);
      top.assertEquals('textNode.data == hello world', 'hello world',
                   textNode.data);
      top.assertEquals('textNode.textContent == hello world', 'hello world',
                   textNode.textContent);
      textNode.nodeValue = 'set through nodeValue';

      top.assertEquals('After setting .nodeValue, textNode.nodeValue == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.nodeValue);
      top.assertEquals('After setting .nodeValue, textNode.data == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.data);
      top.assertEquals('After setting .nodeValue, textNode.textContent == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.textContent);
      textNode.data = 'set through data';
      top.assertEquals('After setting .data, textNode.nodeValue == '
                   + 'set through data', 'set through data',
                   textNode.nodeValue);
      top.assertEquals('After setting .data, textNode.data == '
                   + 'set through data', 'set through data',
                   textNode.data);
      top.assertEquals('After setting .data, textNode.textContent == '
                   + 'set through nodeValue', 'set through data',
                   textNode.textContent);
      textNode.textContent = 'set through textContent';
      
      top.assertEquals('After setting .textContent, textNode.nodeValue == '
                   + 'set through textContent', 'set through textContent',
                   textNode.nodeValue);
      top.assertEquals('After setting .textContent, textNode.data == '
                   + 'set through textContent', 'set through textContent',
                   textNode.data);
      top.assertEquals('After setting .textContent, textNode.textContent == '
                   + 'set through textContent', 'set through textContent',
                   textNode.textContent);

      text = document.getElementById('myText');
      top.assertExists('SVG text element should exist', text);
      top.assertEquals('text.id == myText', 'myText', text.id);
      top.assertEquals('text.getAttribute(id) == myText', 'myText',
                   text.getAttribute('id'));
      top.assertEquals("text.getAttribute('x') == 80", 80,
                   text.getAttribute('x'));
      top.assertEquals("text.getAttribute('y') == 80", 80,
                   text.getAttribute('y'));
      top.assertEquals("text.getAttribute('font-family') == Verdana", 'Verdana',
                   text.getAttribute('font-family'));
      top.assertEquals("text.getAttribute('font-size') == 24", 24,
                   text.getAttribute('font-size'));
      top.assertEquals("text.getAttribute('fill') == blue", 'blue',
                   text.getAttribute('fill'));           
      top.assertNull('text.nodeValue == null', text.nodeValue);
      top.assertEquals('text.childNodes.length == 1', 1, text.childNodes.length);
      textNode = text.childNodes[0];
      top.assertExists('text.childNodes[0] should exist', textNode);
      top.assertEquals('textNode.nodeType == 3', 3, textNode.nodeType);
      top.assertEquals('textNode.nodeName == #text', '#text', textNode.nodeName);
      top.assertNull('textNode.localName == null', textNode.localName);
      top.assertNull('textNode.namespaceURI == null', textNode.namespaceURI);
      top.assertNull('textNode.prefix == null', textNode.prefix);
      top.assertEquals('textNode.childNodes.length == 0', 0,
                   textNode.childNodes.length);
      top.assertEquals('textNode.ownerDocument == doc', 
                   document, textNode.ownerDocument);
      textNode.nodeValue = 'hello world';
      top.assertEquals('textNode.nodeValue == hello world', 'hello world',
                   textNode.nodeValue);
      top.assertEquals('textNode.data == hello world', 'hello world',
                   textNode.data);
      top.assertEquals('textNode.textContent == hello world', 'hello world',
                   textNode.textContent); 
      textNode.nodeValue = 'set through nodeValue';
      top.assertEquals('After setting .nodeValue, textNode.nodeValue == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.nodeValue);
      top.assertEquals('After setting .nodeValue, textNode.data == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.data);
      top.assertEquals('After setting .nodeValue, textNode.textContent == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.textContent);
      textNode.data = 'set through data';
      top.assertEquals('After setting .data, textNode.nodeValue == '
                   + 'set through data', 'set through data',
                   textNode.nodeValue);
      top.assertEquals('After setting .data, textNode.data == '
                   + 'set through data', 'set through data',
                   textNode.data);
      top.assertEquals('After setting .data, textNode.textContent == '
                   + 'set through nodeValue', 'set through data',
                   textNode.textContent);
      textNode.textContent = 'set through textContent';
      top.assertEquals('After setting .textContent, textNode.nodeValue == '
                   + 'set through textContent', 'set through textContent',
                   textNode.nodeValue);
      top.assertEquals('After setting .textContent, textNode.data == '
                   + 'set through textContent', 'set through textContent',
                   textNode.data);
      top.assertEquals('After setting .textContent, textNode.textContent == '
                   + 'set through textContent', 'set through textContent',
                   textNode.textContent);

      desc = document.getElementsByTagNameNS(svgns, 'desc');
      top.assertExists('There should be a DESC element', desc);
      top.assertEquals('There should be 1 DESC element', 1, desc.length);
      desc = desc[0];
      top.assertEquals('desc.nodeName == desc', 'desc', desc.nodeName);
      top.assertNull('desc.nodeValue == null', desc.nodeValue);
      top.assertEquals('desc.childNodes.length == 1', 1, desc.childNodes.length);
      text = desc.childNodes[0];
      top.assertEquals('text.nodeType == 3', 3, text.nodeType);
      top.assertEquals('text.nodeValue == This is a description',
                   'This is a description', text.nodeValue);
      top.assertEquals('text.data == This is a description',
                   'This is a description', text.data);
      top.assertEquals('text.textContent == This is a description',
                   'This is a description', text.textContent);
      text.nodeValue = 'This is a description2';
      top.assertEquals('text.nodeValue == This is a description2',
                   'This is a description2', text.nodeValue);
      top.assertEquals('text.data == This is a description2',
                   'This is a description2', text.data);
      top.assertEquals('text.textContent == This is a description2',
                   'This is a description2', text.textContent);                    
      text.data = 'This is a description3';
      top.assertEquals('text.nodeValue == This is a description3',
                   'This is a description3', text.nodeValue);
      top.assertEquals('text.data == This is a description3',
                   'This is a description3', text.data);
      top.assertEquals('text.textContent == This is a description3',
                   'This is a description3', text.textContent);
      text.textContent = 'This is a description4';
      top.assertEquals('text.nodeValue == This is a description4',
                   'This is a description4', text.nodeValue);
      top.assertEquals('text.data == This is a description4',
                   'This is a description4', text.data);
      top.assertEquals('text.textContent == This is a description4',
                   'This is a description4', text.textContent);
      // restore original value for later tests
      text.textContent = 'This is a description';

      title = document.getElementsByTagNameNS(svgns, 'title');
      top.assertExists('SVG title should exist', title);
      // bug test (all browsers and renderers): make sure that it's not the 
      // HTML title element. On Safari with the native renderer, it changes
      // the page title. All browsers return a null namespaceURI.
      // make sure that the HTML page title didn't change (Safari bug)
      head = top.document.getElementsByTagName('head')[0];
      top.assertExists('head.getElementsByTagName("title")',
                   head.getElementsByTagName('title'));
      htmlTitle = head.getElementsByTagName('title');
      htmlTitle = htmlTitle[0];
      top.assertExists('htmlTitle should exist', htmlTitle);
      top.assertEquals('htmlTitle.innerHTML != This is a description4', true, 
                    htmlTitle.innerHTML != 'This is a description4');
      top.assertExists('There should be a TITLE element', title);
      top.assertEquals('There should be 1 TITLE element', 1, title.length);
      title = title[0];
      top.assertEquals('title.namespaceURI == svgns', svgns,
                   title.namespaceURI);
      // end bug test
      top.assertEquals('title.nodeName == title', 'title', title.nodeName);
      top.assertNull('title.nodeValue == null', title.nodeValue);
      top.assertEquals('title.childNodes.length == 1', 1, 
                   title.childNodes.length);
      text = title.childNodes[0];
      top.assertEquals('text.nodeType == 3', 3, text.nodeType);
      top.assertEquals('text.nodeValue == This is a title',
                   'This is a title', text.nodeValue);
      top.assertEquals('text.data == This is a title',
                   'This is a title', text.data);
      top.assertEquals('text.textContent == This is a title',
                   'This is a title', text.textContent);
      text.nodeValue = 'This is a title2';
      top.assertEquals('text.nodeValue == This is a title2',
                   'This is a title2', text.nodeValue);
      top.assertEquals('text.data == This is a title2',
                   'This is a title2', text.data);
      top.assertEquals('text.textContent == This is a title2',
                   'This is a title2', text.textContent);                    
      text.data = 'This is a title3';
      top.assertEquals('text.nodeValue == This is a title3',
                   'This is a title3', text.nodeValue);
      top.assertEquals('text.data == This is a title3',
                   'This is a title3', text.data);
      top.assertEquals('text.textContent == This is a title3',
                   'This is a title3', text.textContent);
      text.textContent = 'This is a title4';
      top.assertEquals('text.nodeValue == This is a title4',
                   'This is a title4', text.nodeValue);
      top.assertEquals('text.data == This is a title4',
                   'This is a title4', text.data);
      top.assertEquals('text.textContent == This is a title4',
                   'This is a title4', text.textContent);
    }

    function testDOMHierarchyAccessors() {
      // parentNode, firstChild, lastChild, previousSibling, and nextSibling
      top.console.log('Inside SVG OBJECT: Testing parentNode, firstChild, '
                      + 'lastChild, previousSibling, and nextSibling...');

      // root element
      svg = document.getElementById('svg2');
      top.assertExists('svg.parentNode should exist', svg.parentNode);
      top.assertEquals('svg.parentNode.nodeName == #doc' + 'ument', 
                    '#doc' + 'ument', svg.parentNode.nodeName.toLowerCase());
      top.assertNull('svg.previousSibling == null', svg.previousSibling);
      top.assertNull('svg.nextSibling == null', svg.nextSibling);
      top.assertExists('svg.firstChild should exist', svg.firstChild);
      top.assertEquals('svg.firstChild == svg.childNodes[0]', svg.childNodes[0],
                   svg.firstChild);
      
      // first child at top level
      child = svg.firstChild;
      top.assertEquals('firstChild.nodeName == defs', 'defs', child.nodeName);
      top.assertEquals('firstChild.parentNode == svg', svg, child.parentNode);
      top.assertNull('firstChild.previousSibling == null', child.previousSibling);
      top.assertExists('firstChild.nextSibling should exist', child.nextSibling);
      top.assertEquals('firstChild.nextSibling.nodeType == 3', 3,
                       child.nextSibling.nodeType);
      top.assertExists('firstChild.nextSibling.nextSibling should exist',
                       child.nextSibling.nextSibling);
      top.assertEquals('firstChild.nextSibling.nextSibling.nodeName == '
                       + 'sodipodi:namedview', 'sodipodi:namedview', 
                       child.nextSibling.nextSibling.nodeName);
      top.assertExists('svg.lastChild should exist', svg.lastChild);
      top.assertEquals('svg.lastChild == svg.childNodes[last child]',
                   svg.childNodes[svg.childNodes.length - 1],
                   svg.lastChild);

      // last child at top level
      child = svg.lastChild;
      top.assertEquals('lastChild.nodeName == g', 'g', child.nodeName);
      top.assertEquals('lastChild.getAttribute(id) == layer4', 'layer4', 
                   child.getAttribute('id'));
      top.assertEquals('lastChild.parentNode == svg', svg, child.parentNode);
      top.assertNull('lastChild.nextSibling == null', child.nextSibling);
      top.assertExists('lastChild.previousSibling should exist',
                   child.previousSibling);      
      top.assertEquals('lastChild.previousSibling.nodeName == group', 'g',
                   child.previousSibling.nodeName);
      child = svg.lastChild.firstChild.nextSibling;
      top.assertExists('svg.lastChild.firstChild.nextSibling should exist', 
                       child);
      top.assertEquals('svg.lastChild.firstChild.nextSibling.nodeName == rect',
                   'rect', child.nodeName);
      top.assertEquals('svg.lastChild.firstChild.nextSibling.id == rect5688',
                   'rect5688', child.id);
      top.assertEquals('lastChild.lastChild.nodeName == #text',
                   '#text', svg.lastChild.lastChild.nodeName);
      top.assertEquals('lastChild.lastChild.nodeType == 3', 3, 
                       svg.lastChild.lastChild.nodeType);
      top.assertEquals('lastChild.firstChild.nextSibling.parentNode == '
                       + 'this (g)', svg.lastChild, child.parentNode);
      top.assertEquals('lastChild.lastChild.parentNode == this (g)',
                   svg.lastChild, svg.lastChild.lastChild.parentNode);

      // metadata node
      metadata = document.getElementsByTagNameNS(svgns, 'metadata')[0];
      svg = document.getElementById('svg2');
      top.assertEquals('metadata.parentNode == svg2', svg, 
                   metadata.parentNode);
      top.assertExists('metadata.previousSibling should exist', 
                   metadata.previousSibling);
      top.assertEquals('metadata.previousSibling.nodeName == sodipodi:namedview',
                   'sodipodi:namedview', metadata.previousSibling.nodeName);
      top.assertExists('metadata.nextSibling should exist', metadata.nextSibling);
      top.assertEquals('metadata.nextSibling.nodeName == #text', '#text',
                   metadata.nextSibling.nodeName);
      top.assertExists('metadata.firstChild should exist', metadata.firstChild);
      top.assertExists('metadata.lastChild should exist', metadata.lastChild);
      top.assertEquals('metadata.firstChild == metadata.lastChild)',
                   metadata.lastChild, metadata.firstChild);
      rdf = metadata.firstChild;
      top.assertEquals('metadata.firstChild.nodeName == rdf:RDF', 'rdf:RDF',
                   rdf.nodeName);
      top.assertExists('metadata.firstChild.parentNode', 
                   rdf.parentNode);
      top.assertEquals('metadata.firstChild.parentNode == metadata node',
                   metadata, rdf.parentNode);
      top.assertExists('metadata.firstChild.childNodes[0] should exist',
                   rdf.childNodes[0]);
      cc = metadata.firstChild.childNodes[0];
      top.assertEquals('cc.nodeName == cc:Work', 'cc:Work', cc.nodeName);
      top.assertEquals('cc.parentNode == RDF node', rdf, cc.parentNode);
      top.assertExists('cc.firstChild should exist', cc.firstChild);
      top.assertExists('cc.lastChild should exist', cc.lastChild);
      format = cc.firstChild;
      type = cc.lastChild;
      top.assertEquals('cc.firstChild.nodeName == dc:format', 'dc:format',
                   format.nodeName);
      top.assertEquals('cc.lastChild.nodeName == dc:type', 'dc:type',
                   type.nodeName);
      top.assertEquals('cc.firstChild.nextSibling == cc.lastChild',
                   cc.lastChild, format.nextSibling);
      top.assertNull('cc.firstChild.previousSibling == null', 
                 format.previousSibling);
      top.assertEquals('cc.lastChild.previousSibling == cc.firstChild',
                   cc.firstChild, type.previousSibling);
      top.assertNull('cc.lastChild.nextSibling == null', 
                 type.nextSibling);
      top.assertExists('format.firstChild should exist (text node)',
                   format.firstChild);
      top.assertExists('format.lastChild should exist (text node)',
                   format.lastChild);
      top.assertEquals('format.childNodes.length == 1', 1, 
                   format.childNodes.length);
      child = format.firstChild;
      top.assertEquals('format.firstChild.nodeType == 3', 3, child.nodeType);
      top.assertEquals('format.firstChild.data == image/svg+xml', 'image/svg+xml', 
                   child.data);
      top.assertEquals('format.firstChild.parentNode == format', format,
                   child.parentNode);
      top.assertNull('format.firstChild.nextSibling == null', child.nextSibling);
      top.assertNull('format.firstChild.nextSibling == null', 
                 child.previousSibling);

      // append the node to an SVG node and ensure the values are correct, 
      // and when changed pass through to the Flash
      textNode = document.createTextNode('hello world', true);
      if (format.childNodes.length != 0) { // normalize for later tests
        format.removeChild(format.childNodes[0]);
      }
      textNode = format.appendChild(textNode);
      top.assertExists('textNode should exist', textNode);
      top.assertEquals('textNode.nodeType == 3', 3, textNode.nodeType);
      top.assertEquals('textNode.nodeName == #text', '#text', textNode.nodeName);
      top.assertNull('textNode.localName == ', textNode.localName);
      top.assertNull('textNode.namespaceURI == null', textNode.namespaceURI);
      top.assertNull('textNode.prefix == null', textNode.prefix);
      top.assertExists('textNode.childNodes should exist', textNode.childNodes);
      top.assertEquals('textNode.childNodes.length == 0', 0,
                   textNode.childNodes.length);
      top.assertEquals('textNode.ownerDocument == doc', 
                   document, textNode.ownerDocument);
      top.assertEquals('textNode.nodeValue == hello world', 'hello world',
                   textNode.nodeValue);
      top.assertEquals('textNode.data == hello world', 'hello world',
                   textNode.data);
      top.assertEquals('textNode.textContent == hello world', 'hello world',
                   textNode.textContent);
      textNode.nodeValue = 'set through nodeValue';
      top.assertEquals('After setting .nodeValue, textNode.nodeValue == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.nodeValue);
      top.assertEquals('After setting .nodeValue, textNode.data == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.data);
      top.assertEquals('After setting .nodeValue, textNode.textContent == '
                   + 'set through nodeValue', 'set through nodeValue',
                   textNode.textContent);
      textNode.data = 'set through data';
      top.assertEquals('After setting .data, textNode.nodeValue == '
                   + 'set through data', 'set through data',
                   textNode.nodeValue);
      top.assertEquals('After setting .data, textNode.data == '
                   + 'set through data', 'set through data',
                   textNode.data);
      top.assertEquals('After setting .data, textNode.textContent == '
                   + 'set through nodeValue', 'set through data',
                   textNode.textContent);
      textNode.textContent = 'set through textContent';
      top.assertEquals('After setting .textContent, textNode.nodeValue == '
                   + 'set through textContent', 'set through textContent',
                   textNode.nodeValue);
      top.assertEquals('After setting .textContent, textNode.data == '
                   + 'set through textContent', 'set through textContent',
                   textNode.data);
      top.assertEquals('After setting .textContent, textNode.textContent == '
                   + 'set through textContent', 'set through textContent',
                   textNode.textContent);
      // reset value for later tests
      textNode.textContent = 'image/svg+xml';
    }

    function testAppendChild() {
      // appendChild
      top.console.log('Inside SVG OBJECT: Testing appendChild...');

      // create an SVG visual element circle and attach it to a group,
      // then retrieve it from the page by ID and make sure it's properties
      // are present, then change one of them on the circle and make sure
      // it goes through
      circle = document.createElementNS(svgns, 'circle');
      top.assertExists('circle should exist', circle);
      top.assertEquals('circle.nodeType == 1', 1, circle.nodeType);
      top.assertNull('circle.prefix == null', circle.prefix);
      top.assertEquals('circle.namespaceURI == svgns', svgns, 
                   circle.namespaceURI);
      top.assertEquals('circle.nodeName == circle', 'circle', circle.nodeName);
      top.assertEquals('circle.localName == circle', 'circle', circle.localName);
      top.assertNull('circle.parentNode == null', circle.parentNode);
      top.assertNull('circle.firstChild == null', circle.firstChild);
      top.assertNull('circle.lastChild == null', circle.lastChild);
      top.assertNull('circle.nextSibling == null', circle.nextSibling);
      top.assertNull('circle.previousSibling == null', circle.previousSibling);
      top.assertExists('circle.childNodes should exist', circle.childNodes);
      top.assertEquals('circle.childNodes.length == 0', 0, 
                   circle.childNodes.length);
      circle.setAttribute('cx', 100);
      top.assertEquals('before appending, circle.cx', 100,
                   circle.getAttribute('cx'));
      circle.setAttribute('cy', 50);
      top.assertEquals('before appending, circle.cy', 50,
                   circle.getAttribute('cy'));
      circle.setAttribute('r', 40);
      top.assertEquals('before appending, circle.r', 40,
                   circle.getAttribute('r'));
      circle.setAttribute('stroke', 'black');
      top.assertEquals('before appending, circle.stroke', 'black',
                   circle.getAttribute('stroke'));
      circle.setAttribute('stroke-width', 2);
      top.assertEquals('before appending, circle.stroke-width', 2,
                   circle.getAttribute('stroke-width'));
      circle.setAttribute('fill', 'red');
      top.assertEquals('before appending, circle.fill', 'red',
                   circle.getAttribute('fill'));
      circle.id = 'myCircle2';
      top.assertEquals('circle.id == myCircle2', 'myCircle2', circle.id);
      top.assertEquals('circle.getAttribute(id) == myCircle2', 'myCircle2',
                   circle.getAttribute('id'));
      circle.setAttribute('id', 'myCircle');
      top.assertEquals('circle.id == myCircle', 'myCircle', circle.id);
      top.assertEquals('circle.getAttribute(id) == myCircle', 'myCircle',
                   circle.getAttribute('id'));
      group = document.getElementById('layer4');
      top.assertExists('layer4 should exist', group);
      top.assertEquals('group.id == layer4', 'layer4', group.getAttribute('id'));
      lengthBefore = group.childNodes.length;
      group.appendChild(circle);
      // test our post-append properties using the circle object reference
      top.assertEquals('group.lastChild == circle', group.lastChild,
                   circle);
      top.assertEquals('group.childNodes.length > lengthBefore + 1',
                   lengthBefore + 1, group.childNodes.length);
      top.assertEquals('group.childNodes[last child] == circle',
                   circle, group.childNodes[group.childNodes.length - 1]);
      top.assertEquals('circle.nodeType == 1', 1, circle.nodeType);
      top.assertEquals('circle.nodeName == circle', 'circle', circle.nodeName);
      top.assertNull('circle.prefix == null', circle.prefix);
      top.assertEquals('circle.namespaceURI == svgns', svgns, circle.namespaceURI);
      top.assertEquals('circle.localName == circle', 'circle', circle.localName);
      top.assertEquals('circle.parentNode == myGroup', group, circle.parentNode);
      child = group.childNodes[group.childNodes.length - 2];
      top.assertEquals('next to last childNode for group == circle.previousSibling',
                   child, circle.previousSibling);
      top.assertEquals('(next to last childNode for group).nextSibling == circle',
                   circle, child.nextSibling);
      top.assertNull('circle.nextSibling == null', circle.nextSibling);
      top.assertNull('circle.firstChild == null', circle.firstChild);
      top.assertNull('circle.lastChild == null', circle.lastChild);
      // now do these post-append circle tests again, but after retrieving 
      // it by ID
      circle = document.getElementById('myCircle');
      top.assertExists('myCircle should exist', circle);
      top.assertEquals('circle.id == myCircle', 'myCircle', circle.id);
      top.assertEquals('group.lastChild == circle', group.lastChild, circle);
      top.assertEquals('group.childNodes.length > lengthBefore + 1',
                   lengthBefore + 1, group.childNodes.length);
      top.assertEquals('group.childNodes[last child] == circle',
                   circle, group.childNodes[group.childNodes.length - 1]);
      top.assertEquals('circle.nodeType == 1', 1, circle.nodeType);
      top.assertEquals('circle.nodeName == circle', 'circle', circle.nodeName);
      top.assertNull('circle.prefix == null', circle.prefix);
      top.assertEquals('circle.namespaceURI == svgns', svgns, circle.namespaceURI);
      top.assertEquals('circle.localName == circle', 'circle', circle.localName);
      top.assertEquals('circle.parentNode == myGroup', group, circle.parentNode);
      child = group.childNodes[group.childNodes.length - 2];
      top.assertEquals('next to last childNode for group == circle.previousSibling',
                   child, circle.previousSibling);
      top.assertEquals('(next to last childNode for group).nextSibling == circle',
                   circle, child.nextSibling);
      top.assertNull('circle.nextSibling == null', circle.nextSibling);
      top.assertNull('circle.firstChild == null', circle.firstChild);
      top.assertNull('circle.lastChild == null', circle.lastChild);
      top.assertEquals('after appending, circle.cx', 100,
                   circle.getAttribute('cx'));
      top.assertEquals('after appending, circle.cy', 50,
                   circle.getAttribute('cy'));
      top.assertEquals('after appending, circle.r', 40,
                   circle.getAttribute('r'));
      top.assertEquals('after appending, circle.stroke', 'black',
                   circle.getAttribute('stroke'));
      top.assertEquals('after appending, circle.stroke-width', 2,
                   circle.getAttribute('stroke-width'));
      top.assertEquals('after appending, circle.fill', 'red',
                   circle.getAttribute('fill'));
      // now rename the ID and make sure it takes hold
      circle.id = 'myCircle3';
      top.assertExists('doc.getElementById(myCircle3) should exist',
                   document.getElementById('myCircle3'));
      top.assertNull('doc.getElementById(myCircle) == null',
                 document.getElementById('myCircle'));
      top.assertNull('doc.getElementById(myCircle2) == null',
                 document.getElementById('myCircle2'));
      // now make sure we can get the circle through 
      // getElementsByTagNameNS
      circle = null;
      matches = document.getElementsByTagNameNS(svgns, 'circle');
      for (var i = 0; i < matches.length; i++) {
        if (matches[i].getAttribute('id') == 'myCircle3') {
          circle = matches[i];
          break;
        }
      }
      top.assertExists('circle should exist after getElementsByTagNameNS', circle);
      circle.setAttribute('id', 'myCircle');

      // create an SVG visual element path and attach it to an
      // SVG root element. give it no ID, but set a custom attribute
      // instead. retrieve it from the page by 
      // getElementsByTagNameNS and make sure it's properties are present, 
      // then change one of them and make sure it goes through
      path = document.createElementNS(svgns, 'path');
      top.assertExists('path should exist', path);
      path.setAttribute('d', 'M -20.133478,316.78351 C -2.5343923,300.86446 23.150308,304.80212 43.988839,310.96541 C 64.182313,311.03608 84.995525,308.01108 102.22691,296.84598 C 116.66515,291.19078 133.79301,284.32476 148.30745,293.77777 C 164.10698,306.69071 183.19684,310.30976 201.28953,299.86958 C 220.6633,293.25475 231.73414,283.23716 251.94853,283.33722 C 273.59866,283.44962 280.81344,306.25205 297.64771,310.93883 C 318.87056,316.8474 338.07631,304.09275 351.47223,307.28886 C 365.27894,310.58296 386.98702,326.3148 408.2949,324.48886 C 425.22232,319.70984 428.34402,315.64725 448.13463,315.6678 C 459.12426,315.44023 482.48913,306.95039 477.97163,325.59815 C 478.30341,380.34313 478.63519,424.53633 478.96697,479.2813 C 309.08287,477.17096 139.1988,475.06064 -30.685293,472.9503 C -27.16803,420.89469 -23.650742,368.83911 -20.133478,316.78351 z ');
      top.assertEquals('path should have long d attribute',
                   'M -20.133478,316.78351 C -2.5343923,300.86446 23.150308,304.80212 43.988839,310.96541 C 64.182313,311.03608 84.995525,308.01108 102.22691,296.84598 C 116.66515,291.19078 133.79301,284.32476 148.30745,293.77777 C 164.10698,306.69071 183.19684,310.30976 201.28953,299.86958 C 220.6633,293.25475 231.73414,283.23716 251.94853,283.33722 C 273.59866,283.44962 280.81344,306.25205 297.64771,310.93883 C 318.87056,316.8474 338.07631,304.09275 351.47223,307.28886 C 365.27894,310.58296 386.98702,326.3148 408.2949,324.48886 C 425.22232,319.70984 428.34402,315.64725 448.13463,315.6678 C 459.12426,315.44023 482.48913,306.95039 477.97163,325.59815 C 478.30341,380.34313 478.63519,424.53633 478.96697,479.2813 C 309.08287,477.17096 139.1988,475.06064 -30.685293,472.9503 C -27.16803,420.89469 -23.650742,368.83911 -20.133478,316.78351 z ',
                   path.getAttribute('d'));
      top.assertEquals('path.id == ""', '', path.id);
      top.assertNull('path.getAttribute(fill) before setting == null',
                 path.getAttribute('fill'));
      path.setAttribute('fill', '#585a53');
      top.assertEquals('path.getAttribute(fill) == #585a53', '#585a53',
                   path.getAttribute('fill'));
      top.assertNull('path.getAttribute(somethingCustom) == null', 
                 path.getAttribute('somethingCustom'));
      path.setAttribute('somethingCustom', 'foo');
      top.assertEquals('path.getAttribute(somethingCustom) == foo', 'foo',
                   path.getAttribute('somethingCustom'));
      top.assertEquals('path.nodeType == 1', 1, path.nodeType);
      top.assertNull('path.prefix == null', path.prefix);
      top.assertEquals('path.namespaceURI == svgns', svgns, 
                   path.namespaceURI);
      top.assertEquals('path.nodeName == path', 'path', path.nodeName);
      top.assertEquals('path.localName == path', 'path', path.localName);
      top.assertNull('path.parentNode == null', path.parentNode);
      top.assertNull('path.firstChild == null', path.firstChild);
      top.assertNull('path.lastChild == null', path.lastChild);
      top.assertNull('path.nextSibling == null', path.nextSibling);
      top.assertNull('path.previousSibling == null', path.previousSibling);
      top.assertExists('path.childNodes should exist', path.childNodes);
      top.assertEquals('path.childNodes.length == 0', 0, 
                   path.childNodes.length);
      svg = document.getElementById('svg2');
      lengthBefore = svg.childNodes.length;
      temp = svg.appendChild(path);
      // make sure appendChild returns good results
      top.assertExists('path should exist', temp);
      top.assertExists('path should exist', path);
      top.assertEquals('path == appendChild result', path, temp);
      // make sure things really got appended
      top.assertEquals('svg.childNodes.length > lengthBefore',
                   lengthBefore + 1, svg.childNodes.length);
      top.assertEquals('svg.lastChild == path', path, svg.lastChild);
      top.assertEquals('svg.childNodes[last child] == path', path,
                   svg.childNodes[svg.childNodes.length - 1]);
      // check values post-appendChild using object reference
      top.assertEquals('path.nodeType == 1', 1, path.nodeType);
      top.assertNull('path.prefix == null', path.prefix);
      top.assertEquals('path.namespaceURI == svgns', svgns, path.namespaceURI);
      top.assertEquals('path.nodeName == path', 'path', path.nodeName);
      top.assertEquals('path.localName == path', 'path', path.localName);
      top.assertEquals('path.parentNode == svg', svg, path.parentNode);
      top.assertNull('path.firstChild == null', path.firstChild);
      top.assertNull('path.lastChild == null', path.lastChild);
      top.assertNull('path.nextSibling == null', path.nextSibling);
      // NOTE: It is a known issue that on IE sometimes two text nodes that
      // should be identical won't have == be true
      if (!top.isIE) {
        top.assertEquals('path.previousSibling == svg.childNodes[2nd to last child]', 
                     svg.childNodes[svg.childNodes.length - 2], 
                     path.previousSibling);
      }             

      top.assertExists('path.childNodes should exist', path.childNodes);
      top.assertEquals('path.childNodes.length == 0', 0, 
                   path.childNodes.length);
      top.assertEquals('path.getAttribute(somethingCustom) == foo', 'foo',
                   path.getAttribute('somethingCustom'));
      top.assertEquals('path.getAttribute(fill) == #585a53', '#585a53',
                   path.getAttribute('fill'));
      // break word top into pieces so it doesn't get transformed
      top.assertExists('t' + 'o' + 'p.svgweb should exist', top.svgweb);
      top.assertEquals('path.id == ""', "", path.id);
      // get the element through getElementsByTagNameNS, then check it's
      // DOM sibling/child properties
      matches = document.getElementsByTagNameNS(svgns, 'path');
      path = null;
      for (var i = 0; i < matches.length; i++) {
        if (matches[i].getAttribute('somethingCustom') == 'foo') {
          path = matches[i];
          break;
        }
      }
      top.assertExists('path should exist after getElementsByTagNameNS', path);
      top.assertEquals('path.parentNode == svg', svg, path.parentNode);
      top.assertNull('path.nextSibling == null', path.nextSibling);
      child = svg.childNodes[svg.childNodes.length - 2];
      top.assertExists('child should exist', child);
      // NOTE: It is a known issue that on IE sometimes two text nodes that
      // should be identical won't have == be true
      if (!top.isIE) {
        top.assertEquals('path.previousSibling == child', child, 
                     path.previousSibling);
      }
      top.assertEquals('child.nextSibling == path', path, child.nextSibling);
      top.assertNull('path.firstChild == null', path.firstChild);
      top.assertNull('path.lastChild == null', path.lastChild);
      top.assertEquals('path.childNodes.length == 0', 0, 
                       path.childNodes.length);
      top.assertEquals('path.id == ""', '', path.id);
      path.setAttribute('stroke-width', '5px');
      top.assertEquals('path.getAttribute(stroke-width) == 5px', '5px',
                   path.getAttribute('stroke-width'));

      // create a metadata node, then create a namespaced dublin core
      // element, then attach it and attach both to an SVG root element.
      // make sure to give the dublic core element an ID, then retrieve it
      // by ID to ensure it shows up in the DOM and is retrievable
      metadata = document.createElementNS(svgns, 'metadata');
      top.assertExists('metadata should exist', metadata);
      top.assertEquals('metadata.nodeName == metadata', 'metadata', 
                   metadata.nodeName);
      metadata.id = 'myMetadata';
      dc = document.createElementNS(dc_ns, 'dc:creator');
      top.assertEquals('dc.nodeName == dc:creator', 'dc:creator', dc.nodeName);
      top.assertEquals('dc.nodeType == 1', 1, dc.nodeType);
      top.assertEquals('dc.prefix == dc', 'dc', dc.prefix);
      top.assertEquals('dc.namespaceURI == dc_ns', dc_ns, dc.namespaceURI);
      top.assertEquals('dc.localName == creator', 'creator', dc.localName);
      top.assertNull('dc.parentNode == null', dc.parentNode);
      top.assertNull('dc.firstChild == null', dc.firstChild);
      top.assertNull('dc.lastChild == null', dc.lastChild);
      top.assertNull('dc.previousSibling == null', dc.previousSibling);
      top.assertNull('dc.nextSibling == null', dc.nextSibling);
      top.assertEquals('dc.childNodes.length == 0', 0, dc.childNodes.length);
      text = document.createTextNode('Brad Neuberg', true);
      dc.appendChild(text);
      top.assertEquals('text.nodeType == 3', 3, text.nodeType);
      top.assertEquals('text.nodeName == #text', '#text', text.nodeName);
      top.assertNull('text.prefix == null', text.prefix);
      top.assertNull('text.namespaceURI == null', text.namespaceURI);
      top.assertEquals('dc.childNodes.length == 1', 1, dc.childNodes.length);
      dc.setAttribute('id', 'dcCreator');
      svg = document.getElementById('svg2');
      temp = svg.appendChild(metadata);
      metadata.appendChild(dc);
      top.assertEquals('metadata == temp', metadata, temp);
      // now test values post-appendChild
      metadata = document.getElementById('myMetadata');
      top.assertExists('metadata should exist', metadata);
      dc = document.getElementById('dcCreator');
      top.assertExists('dc:creator should exist', dc);
      top.assertEquals('metadata.childNodes.length == 1', 1, 
                   metadata.childNodes.length);
      top.assertEquals('metadata.firstChild == dc', dc, metadata.firstChild);
      top.assertEquals('metadata.lastChild == dc', dc, metadata.lastChild);
      top.assertEquals('metadata.childNodes[0] == dc', dc, 
                   metadata.childNodes[0]);
      dc = metadata.firstChild;
      top.assertEquals('dc.nodeName == dc:creator', 'dc:creator', dc.nodeName);
      top.assertEquals('dc.nodeType == 1', 1, dc.nodeType);
      top.assertEquals('dc.prefix == dc', 'dc', dc.prefix);
      top.assertEquals('dc.namespaceURI == dc_ns', dc_ns, dc.namespaceURI);
      top.assertEquals('dc.localName == creator', 'creator', dc.localName);
      top.assertEquals('dc.parentNode == metadata', metadata, dc.parentNode);
      text = dc.firstChild;
      top.assertExists('text node should exist', text);
      top.assertEquals('text.nodeName == #text', '#text', text.nodeName);
      top.assertEquals('text.nodeType == 3', 3, text.nodeType);
      top.assertEquals('text.data == Brad Neuberg', 'Brad Neuberg', text.data);
      top.assertEquals('text.textContent == Brad Neuberg', 'Brad Neuberg', 
                   text.data);
      top.assertEquals('text.nodeValue == Brad Neuberg', 'Brad Neuberg', 
                   text.nodeValue);
      top.assertEquals('text.parentNode == dc', dc, text.parentNode);
      top.assertNull('text.firstChild == null', text.firstChild);
      top.assertNull('text.lastChild == null', text.lastChild);
      top.assertNull('text.nextSibling == null', text.nextSibling);
      top.assertNull('text.previousSibling == null', text.previousSibling);
      top.assertEquals('text.childNodes.length == 0', 0, text.childNodes.length);
      top.assertEquals('dc.firstChild == text node', text, dc.firstChild);
      top.assertEquals('dc.lastChild == text node', text, dc.lastChild);
      top.assertEquals('dc.lastChild == dc.firstChild', dc.firstChild, 
                   dc.lastChild);
      top.assertNull('dc.nextSibling == null', dc.nextSibling);
      top.assertNull('dc.previousSibling == null', dc.previousSibling);
      // change text node value and make sure it maps over
      text.data = 'James Hight';
      // make sure it shows up in getElementsByTagNameNS
      matches = document.getElementsByTagNameNS(dc_ns, 'creator');
      dc = null;
      for (var i = 0; i < matches.length; i++) {
        if (matches[i].id == 'dcCreator') {
          dc = matches[i];
        }
      }
      top.assertExists('dc should exist after getElementsByTagNameNS', dc);
      top.assertEquals('dc.nodeName == dc:creator', 'dc:creator', dc.nodeName);
      text = dc.childNodes[0];
      top.assertEquals('text node == James Hight', 'James Hight', 
                   text.textContent);
      // change the ID and ensure it maps over
      dc.id = 'dcCreator2';
      top.assertEquals('dc.id == dcCreator2', 'dcCreator2', dc.id);
      dc = document.getElementById('dcCreator2');
      top.assertExists('dcCreator2 should exist', dc);
      dc = document.getElementById('dcCreator');
      top.assertNull('dcCreator should not exist', dc);

      // create multiple children and append all of them one at a time
      // to ensure that appending past a first element works
      group = document.createElementNS(svgns, 'g');
      path = document.createElementNS(svgns, 'path');
      path.id = 'group_path1';
      group.appendChild(path);
      path = document.createElementNS(svgns, 'path');
      path.id = 'group_path2';
      group.appendChild(path);
      path = document.createElementNS(svgns, 'path');
      path.id = 'group_path3';
      group.appendChild(path);
      path = document.createElementNS(svgns, 'path');
      path.id = 'group_path4';
      group.appendChild(path);
      path = document.createElementNS(svgns, 'path');
      path.id = 'group_path5';
      group.appendChild(path);
      svg = document.getElementById('svg2');
      nextToLast = svg.lastChild;
      svg.appendChild(group);
      group = nextToLast.nextSibling; // should be our new group
      top.assertExists('Group of created paths should exist', group);
      top.assertEquals('group.childNodes.length == 5', 5, 
                   group.childNodes.length);
      top.assertEquals('group.childNodes[0].getAttribute(id) == group_path1',
                   'group_path1', group.childNodes[0].getAttribute('id'));
      top.assertEquals('group.childNodes[1].getAttribute(id) == group_path2',
                   'group_path2', group.childNodes[1].getAttribute('id'));
      top.assertEquals('group.childNodes[2].getAttribute(id) == group_path3',
                   'group_path3', group.childNodes[2].getAttribute('id'));
      top.assertEquals('group.childNodes[3].getAttribute(id) == group_path4',
                   'group_path4', group.childNodes[3].getAttribute('id'));
      top.assertEquals('group.childNodes[4].getAttribute(id) == group_path5',
                   'group_path5', group.childNodes[4].getAttribute('id'));
    }

    function testRemoveChild() {
      // Test removeChild
      top.console.log('Inside SVG OBJECT: Testing removeChild...');

      // remove a normal circle element _after_ appending to DOM
      // after getting circle element through getElementById
      rect = document.getElementById('rect5690');
      var svgParent = rect.parentNode;
      lengthBefore = svgParent.childNodes.length;
      rect.parentNode.removeChild(rect);
      top.assertEquals('svgParent.childNodes.length == lengthBefore - 1',
                   lengthBefore - 1, svgParent.childNodes.length);
      top.assertNull('rect.parentNode == null', rect.parentNode);
      top.assertNull('doc.getElementById(rect5690) == null',
                 document.getElementById('rect5690'));

      // remove a text node _before_ appending to DOM on an SVG Title
      // element
      textNode = document.createTextNode('text for an svg title element', 
                                         true);
      title = document.createElementNS(svgns, 'title');
      title.appendChild(textNode);
      top.assertEquals('title.firstChild.nodeValue == '
                   + 'text for an svg title element',
                   'text for an svg title element',
                   title.firstChild.nodeValue);
      top.assertEquals('textNode.parentNode == title', title, 
                   textNode.parentNode);
      temp = textNode.parentNode.removeChild(textNode);
      top.assertEquals('title.childNodes.length == 0', 0, 
                   title.childNodes.length);
      top.assertNull('textNode.parentNode == null', textNode.parentNode);
      top.assertEquals('textNode.nodeValue == text for an svg title element',
                   'text for an svg title element', textNode.nodeValue);
      top.assertNull('title.firstChild == null', title.firstChild);
      top.assertEquals('textNode == temp', temp, textNode);

      // remove an element from the SVG root
      lengthBefore = svg.childNodes.length;
      temp = svg.lastChild;
      svg.removeChild(svg.lastChild);
      top.assertEquals('svg.childNodes.length == lengthBefore - 1',
                   lengthBefore - 1, svg.childNodes.length);
      top.assertEquals('group.parentNode == null', group.parentNode);
      top.assertEquals('temp.parentNode == null', temp.parentNode);        

      // remove an SVG TITLE element
      matches = document.getElementsByTagNameNS(svgns, 'title');
      lengthBefore = matches.length;
      top.assertTrue('title matches >= 1', matches.length >= 1);
      title = matches[0];
      top.assertTrue('title.parentNode != null', title.parentNode != null);
      parentNode = title.parentNode;
      title.parentNode.removeChild(title);
      top.assertNull('title.parentNode == null', title.parentNode);
      top.assertTrue('parentNode.lastChild != title', 
                 parentNode.lastChild != title); 
      matches = document.getElementsByTagNameNS(svgns, 'title');
      top.assertEquals('getElementsByTagNameNS(title).length == lengthBefore - 1',
                   lengthBefore - 1, 
                   document.getElementsByTagNameNS(svgns, 'title').length);

      // remove a namespaced metadata child
      dc = document.getElementById('myDCType');
      parentNode = dc.parentNode;
      lengthBefore = dc.parentNode.childNodes.length;
      dc.parentNode.removeChild(dc);
      top.assertNull('dc.parentNode == null', dc.parentNode);
      top.assertEquals('parentNode.childNodes.length == lengthBefore - 1',
                   lengthBefore - 1, parentNode.childNodes.length);
      top.assertNull('doc.getElementById(myDCType) == null',
                 document.getElementById('myDCType'));
      parentNode.appendChild(dc);
      top.assertEquals('after reappending, parentNode.childNodes.length == '
                   + 'lengthBefore', 
                   lengthBefore, parentNode.childNodes.length);
    }

    function testReplaceChild() {
      // Test replaceChild
      top.console.log('Inside SVG OBJECT: Testing replaceChild...');

      // after things are appended to the DOM, replace an SVG circle
      // element with an SVG rectangle
      group = document.createElementNS(svgns, 'g');
      circle = document.createElementNS(svgns, 'circle');
      circle.setAttribute('cx', 2);
      circle.setAttribute('cy', 2);
      circle.setAttribute('r', 15);
      circle.setAttribute('stroke', 'green');
      circle.setAttribute('stroke-width', 1);
      circle.setAttribute('fill', 'pink');
      group.appendChild(circle);
      rect = document.createElementNS(svgns, 'rect');
      rect.setAttribute('x', 5);
      rect.setAttribute('y', 5);
      rect.setAttribute('width', 20);
      rect.setAttribute('height', 20);
      rect.setAttribute('fill', 'orange');
      svg = document.getElementById('svg2');
      svg.appendChild(group);
      temp = group.replaceChild(rect, circle);
      top.assertNull('circle.parentNode == null', circle.parentNode);
      top.assertEquals('rect.parentNode == group', group, rect.parentNode);
      top.assertEquals('group.childNodes[0] == rect', rect,
                   group.childNodes[0]);
      top.assertEquals('temp == circle', temp, circle);

      // after things are appended to the DOM, replace an SVG circle
      // element with an SVG rectangle; use getElementById to get the
      // parent element instance
      group = document.createElementNS(svgns, 'g');
      group.id = 'myGroup1';
      circle = document.createElementNS(svgns, 'circle');
      circle.setAttribute('cx', 2);
      circle.setAttribute('cy', 2);
      circle.setAttribute('r', 15);
      circle.setAttribute('stroke', 'green');
      circle.setAttribute('stroke-width', 1);
      circle.setAttribute('fill', 'pink');
      group.appendChild(circle);
      rect = document.createElementNS(svgns, 'rect');
      rect.setAttribute('x', 5);
      rect.setAttribute('y', 5);
      rect.setAttribute('width', 20);
      rect.setAttribute('height', 20);
      rect.setAttribute('fill', 'orange');
      svg = document.getElementById('svg2');
      svg.appendChild(group);
      group = document.getElementById('myGroup1');
      temp = group.replaceChild(rect, circle);
      top.assertNull('circle.parentNode == null', circle.parentNode);
      top.assertEquals('rect.parentNode == group', group, rect.parentNode);
      top.assertEquals('group.childNodes[0] == rect', rect,
                   group.childNodes[0]);
      top.assertEquals('temp == circle', temp, circle);
    }

    function testInsertBefore() {
      // Test insertBefore
      top.console.log('Inside SVG OBJECT: Testing insertBefore...');

      // after things are appended to the DOM, insert an SVG GROUP before
      // another SVG GROUP
      group = document.getElementById('layer11');
      group2 = document.getElementById('layer12');
      group2.parentNode.removeChild(group2);
      top.assertNull('doc.getElementById(layer12) == null',
                 document.getElementById('layer12'));
      top.assertEquals('group2.parentNode == null', group2.parentNode);
      temp = group.parentNode.insertBefore(group2, group);
      parentNode = document.getElementById('svg2');
      top.assertEquals('group2.parentNode == parentNode', parentNode,
                   group2.parentNode);
      top.assertEquals('group2.nextSibling == group', group, group2.nextSibling);
      top.assertEquals('group.previousSibling == group2', group2,
                   group.previousSibling);
      top.assertExists('doc.getElementById(layer12) should exist',
                   document.getElementById('layer12'));
    }

    function testHasChildNodes() {
      // Test hasChildNodes
      top.console.log('Inside SVG OBJECT: Testing hasChildNodes...');

      // grab a group element from the document that has child nodes
      group = document.getElementById('layer4');
      top.assertTrue('layer4.hasChildNodes() == true', group.hasChildNodes());

      // grab a path element from the document that doesn't have child nodes
      path = document.getElementById('path3913');
      top.assertFalse('path3913.hasChildNodes() == false', path.hasChildNodes());

      // grab a text node from the document that doesn't have child nodes
      text = document.getElementById('myText');
      top.assertExists('myText should exist', text);
      top.assertTrue('text.hasChildNodes() == true', text.hasChildNodes());
      textNode = text.firstChild;
      top.assertExists('text.firstChild should exist', textNode);
      top.assertFalse('textNode.hasChildNodes() == false', 
                  textNode.hasChildNodes());

      // grab a namespaced element from METADATA that has child nodes
      cc = document.getElementById('myCCWork');
      top.assertExists('myCCWork should exist', cc);
      top.assertTrue('myCCWork.hasChildNodes() == true', cc.hasChildNodes());

      // grab a namespaced element from METADATA that does not have
      // child nodes
      dc = document.getElementById('myDCType');
      top.assertExists('myDCType should exist', dc);
      top.assertFalse('dc.hasChildNodes() == false', dc.hasChildNodes());

      // test hasChildNodes on an unappended element and text node
      text = document.createElementNS(svgns, 'text');
      text.setAttribute('x', 250);
      text.setAttribute('y', 250);
      top.assertFalse('text before append, text.hasChildNodes() == false',
                 text.hasChildNodes());
      textNode = document.createTextNode('hello world', true);
      text.appendChild(textNode);
      top.assertTrue('text before append, text.hasChildNodes() == true',
                 text.hasChildNodes());
      top.assertFalse('textNode before append, textNode.hasChildNodes() == false', 
                  textNode.hasChildNodes());

      // test an SVG root node
      svg = document.getElementById('svg2');
      top.assertTrue('svg.hasChildNodes() == true', svg.hasChildNodes());
    }
    
    // omitting testHasAttributes()
    // omitting testIsSupported()
    
    function testStyle() {
      // Test .style property
      top.console.log('Inside SVG OBJECT: Testing style property...');

      // change the style of a node that is attached
      circle = document.createElementNS(svgns, 'circle');
      svg = document.getElementById('svg2');
      svg.appendChild(circle);
      circle.setAttribute('cx', 200);
      circle.setAttribute('cy', 200);
      circle.setAttribute('r', 50);
      circle.style.fill = 'red';
      circle.style.stroke = 'blue';
      circle.style.strokeWidth = 10;
      top.assertNull('circle.getAttribute(fill) == null', 
                 circle.getAttribute('fill'));
      top.assertNull('circle.getAttribute(stroke) == null', 
                 circle.getAttribute('stroke'));
      top.assertNull('circle.getAttribute(stroke-width) == null', 
                 circle.getAttribute('stroke-width'));
      // make sure attributes don't get set
      top.assertEqualsAny('circle.style.fill == red or #FF0000 or #ff0000', 
                      ['red', '#FF0000', '#ff0000'], 
                      circle.style.fill);
      top.assertEqualsAny('circle.style.stroke == blue or #0000FF or #0000ff',
                      ['blue', '#0000FF', '#0000ff'],
                      circle.style.stroke);
      top.assertEqualsAny('circle.style.strokeWidth == 10 or 10px',
                      [10, '10px'],
                      circle.style.strokeWidth);
      // make sure style[prop] syntax works
      top.assertEqualsAny('circle.style[fill] == red or #FF0000 or #ff0000',
                      ['red', '#FF0000', '#ff0000'], 
                      circle.style['fill']);
      top.assertEqualsAny('circle.style[stroke] == blue or #0000FF or #0000ff',
                      ['blue', '#0000FF', '#0000ff'],
                      circle.style['stroke']);
      top.assertEqualsAny('circle.style[strokeWidth] == 10 or 10px',
                      [10, '10px'],
                      circle.style['strokeWidth']);
      // now set attributes; surprisingly, styles should retain their old
      // values
      circle.setAttribute('fill', 'blue');
      circle.setAttribute('stroke', 'red');
      circle.setAttribute('stroke-width', 5);
      top.assertEqualsAny('circle.getAttribute(fill) == blue '
                      + 'or #0000FF or #0000ff',
                      ['blue', '#0000FF', '#0000ff'],
                      circle.getAttribute('fill'));
      top.assertEqualsAny('circle.style.fill == red or #FF0000 or #ff0000',
                      ['red', '#FF0000', '#ff0000'],
                      circle.style.fill);
      top.assertEqualsAny('circle.getAttribute(stroke) == red '
                      + 'or #FF0000 or #ff0000',
                      ['red', '#FF0000', '#ff0000'],
                      circle.getAttribute('stroke'));
      top.assertEqualsAny('circle.style.stroke == blue or #0000FF or #0000ff',
                      ['blue', '#0000FF', '#0000ff'],
                      circle.style.stroke);
      top.assertEqualsAny('circle.getAttribute(stroke-width) == 5 or 5px',
                      [5, '5px'],
                      circle.getAttribute('stroke-width'));
      top.assertEqualsAny('circle.style.strokeWidth == 10 or 10px',
                      [10, '10px'],
                      circle.style.strokeWidth);
      // set style again to see if it overrides attribute setting;
      // it should _not_ -- XML attributes have precedence over style
      circle.style.fill = 'green';
      top.assertEqualsAny('circle.style.fill == green or #008000',
                      ['green', '#008000'],
                      circle.style.fill);
      // attribute and style have independent values
      top.assertEqualsAny('circle.getAttribute(fill) == blue '
                      + 'or #0000FF or #0000ff',
                      ['blue', '#0000FF', '#0000ff'],
                      circle.getAttribute('fill'));

      // rectangle
      rect = document.createElementNS(svgns, 'rect');
      svg = document.getElementById('svg2');
      rect.setAttribute('x', 400);
      rect.setAttribute('y', 20);
      rect.setAttribute('width', 60);
      rect.setAttribute('height', 60);
      rect.setAttribute('rx', 3);
      rect.setAttribute('ry', 5);
      rect.style.opacity = 0.5;
      rect.style.fill = '#0000FF';
      svg.appendChild(rect);
      rect.style.stroke = 'rgb(0, 255, 0)';
      rect.style.strokeWidth = '10px';
      rect.style.strokeOpacity = 0.8;
      rect.style.strokeLinecap = 'round';
      rect.style.strokeLinejoin = 'round';
      rect.style.strokeMiterlimit = 15;
      rect.style.strokeDasharray = '5,3,2';
      rect.style.strokeDashoffset = 3;
      top.assertEqualsAny('rect.style.opacity == 0.5',
                      [0.5],
                      rect.style.opacity);
      top.assertEqualsAny('rect.style.stroke == rgb(0, 255, 0) '
                      + 'or #00FF00 or #00ff00',
                      ['rgb(0, 255, 0)', '#00FF00', '#00ff00'],
                      rect.style.stroke);
      top.assertEqualsAny('rect.style.fill == #0000FF '
                      + 'or rgb(0, 0, 255) or #0000ff',
                      ['#0000FF', 'rgb(0, 0, 255)', '#0000ff'],
                      rect.style.fill);               
      top.assertEqualsAny('rect.style.strokeWidth == 10px',
                      ['10px'],
                      rect.style.strokeWidth);
      top.assertEqualsAny('rect.style.strokeOpacity == 0.8',
                      [0.8],
                      rect.style.strokeOpacity);
      top.assertEqualsAny('rect.style.strokeLinecap == round',
                      ['round'],
                      rect.style.strokeLinecap);
      top.assertEqualsAny('rect.style.strokeLinejoin == round',
                      ['round'],
                      rect.style.strokeLinejoin);
      top.assertEqualsAny('rect.style.strokeMiterlimit == 15',
                      [15, '15px'],
                      rect.style.strokeMiterlimit);
      // Safari adds pixel info; FF adds spaces to strokeDasharray values
      top.assertEqualsAny('rect.style.strokeDasharray == '
                      + '5,3,2 or 5, 3, 2 or 5px, 3px, 2px',
                      ['5,3,2', '5, 3, 2', '5px, 3px, 2px', '5px 3px 2px'],
                      rect.style.strokeDasharray);
      // Safari adds pixel info to strokeDashoffset
      top.assertEqualsAny('rect.style.strokeDashoffset == 3 or 3px',
                      [3, '3px'],
                      rect.style.strokeDashoffset);

      // text
      text = document.createElementNS(svgns, 'text');
      text.id = 'testStyleText1';
      text.setAttribute('x', 30);
      text.setAttribute('y', 400);
      text.style.fill = 'yellow';
      text.style.fontSize = '30px';
      text.style.fontWeight = 'bold';
      text.appendChild(document.createTextNode('Some bolded text!', true));
      svg = document.getElementById('svg2');
      svg.appendChild(text);
      // get text node from getElementById to make sure styles work after
      // that
      text = document.getElementById('testStyleText1');
      top.assertExists('testStyleText1 should exist', text);
      top.assertEqualsAny('text.style.fill == yellow or #FFFF00 or #ffff00',
                      ['yellow', '#FFFF00', '#ffff00'],
                      text.style.fill);
      top.assertEqualsAny('text.style.fontSize == 30px',
                      ['30px'],
                      text.style.fontSize);
      top.assertEqualsAny('text.style.fontWeight == bold',
                      ['bold', '700'],
                      text.style.fontWeight);

      // test on elements that have style settings in the markup and 
      // document itself; get style values different ways, set them, etc.
      // Read style values off an element first.
      group = document.getElementById('layer1');
      top.assertExists('layer1 should exist', group);
      top.assertEqualsAny('layer1.style.opacity == 1',
                      [1],
                      group.style.opacity);
      top.assertEqualsAny('layer1.style.display == inline',
                      ['inline'],
                      group.style.display);
      // Firefox and Safari put spaces in different places in their
      // style strings; Safari also doesn't have a trailing semicolon
      top.assertTrue('layer1.getAttribute(style) == opacity:1;display:inline;',
                 /opacity:\s*1;\s*display:\s*inline;?/.test(
                                    group.getAttribute('style')));
      // repeat reading style values off another element
      rect = document.getElementById('rect3926');
      // NOTE: unfortunately, FF has a bug where it doesn't mirror all
      // styles set with the style="" attribute into the 
      // element.style.* namespace! It only mirrors some, such as opacity
      // and display, but not others like fill.
      runTests = true;
      // break the word top into pieces so it doesn't get transformed
      top.assertEqualsAny('renderer should be native or flash',
                      ['native', 'flash'], renderer);
      if (top.isFF && renderer == 'native') {
        runTests = false;
      }
      if (runTests) {
        top.assertEqualsAny('rect3926.style.opacity == 1',
                        [1],
                        rect.style.opacity);
        top.assertEqualsAny('rect3926.style.fill == #c1cfeb or #C1CFEB',
                        ['#c1cfeb', '#C1CFEB'],
                        rect.style.fill);
        top.assertEqualsAny('rect3926.style.fillOpacity == 1',
                        [1],
                        rect.style.fillOpacity);
        top.assertEqualsAny('rect3926.style.stroke == #555040',
                        ['#555040'],
                        rect.style.stroke); 
        top.assertEqualsAny('rect3926.style.strokeWidth == 3.1614 or '
                        + '3.1614px or 3.16145px or 3.16145396 or 3.16px or 3.16145',
                        [3.1614, '3.1614px', '3.16145px', 3.16145396, '3.16px', '3.16145'],
                        rect.style.strokeWidth);
        top.assertEqualsAny('rect3926.style[strokeWidth] == 3.16145396 '
                        + 'or 3.16145396 or 3.16145px or 3.16145396 or 3.16px or 3.16145',
                        [3.16145396, '3.16145396', '3.16145px', 3.16145396, '3.16px', '3.16145'],
                        rect.style['strokeWidth']);
        top.assertEqualsAny('rect3926.style.strokeLinejoin == miter',
                        ['miter'],
                        rect.style.strokeLinejoin);
        top.assertEqualsAny('rect3926.style.strokeDasharray == none',
                        ['none'],
                        rect.style.strokeDasharray);
        top.assertEqualsAny('rect3926.style.strokeOpacity == 1',
                        [1],
                        rect.style.strokeOpacity);
        top.assertEqualsAny('rect3926.style.display == inline',
                        ['inline'],
                        rect.style.display);   
        // do a style[] type access
        top.assertEqualsAny('rect3926.style[strokeWidth] == 3.16145396 '
                        + 'or 3.16145396 or 3.16145px or 3.16px or 3.16145',
                        [3.16145396, '3.16145396', '3.16145px', '3.16px', '3.16145'],
                        rect.style['strokeWidth']);
      }
      // change a CSS value that is also used by HTML and make sure it changes
      rect.style.display = 'block';
      top.assertEqualsAny('rect3926.style.display after changing == block',
                      ['block'],
                      rect.style.display);
      // restore value for later tests
      rect.style.display = 'inline';         
      // change a visible SVG style
      group = document.getElementById('layer1');
      group.style.opacity = 0.4;
      top.assertEqualsAny('layer1.style.opacity after changing == 0.4',
                      [0.4],
                      group.style.opacity);
    }
    
    function testSuspendRedraw() {
      // test the suspendRedraw/unsuspendRedraw functionality
      
      top.console.log('Inside SVG OBJECT: Testing suspend/unsuspendRedraw...');
      
      // create a bunch of elements and add them to the DOM
      svg = document.rootElement;
      top.assertExists('document.rootElement should exist', svg);
      top.assertEquals('document.rootElement.nodeName == svg', 'svg',
                       document.rootElement.nodeName);
      // create pop1 and pop2 container elements _before_ suspendRedraw
      group = document.createElementNS(svgns, 'g');
      group.id = 'object_pop1';
      group.setAttribute('transform', 'scale(0.25) translate(1490, 1330) rotate(90)');
      svg.appendChild(group);
      group = document.createElementNS(svgns, 'g');
      group.id = 'object_pop2';
      group.setAttribute('transform', 'scale(0.25) translate(1400, 1780) rotate(270)');
      svg.appendChild(group);
      // now suspend things
      suspendID1 = svg.suspendRedraw(5000);
      top.assertExists('suspendID1 should exist', suspendID1);
      for (i = 0; i < 100; i++) {
        rect = document.createElementNS(svgns, 'rect');
        rect.setAttribute('x', 445 - (5 * i));
        rect.setAttribute('y', 0);
        rect.setAttribute('id', 'object_pop1_' + i);
        rect.setAttribute('width', 5);
        rect.setAttribute('height', 0);
        rect.addEventListener('mouseover', function(evt) { 
          top.console.log('mouseover for object_pop1: ' + evt.target.id);
          top.assertExists('evt.target.id should exist', evt.target.id);
        }, false);
        rect.addEventListener('mouseout', function(evt) { 
          top.console.log('mouseout for object_pop1: ' + evt.target.id);
          top.assertExists('evt.target.id should exist', evt.target.id);
        }, false);
        document.getElementById('object_pop1').appendChild(rect);    
        rect = document.createElementNS(svgns, 'rect');
        rect.setAttributeNS(null, 'x', 0 + (5 * i));
        rect.setAttributeNS(null, 'y', 120);
        rect.setAttributeNS(null, 'id','object_pop2_' + i);
        rect.setAttributeNS(null, 'width', 5);
        rect.setAttributeNS(null, 'height', 0);
        rect.addEventListener('mouseover', function(evt) { 
          top.console.log('mouseover for object_pop2: ' + evt.target.id);
          top.assertExists('evt.target.id should exist', evt.target.id);
        }, false);
        rect.addEventListener('mouseout', function(evt) { 
          top.console.log('mouseout for object_pop2: ' + evt.target.id);
          top.assertExists('evt.target.id should exist', evt.target.id);
        }, false);
        document.getElementById('object_pop2').appendChild(rect);
      }
      // before unsuspending, loop around trying to set the fill and height
      // and make sure the DOM is still around
      for (i = 0; i < 100; i++)	{
        rect1 = document.getElementById('object_pop1_' + i);
        top.assertExists('object_pop1_' + i + ' should exist', rect1);
        rect2 = document.getElementById('object_pop2_' + i);
        top.assertExists('object_pop2_' + i + ' should exist', rect2);
        // make sure the earlier set values are correct
        top.assertEquals('object_pop1_' + i + '.getAttribute(y) == 0', 0,
                     rect1.getAttribute('y'));
        top.assertEquals('object_pop1_' + i + '.getAttribute(width) == 5', 5,
                     rect1.getAttribute('width', 5));
        // set the new values
        rect1.setAttribute('height', (Math.random() * 700) / 2.8);
        rect2.setAttribute('height', (Math.random() * 700) / 2.8);
        rect1.setAttributeNS(null, 'fill', '#333366');
        rect2.style.fill = '#660066';
        // make sure they stick
        top.assertEqualsAny('object_pop1_' + i + '.getAttribute(fill) == #333366',
                           ['#333366'], rect1.getAttribute('fill'));
        top.assertEqualsAny('object_pop1_' + i + '.getAttribute(fill) == #333366',
                           ['#333366'], rect1.getAttribute('fill'));
        top.assertEqualsAny('object_pop2_' + i + '.style.fill == #660066 or '
                           + 'rgb(102, 0, 102)',
                           ['#660066', 'rgb(102, 0, 102)'], rect2.style.fill);
      }
      // now unsuspend things
      svg.unsuspendRedraw(suspendID1);
      // make sure values are correct post-suspend
      for (i = 0; i < 100; i++)	{
        rect1 = document.getElementById('object_pop1_' + i);
        top.assertExists('post suspend: object_pop1_' + i + ' should exist', 
                         rect1);
        rect2 = document.getElementById('object_pop2_' + i);
        top.assertExists('post suspend: object_pop2_' + i + ' should exist', 
                         rect2);
        // make sure the earlier set values are correct
        top.assertEquals('post suspend: object_pop1_' + i 
                         + '.getAttribute(y) == 0', 0,
                         rect1.getAttribute('y'));
        top.assertEquals('post suspend: object_pop1_' + i 
                         + '.getAttribute(width) == 5', 
                         5, rect1.getAttribute('width', 5));
        // make sure they stick
        top.assertEqualsAny('post suspend: object_pop1_' + i 
                        + '.getAttribute(fill) == #333366',
                        ['#333366'], rect1.getAttribute('fill'));
        top.assertEqualsAny('post suspend: object_pop2_' + i 
                        + '.style.fill == #660066 or rgb(102, 0, 102)',
                        ['#660066', 'rgb(102, 0, 102)'], rect2.style.fill);
      }
      // set a value post suspend to make sure it registers
      rect1 = document.getElementById('object_pop1_50');
      rect1.style.fill = 'yellow';
      rect1.setAttribute('width', 25);
      rect1.setAttribute('height', 200);
      top.console.log(
                    'INSIDE OBJECT: SECOND IMAGE: There should be two small '
                  + 'groups of multiple horizontal lines of varying lengths '
                  + 'near the lower-right, one violet and the other navy blue. '
                  + 'There should be a thicker yellow line that was changed '
                  + 'post-suspend. Also run your mouse over both sets of lines '
                  + 'and make sure that mouse over and out events fire -- you '
                  + 'should see console.log messages print');
    }
    
    function testDocumentFragment() {
      // test the createDocumentFragment() API
      
      top.console.log('Inside SVG OBJECT: Testing DocumentFragment...');
    
      // test adding one element with lots of children (plus some DOM text nodes)
      // using DocumentFragment; also test using DOM accessors (childNodes, 
      // firstChild, etc.) on DocumentFragment
      frag = document.createDocumentFragment(true);
      svg = document.rootElement;
      group2 = document.createElementNS(svgns, 'g');
      group2.setAttribute('transform', 'translate(30, -15)');
      nodes = [];
      for (var i = 1; i <= 4; i++) {
        // have a circle with a small text value on it, all together in a group
        group = document.createElementNS(svgns, 'g');
        group.setAttribute('transform', 'scale(0.75) '
                           + 'translate(440, ' + (65 + (i * 50)) + ')');
        circle = document.createElementNS(svgns, 'circle');
        circle.setAttribute('r', 20);
        circle.setAttribute('fill', 'yellow');
        group.appendChild(circle);
        svgText = document.createElementNS(svgns, 'text');
        svgText.appendChild(document.createTextNode(i, true));
        svgText.style.fontSize = '30px';
        svgText.setAttribute('x', -7);
        svgText.setAttribute('y', 10);
        svgText.style.fill = 'black';
        group.appendChild(svgText);
        group2.appendChild(group);
        nodes.push(group);
      }
      frag.appendChild(group2);
      // check DOM values before appending to a real DOM
      top.assertEquals('frag.childNodes.length == 1', 1, frag.childNodes.length);
      top.assertEquals('frag.childNodes[0] == group2', group2, 
                       frag.childNodes[0]);
      top.assertEquals('frag.firstChild == group2', group2, frag.firstChild);
      top.assertEquals('frag.lastChild == group2', group2, frag.lastChild);
      top.assertEquals('group2.parentNode == frag', frag, group2.parentNode);
      top.assertEquals('group.parentNode == group2', group2, group.parentNode);
      top.assertEquals('group2.childNodes[0] == group', nodes[0], 
                       group2.childNodes[0]);
      top.assertEquals('group2.childNodes.length == 4', 4, 
                       group2.childNodes.length);
      top.assertEquals(
                   'frag.firstChild.firstChild.childNodes[0].nodeName == circle', 
                   'circle',
                   frag.firstChild.firstChild.childNodes[0].nodeName);
      top.assertEquals(
                    'frag.firstChild.firstChild.childNodes[1].firstChild.nodeValue '
                    + '== 1', '1',
                    frag.firstChild.firstChild.childNodes[1].firstChild.nodeValue);
      // now append to a real DOM and recheck all DOM values
      svg.appendChild(frag);
      top.assertEquals('svg.lastChild == group2', group2, svg.lastChild);
      top.assertEquals('svg.lastChild.nodeName == g', 'g', 
                       svg.lastChild.nodeName);
      top.assertEquals('svg.lastChild.parentNode == svg', svg, 
                   svg.lastChild.parentNode);
      top.assertEquals('group2.parentNode == svg', svg, group2.parentNode);
      top.assertEquals('group2.ownerDocument == doc' + 'ument', document, 
                       group2.ownerDocument);
      top.assertEquals('group.ownerDocument == doc' + 'ument',
                       document, group.ownerDocument);
      top.assertEquals('svg.lastChild.childNodes.length == 4', 4,
                       svg.lastChild.childNodes.length);
      top.assertEquals('svg.lastChild.childNodes[0].nodeName == g', 'g',
                       svg.lastChild.childNodes[0].nodeName);
      top.assertEquals('svg.lastChild.firstChild.childNodes.length == 2', 2,
                       svg.lastChild.firstChild.childNodes.length);
      top.assertEquals('svg.lastChild.firstChild.childNodes[0].nodeName == circle', 
                       'circle', 
                       svg.lastChild.firstChild.childNodes[0].nodeName);
      top.assertEquals(
                  'svg.lastChild.childNodes[2].childNodes[1].firstChild.nodeValue == 3',
                   3, 
                   svg.lastChild.childNodes[2].childNodes[1].firstChild.nodeValue);
      top.assertEquals('svg.lastChild.childNodes[2].childNodes[1].firstChild '
                       + '== nodes[2].lastChild.firstChild',
                       nodes[2].lastChild.firstChild, 
                       svg.lastChild.childNodes[2].childNodes[1].firstChild);
      top.assertEquals('svg.childNodes[svg.childNodes.length - 1].firstChild.nextSibling '
                    + '== nodes[1]', nodes[1],
                    svg.childNodes[svg.childNodes.length - 1].firstChild.nextSibling);
      // make sure the DocumentFragment is cleared
      top.assertNull('after append, frag.firstChild == null', frag.firstChild);
      top.assertNull('after append, frag.lastChild == null', frag.lastChild);
      top.assertEquals('after append, frag.childNodes.length == 0', 0, 
                   frag.childNodes.length);
      top.console.log(
                  'INSIDE OBJECT: 2ND IMAGE: You should see four yellow '
                  + 'circles vertically stacked near the upper right of the '
                  + 'image with the numbers 1 to 4 inside of them in black');
    }
    
    function testCloneNode() {
      // test the cloneNode() method
      
      top.console.log('Inside SVG OBJECT: Testing cloneNode...');
    
      // do a deep clone node on an element already in the document
      group = document.getElementById('object_pop2');
      // add some custom attributes to make sure they come over
      group.setAttribute('some-custom-attribute', 'foobar');
      group.childNodes[0].setAttribute('some-custom-attribute2', 'foobar2');
      group.setAttributeNS('http://example.com', 'example:my-attr', 'my-value');
      // now do the deep clone
      clone = group.cloneNode(true);
      // make sure the new clone is clone-er-riffic
      top.assertEquals('clone.nodeName == g', 'g', clone.nodeName);
      top.assertTrue('clone != group', (clone != group));
      top.assertTrue('clone !== group', (clone !== group));
      top.assertEquals('clone.childNodes.length == group.childNodes.length',
                       group.childNodes.length, clone.childNodes.length);
      top.assertEquals('clone.childNodes[0].nodeName == rect', 'rect',
                       clone.childNodes[0].nodeName);
      top.assertEquals('clone.childNodes[0].id == object_pop2_0', 
                       'object_pop2_0', clone.childNodes[0].id);
      // change the IDs of the clone
      clone.id = 'object_pop2_clone';
      top.assertEquals('clone.getAttribute(id) == object_pop2_clone', 
                       'object_pop2_clone', clone.getAttribute('id'));
      for (var i = 0; i < clone.childNodes.length; i++) {
        clone.childNodes[i].id = clone.childNodes[i].getAttribute('id') + '_clone';
      }
      // make sure our custom attributes came over and that changing the original
      // ones doesn't mess things up
      group.setAttribute('some-custom-attribute', 'something-else');
      group.childNodes[0].setAttribute('some-custom-attribute2', 'foobar2');
      group.setAttributeNS('http://example.com', 'example:my-attr', 
                           'my-value-changed');
      top.assertEquals('clone.getAttribute(some-custom-attribute) == foobar',
                       'foobar', clone.getAttribute('some-custom-attribute'));
      top.assertEquals('clone.childNodes[0].'
                       + 'getAttribute(some-custom-attribute2) == '
                       + 'foobar2', 'foobar2', 
                       clone.childNodes[0].getAttribute('some-custom-attribute2'));
      top.assertEquals('clone.getAttributeNS(http://example.com, my-attr) == '
                       + 'my-value', 'my-value', 
                       clone.getAttributeNS('http://example.com', 'my-attr'));
      top.assertEquals('group.getAttribute(some-custom-attribute) == something-else',
                       'something-else', group.getAttribute('some-custom-attribute'));
      top.assertEquals('group.childNodes[0].getAttribute(some-custom-attribute2) '
                       + '== foobar2', 'foobar2', 
                      group.childNodes[0].getAttribute('some-custom-attribute2'));
      top.assertEquals('group.getAttributeNS(http://example.com, my-attr) == '
                       + 'my-value-changed', 'my-value-changed',
                       group.getAttributeNS('http://example.com', 'my-attr'));
      // make sure the guids aren't the same
      if (top.svgweb.getHandlerType() == 'flash') {
        temp = (temp._fakeNode) ? temp._fakeNode : temp;
        top.assertExists('clone.__guid should exist', 
                     temp._nodeXML.getAttribute('__guid'));
        top.assertTrue('group.__guid != clone.__guid',
                   (group.getAttribute('__guid') != temp._nodeXML.getAttribute('__guid')));
      }
      // now attach to the document, but move it over to the right
      clone.setAttribute('transform', 
                         'scale(0.25, 0.25) rotate(270) translate(-350, 1200)');
      group.parentNode.appendChild(clone);
      // make sure old and new elements can still be fetched
      top.assertEquals('group == getElementById(object_pop2)',
                   group, document.getElementById('object_pop2'));
      top.assertEquals('clone == getElementById(object_pop2_clone)',
                   clone, document.getElementById('object_pop2_clone'));
      top.assertEquals('group.childNodes[1] == getElementById(object_pop2_1)', 
                   group.childNodes[1], 
                   document.getElementById('object_pop2_1'));
      top.assertEquals('clone.childNodes[1] == getElementById(object_pop2_1_clone)', 
                   clone.childNodes[1], 
                   document.getElementById('object_pop2_1_clone')); 
      // NOTE: Both Firefox and Safari/Native _don't_ copy over event listeners
      // for clones, so we mimic this behavior                        
      top.console.log('SECOND IMAGE: There should be a series of purple lines '
                      + 'stacked vertically on the right side of the image');
      
      // repeat, but with a shallow clone
      group = document.getElementById('object_pop2');
      clone = group.cloneNode(false);
      // check values
      top.assertEquals('clone.nodeName == g', 'g', clone.nodeName);
      top.assertEquals('clone.childNodes.length == 0', 0, 
                       clone.childNodes.length);
      top.assertEquals('clone.id == object_pop2', 'object_pop2', clone.id);
      
      // do a deep clone node on an element not yet in the document
      text = document.createElementNS(svgns, 'text');
      text.setAttribute('x', 30);
      text.setAttribute('y', 360);
      text.setAttribute('font-family', 'Verdana');
      text.setAttribute('font-size', '18');
      text.setAttribute('fill', 'yellow');
      textNode = document.createTextNode('Deleted then added again', true);
      text.appendChild(textNode);
      clone = text.cloneNode(true);
      // append to document
      svg = document.rootElement;
      svg.insertBefore(clone, svg.lastChild.previousSibling.previousSibling);
      // check clone values
      top.assertEquals('clone.childNodes.length == 1', 1, clone.childNodes.length);
      top.assertEquals('clone.childNodes[0].nodeValue == "Deleted then added again"',
                   'Deleted then added again', clone.childNodes[0].nodeValue);
      top.assertTrue('clone.childNodes[0] != textNode',
                 (clone.childNodes[0] != textNode));
      top.console.log('SECOND IMAGE: You should see the text '
                      + '"Deleted then added again" in yellow');
    }

    function testNestedSVGElements() {
      top.console.log('Inside SVG OBJECT: Testing nested SVG Elements...');
      var svg = document.getElementById('nestedSVG');
      top.assertExists('nestedSVG element should exist', svg);
      var rect = document.getElementById('nestedRect');
      top.assertExists('nestedRect element should exist', rect);
    }
  ]]></script>
  <g
     inkscape:label="bg"
     inkscape:groupmode="layer"
     id="layer1"
     style="opacity:1;display:inline">
    <rect
       y="-1.7111325"
       x="-2.2665024"
       height="455.04538"
       width="455.04538"
       id="rect3926"
       style="opacity:1;fill:#c1cfeb;fill-opacity:1;stroke:#555040;stroke-width:3.16145396;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       style="opacity:1;fill:#585a53;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
       d="M -20.133478,316.78351 C -2.5343923,300.86446 23.150308,304.80212 43.988839,310.96541 C 64.182313,311.03608 84.995525,308.01108 102.22691,296.84598 C 116.66515,291.19078 133.79301,284.32476 148.30745,293.77777 C 164.10698,306.69071 183.19684,310.30976 201.28953,299.86958 C 220.6633,293.25475 231.73414,283.23716 251.94853,283.33722 C 273.59866,283.44962 280.81344,306.25205 297.64771,310.93883 C 318.87056,316.8474 338.07631,304.09275 351.47223,307.28886 C 365.27894,310.58296 386.98702,326.3148 408.2949,324.48886 C 425.22232,319.70984 428.34402,315.64725 448.13463,315.6678 C 459.12426,315.44023 482.48913,306.95039 477.97163,325.59815 C 478.30341,380.34313 478.63519,424.53633 478.96697,479.2813 C 309.08287,477.17096 139.1988,475.06064 -30.685293,472.9503 C -27.16803,420.89469 -23.650742,368.83911 -20.133478,316.78351 z "
       id="path3913"
       sodipodi:nodetypes="cccccssscccccc" />
    <path
       style="opacity:1;fill:#2d2a22;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
       d="M -26.464558,347.38376 C -14.627076,332.27699 4.5990659,323.63037 22.927329,333.61598 C 44.15365,340.45766 63.494842,337.69222 86.75505,336.39138 C 107.11568,329.94649 124.3604,329.12923 146.77098,331.03707 C 166.6472,343.39756 188.9668,335.48212 207.4473,326.44924 C 225.58017,316.28316 246.4991,314.44583 266.87566,315.7283 C 289.93988,308.50139 313.42228,328.59545 335.64065,315.19111 C 354.73339,310.04349 372.71117,326.64853 377.66963,341.0526 C 385.06199,362.5271 412.31684,364.31988 423.70191,361.10106 C 446.96178,358.30871 459.72126,360.01151 479.39669,362.35115 C 484.82729,368.13087 486.6699,390.17234 487.51983,397.61438 C 486.07577,427.65047 484.63172,457.68659 483.18768,487.72271 C 312.24841,484.90891 141.30915,482.09511 -29.630097,479.2813 C -28.574926,435.31545 -27.51973,391.34962 -26.464558,347.38376 z "
       id="path2940"
       sodipodi:nodetypes="cccccccscccccc" />
    <path
       id="path3936"
       d="M -46.533786,262.52475 C -46.533786,262.16533 -46.533786,261.80586 -46.533786,261.44645 C -46.533786,243.62866 16.554981,229.01164 23.485398,228.01906 C 43.635049,225.13323 96.995265,231.69508 116.84434,238.80207 C 147.34473,249.72283 184.4183,244.30422 215.02288,238.8252 C 252.24764,232.16103 286.868,208.98234 323.89032,200.14508 C 346.16295,194.82854 375.76711,197.75111 397.37169,206.59173 C 409.70541,211.63876 446.75054,212.33172 462.87351,215.21819 C 472.53968,216.9487 480.83934,220.60965 490.73062,220.60965 C 497.75494,220.60965 499.74082,201.30564 501.27114,194.73044 C 508.32008,164.44377 505.67234,129.04022 508.80009,97.683202 C 511.01863,75.441418 506.5414,52.97892 506.5414,30.828408 C 506.5414,17.668612 505.29744,4.6674469 503.52982,-7.9904811 C 500.04884,-32.918035 486.04048,-30.634835 470.40248,-30.634835 C 429.12258,-30.634835 387.49351,-45.73107 346.17488,-45.73107 C 311.26695,-45.73107 276.46532,-46.809369 241.52253,-46.809369 C 213.1252,-46.809369 184.94239,-42.496173 156.44546,-42.496173 C 136.10784,-42.496173 109.82707,-44.135484 90.19075,-37.104653 C 69.826652,-29.813245 47.25022,-40.060831 26.947603,-32.791432 C 18.52442,-29.775503 8.4274651,-32.015368 -0.15658888,-29.556536 C -10.878005,-26.485473 -16.581633,-28.643702 -25.755006,-17.695196 C -36.996821,-4.2780101 -49.812115,7.9805779 -53.612111,29.750109 C -58.322411,56.734631 -59.45499,82.116074 -62.646843,109.54451 C -65.945261,137.88872 -65.356136,173.28344 -65.356136,202.1398 C -65.356136,213.09986 -65.340402,225.97518 -63.850359,236.6455 C -63.01255,242.64504 -57.628423,243.79681 -54.062716,246.35022 C -49.532279,249.59448 -48.420809,254.41694 -46.533786,262.52475 z "
       style="opacity:1;fill:#859ec4;fill-opacity:1;stroke:none;stroke-width:7.30000019;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1;display:inline"
       sodipodi:nodetypes="csssssssssssssssssssssssssc" />
    <path
       style="opacity:1;fill:#5b7ab0;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
       d="M -22.243797,61.429779 C -22.695789,62.166617 -36.245829,60.213957 -22.869133,58.818685 C 1.1579674,54.967305 34.496962,63.55683 50.014109,51.126405 C 68.109959,49.820165 80.359908,47.080328 98.12451,49.543878 C 117.86847,54.946658 141.02981,65.795844 161.87254,61.398285 C 187.56566,58.327809 208.59184,51.154834 234.39165,49.670993 C 258.74315,48.603101 282.02303,56.660312 304.14915,65.857591 C 325.42686,71.978044 348.09529,72.210095 369.98921,70.311593 C 393.61532,65.135927 417.03605,65.110344 439.21565,55.158426 C 451.91506,53.109488 477.52727,55.130995 480.38673,41.458361 C 477.09965,21.735968 474.86776,-1.1519631 471.5807,-20.874355 C 309.08287,-20.522606 146.58508,-20.170883 -15.912742,-19.819158 C -19.78173,7.2638279 -18.374809,34.346816 -22.243797,61.429779 z "
       id="path3919"
       sodipodi:nodetypes="ccccccccccccc" />
    <path
       style="opacity:1;fill:#262a2f;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline"
       d="M -10.636859,376.92878 C -7.0593563,374.73445 1.7832303,369.54251 9.4115773,369.54251 C 13.670202,369.54251 19.678399,380.86451 22.07376,383.25986 C 26.425065,387.61117 28.777696,389.24978 33.680749,391.70131 C 39.934858,394.82835 47.309704,394.31717 53.72916,395.92203 C 59.174594,397.2834 63.798318,396.59276 69.556883,398.03239 C 74.433963,399.25166 81.349447,398.03239 86.439779,398.03239 C 91.316758,398.03239 98.326527,389.38112 102.26747,386.42539 C 109.98045,380.64067 123.31772,379.03913 132.86772,379.03913 C 140.95745,379.03913 149.04715,379.03913 157.13686,379.03913 C 167.79771,379.03913 178.17812,382.40325 187.73711,384.31503 C 196.19586,386.00681 202.81106,388.61111 210.9511,390.64611 C 220.74338,393.0942 231.15715,392.5321 240.49616,394.86685 C 253.14942,398.03018 266.43514,393.81168 279.53782,393.81168 C 293.23069,393.81168 309.11556,386.31008 322.80024,382.2047 C 325.90624,381.27289 329.13132,380.79776 332.29685,380.09433 C 338.63388,378.68609 347.25132,378.20227 352.34528,376.92878 C 357.42083,375.6599 364.39723,378.07294 369.22818,379.03913 C 374.81566,380.15663 379.63649,384.01538 385.0559,385.37023 C 391.91352,387.08462 400.57169,389.96259 406.15951,392.75648 C 411.55301,395.45323 414.41596,395.30194 419.87686,398.03239 C 423.33372,399.76083 431.79936,399.43023 434.64939,400.14276 C 439.77359,401.42381 446.44714,400.19045 450.47708,401.19793 C 455.27564,402.39758 459.9448,404.87659 463.13928,406.47384 C 467.43851,408.62346 471.04077,410.15462 473.69107,412.80492 C 476.7497,415.86355 478.45645,419.68067 481.07733,422.30154 C 484.28491,425.50912 476.4649,432.18989 475.80144,432.85336 C 472.77174,435.88304 463.16928,436.22393 458.91853,437.07407 C 451.74983,438.50781 444.61833,436.01889 437.81492,436.01889 C 430.50735,436.01889 422.76883,433.22071 415.65612,431.79818 C 408.00405,430.26775 400.73774,429.68781 392.44215,429.68781 C 384.35243,429.68781 376.26273,429.68781 368.17301,429.68781 C 359.02812,429.68781 349.88321,429.68781 340.73829,429.68781 C 334.25245,429.68781 326.11039,432.6134 319.63469,433.90852 C 311.86049,435.46338 303.55772,437.07407 295.36554,437.07407 C 287.74566,437.07407 280.13767,439.18444 272.15156,439.18444 C 264.01474,439.18444 257.84199,437.07407 249.99276,437.07407 C 243.66463,437.07407 235.91176,434.04682 229.94434,432.85336 C 222.18927,431.30234 211.30085,429.68781 202.50964,429.68781 C 191.60611,429.68781 180.70256,429.68781 169.79902,429.68781 C 160.30241,429.68781 150.80578,429.68781 141.30917,429.68781 C 128.70357,429.68781 119.16557,440.02555 107.54339,442.34997 C 101.16508,443.62565 98.680858,446.14838 92.77086,447.62588 C 88.136095,448.78458 83.682425,448.68106 77.998331,448.68106 C 70.699287,448.68106 64.850815,446.57071 57.949895,446.57071 C 52.3727,446.57071 50.132542,444.61637 45.287736,443.40517 C 41.75053,442.52086 36.402323,439.49005 33.680749,438.12926 C 28.971834,435.7748 24.694144,435.09122 19.963392,433.90852 C 16.191097,432.96546 12.402337,430.12801 9.4115773,428.63264 C 4.2174047,426.03555 4.3449825,424.41191 -3.2505831,424.41191 C -10.339731,424.41191 -12.49757,424.91117 -14.857571,420.1912 C -17.005706,415.89493 -17.964016,411.98618 -19.078306,407.52901 C -20.367376,402.37273 -17.817348,396.15415 -16.967939,392.75648 C -15.0734,385.17841 -17.325743,383.61767 -10.636859,376.92878 z "
       id="path3924" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer5"
     inkscape:label="sketch"
     style="opacity:0.39534882;display:none"
     sodipodi:insensitive="true">
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 276.7942,130.31422 C 277.86932,148.45158 284.99929,164.68195 290.10668,181.7066 C 292.40065,189.35315 295.52304,197.25984 298.46568,204.61645 C 300.33395,209.28711 300.74063,213.93183 301.56161,218.85771 C 302.07568,221.9421 302.49039,224.68887 302.49039,227.83589"
       id="path3172" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 284.22442,51.987292 C 284.22442,67.570248 287.42847,83.958928 289.79709,99.354958 C 293.0198,120.30254 292.78183,141.6656 295.98894,162.51185 C 297.81317,174.36932 298.90691,186.69907 301.25202,198.4246 C 301.51501,199.73955 301.56742,201.23417 301.8712,202.4493"
       id="path3174" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 292.58342,106.47559 C 295.1032,119.07445 297.60046,132.29889 303.41917,143.9363 C 307.326,151.74997 309.07138,161.14286 312.70694,169.32289 C 316.61553,178.1172 322.9235,191.35853 322.9235,200.90134 C 322.9235,203.61366 324.5722,206.66808 325.09065,209.26034"
       id="path3176" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 302.79998,57.250368 C 302.79998,63.213378 310.81059,89.409048 313.32613,95.949438 C 319.66421,112.42844 322.10551,131.01158 326.9482,147.961 C 329.21404,155.89142 335.47398,162.27412 336.85517,170.56126 C 337.26672,173.03057 339.14307,175.18977 339.6415,177.68189 C 341.24651,185.70692 340.57028,168.91866 340.57028,166.84615 C 340.57028,143.64995 341.49905,120.4231 341.49905,97.187818 C 341.49905,81.449298 342.42783,65.594758 342.42783,50.129736 C 342.42783,47.61216 341.80865,44.983054 341.80865,42.389921"
       id="path3178" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 362.55135,51.987292 C 362.55135,48.10125 360.3842,59.556178 360.3842,63.442218 C 360.3842,69.867148 356.84572,87.636098 355.43072,94.711068 C 354.5658,99.035688 351.66941,111.56767 355.43072,100.28374 C 359.96118,86.692368 363.87022,72.603058 367.81443,58.798328 C 370.12772,50.701799 374.96596,43.690284 379.88854,37.126846"
       id="path3180" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 382.67487,50.748921 C 383.25933,48.703306 381.52715,54.969908 380.19813,56.631178 C 379.54682,57.445328 371.0878,81.662888 369.0528,85.732888 C 365.97276,91.892958 365.40834,98.453148 363.78972,104.92763 C 363.03032,107.96525 363.61525,111.46842 362.24176,114.21541 C 361.08015,116.53863 360.71637,119.69779 360.07461,122.26481 C 359.37815,125.05066 359.14583,128.3771 359.14583,131.243 C 359.14583,133.79399 361.00339,136.4907 361.00339,139.29241 C 361.00339,141.71256 365.45388,131.4364 367.50483,129.38544 C 373.05491,123.83537 375.9068,116.01567 380.50772,109.88111 C 384.22483,104.92497 387.27123,98.259188 389.17632,92.543928 C 392.63478,82.168538 393.26525,70.177458 395.05858,59.417518 C 395.56418,56.383908 396.52502,53.242139 397.22572,50.439328 C 397.28169,50.215462 397.43212,50.026538 397.53532,49.820143"
       id="path3182" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 404.03676,50.129736 C 404.46299,48.424816 403.72717,53.635418 403.72717,55.392808 C 403.72717,63.842648 400.75516,76.816458 396.91613,84.494518 C 393.62446,91.077858 391.29458,100.78888 389.48591,108.02355 C 388.29815,112.77458 386.7116,117.28328 384.84202,121.64563 C 383.31755,125.20273 379.88832,127.99283 378.34058,131.86219 C 377.38732,134.24532 376.35071,136.4611 375.24465,138.67322 C 374.02627,141.10999 372.4604,143.30876 371.83913,145.79385 C 371.35805,147.71817 369.47149,148.98116 368.7432,150.43774 C 367.99918,151.92579 367.02362,152.6722 366.57606,154.46245 C 366.08534,156.42532 366.21299,157.04613 365.33769,158.79674 C 364.51043,160.45124 363.36055,161.44056 361.93217,162.51185 C 360.73539,163.40943 360.68221,165.66572 360.3842,167.15574 C 359.73048,170.42436 359.45543,174.04454 359.45543,177.3723 C 359.45543,180.27972 358.52665,183.00878 358.52665,186.04089 C 358.52665,188.45641 357.74004,191.04488 357.28828,192.85193 C 356.90204,194.39689 356.66909,195.78996 356.66909,197.49582 C 356.66909,199.65442 356.97869,201.46694 356.97869,203.68767 C 356.97869,205.52576 357.28828,207.05131 357.28828,208.95075 C 357.28828,209.36354 357.28828,209.77633 357.28828,210.18912"
       id="path3184" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 370.91035,205.23563 C 370.91035,208.49903 374.86392,200.01964 376.48302,197.18623 C 383.20517,185.42246 391.6309,175.89082 395.98735,162.82145 C 400.16639,150.28434 404.87106,136.95236 406.5135,123.81278 C 408.4392,108.40719 413.41986,93.456688 419.51639,79.231438 C 421.71039,74.112108 424.84949,69.494028 427.25621,64.680588 C 428.50572,62.181568 430.30635,60.048148 432.82887,59.417518 C 434.12493,59.093498 437.89645,55.278718 439.02073,54.154438 C 440.32192,52.853246 441.22317,52.261589 442.73584,50.748921 C 443.23558,50.249179 443.90792,50.008082 444.2838,49.820143"
       id="path3186" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 452.95239,51.677699 C 454.75466,49.875431 450.34151,56.058418 448.92769,58.179148 C 443.06488,66.973368 436.45154,74.881018 430.66173,83.565738 C 427.3625,88.514578 425.26197,95.257818 423.85069,100.90292 C 423.69508,101.52537 431.58781,94.250718 436.23439,87.280848 C 440.08979,81.497758 443.09321,74.230188 447.99891,69.324478 C 448.4117,68.911688 448.82449,68.498898 449.23728,68.086108 C 451.19811,66.125278 452.04968,63.893578 454.80995,62.513438 C 455.30169,62.267568 455.91889,61.404508 456.35791,60.965478"
       id="path3188" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 457.59628,85.113698 C 460.01208,83.905808 453.62388,88.776518 451.71402,90.686368 C 445.04223,97.358168 436.776,109.49465 433.75765,118.5497 C 430.05998,129.64272 427.26761,140.81187 422.92191,151.67611 C 421.11995,156.18102 417.84572,166.6536 417.03965,171.49004 C 416.57958,174.25049 413.99332,176.86431 413.32454,179.53945 C 412.64531,182.25638 412.43219,184.9664 411.77658,187.58886 C 411.01412,190.63869 408.5427,194.05662 407.13269,196.87663 C 405.26877,200.60448 402.43328,203.17953 400.63124,206.7836 C 400.03455,207.97698 399.36219,208.39292 398.77369,209.56993"
       id="path3190" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 355.12113,127.2183 C 356.68404,127.2183 360.34052,127.2183 362.86094,127.2183 C 365.39968,127.2183 367.17361,126.28952 369.67198,126.28952 C 371.63274,126.28952 373.59349,126.28952 375.55424,126.28952 C 377.77484,126.28952 380.57925,127.00398 382.67487,127.52789 C 384.57822,128.00372 386.3026,128.28002 388.24754,128.76626 C 390.5749,129.3481 393.13855,129.38544 395.67776,129.38544 C 399.06635,129.38544 402.49157,128.76626 405.89432,128.76626 C 408.72006,128.76626 409.80668,129.35736 412.39576,130.00463 C 414.25128,130.46851 417.83899,132.35193 419.2068,133.71974 C 420.5459,135.05884 423.62597,136.68084 425.39865,137.74444 C 427.44429,138.97183 429.85855,140.98933 432.20969,141.45956 C 433.91162,141.79994 435.23786,143.86855 436.54399,145.17467 C 437.99549,146.62617 440.94758,148.39997 442.42625,149.50896 C 443.86681,150.58939 445.61141,150.52697 446.76054,151.67611 C 448.34381,153.25938 450.13409,153.81129 451.71402,155.39122 C 453.47252,157.14972 454.58963,159.40549 456.66751,160.96389 C 458.98417,162.70139 460.46773,163.78889 461.93058,166.22696 C 462.2629,166.78083 462.8667,167.47268 463.16895,167.77493"
       id="path3192" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 363.78972,153.22408 C 364.68138,152.33239 370.32926,151.04169 373.38709,149.81856 C 377.08366,148.33993 382.38605,147.33662 386.08039,146.41304 C 388.59454,145.7845 390.56584,145.44647 392.89143,144.86507 C 394.72009,144.40791 396.59798,144.25445 397.84491,143.00752 C 397.98858,142.86385 399.60958,142.12518 399.70247,142.07874"
       id="path3194" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:2.9000001;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 353.86435,142.15991 C 350.94184,142.15991 350.04862,137.72499 347.98209,135.65846 C 345.28709,132.96346 343.21828,130.27546 340.55187,127.60905 C 340.13908,127.19626 339.72629,126.78347 339.3135,126.37068 C 336.4673,123.52448 333.19941,120.41124 329.71613,118.32128 C 325.79641,115.96944 321.7258,113.77475 317.95161,111.51024 C 315.1531,109.83113 311.61918,109.25874 308.66383,107.48553 C 306.62618,106.26294 304.82242,105.37845 303.09117,104.08002 C 301.49863,102.88562 300.01811,102.23961 298.75687,101.29368 C 297.11018,100.05866 295.60646,99.408885 293.80339,98.507348 C 292.21795,97.714628 290.94544,97.096277 289.1595,96.649793 C 286.40194,95.960404 284.41077,94.430223 282.03887,93.244274 C 281.85426,93.151971 281.62608,93.244274 281.41968,93.244274 C 280.68774,93.244274 278.68267,91.411377 278.01416,91.077126"
       id="path4358" />
    <path
       id="path2591"
       d="M 493.79071,413.96979 C 494.86583,432.10715 501.9958,448.33752 507.10319,465.36217 C 509.39716,473.00872 512.51955,480.91541 515.46219,488.27202 C 517.33046,492.94268 517.73714,497.5874 518.55812,502.51328 C 519.07219,505.59767 519.4869,508.34444 519.4869,511.49146"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2593"
       d="M 501.22093,335.64287 C 501.22093,351.22582 504.42498,367.6145 506.7936,383.01053 C 510.01631,403.95811 509.77834,425.32117 512.98545,446.16742 C 514.80968,458.02489 515.90342,470.35464 518.24853,482.08017 C 518.51152,483.39512 518.56393,484.88974 518.86771,486.10487"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2595"
       d="M 509.57993,390.13116 C 512.09971,402.73002 514.59697,415.95446 520.41568,427.59187 C 524.32251,435.40554 526.06789,444.79843 529.70345,452.97846 C 533.61204,461.77277 539.92001,475.0141 539.92001,484.55691 C 539.92001,487.26923 541.56871,490.32365 542.08716,492.91591"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2597"
       d="M 519.79649,340.90594 C 519.79649,346.86895 527.8071,373.06462 530.32264,379.60501 C 536.66072,396.08401 539.10202,414.66715 543.94471,431.61657 C 546.21055,439.54699 552.47049,445.92969 553.85168,454.21683 C 554.26323,456.68614 556.13958,458.84534 556.63801,461.33746 C 558.24302,469.36249 557.56679,452.57423 557.56679,450.50172 C 557.56679,427.30552 558.49556,404.07867 558.49556,380.84339 C 558.49556,365.10487 559.42434,349.25033 559.42434,333.78531 C 559.42434,331.26773 558.80516,328.63863 558.80516,326.0455"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2599"
       d="M 579.54786,335.64287 C 579.54786,331.75682 577.38071,343.21175 577.38071,347.09779 C 577.38071,353.52272 573.84223,371.29167 572.42723,378.36664 C 571.56231,382.69126 568.66592,395.22324 572.42723,383.93931 C 576.95769,370.34794 580.86673,356.25863 584.81094,342.4539 C 587.12423,334.35737 591.96247,327.34586 596.88505,320.78242"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2601"
       d="M 599.67138,334.4045 C 600.25584,332.35888 598.52366,338.62548 597.19464,340.28675 C 596.54333,341.1009 588.08431,365.31846 586.04931,369.38846 C 582.96927,375.54853 582.40485,382.10872 580.78623,388.5832 C 580.02683,391.62082 580.61176,395.12399 579.23827,397.87098 C 578.07666,400.1942 577.71288,403.35336 577.07112,405.92038 C 576.37466,408.70623 576.14234,412.03267 576.14234,414.89857 C 576.14234,417.44956 577.9999,420.14627 577.9999,422.94798 C 577.9999,425.36813 582.45039,415.09197 584.50134,413.04101 C 590.05142,407.49094 592.90331,399.67124 597.50423,393.53668 C 601.22134,388.58054 604.26774,381.91476 606.17283,376.1995 C 609.63129,365.82411 610.26176,353.83303 612.05509,343.07309 C 612.56069,340.03948 613.52153,336.89771 614.22223,334.0949 C 614.2782,333.87104 614.42863,333.68211 614.53183,333.47572"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2603"
       d="M 621.03327,333.78531 C 621.4595,332.08039 620.72368,337.29099 620.72368,339.04838 C 620.72368,347.49822 617.75167,360.47203 613.91264,368.15009 C 610.62097,374.73343 608.29109,384.44445 606.48242,391.67912 C 605.29466,396.43015 603.70811,400.93885 601.83853,405.3012 C 600.31406,408.8583 596.88483,411.6484 595.33709,415.51776 C 594.38383,417.90089 593.34722,420.11667 592.24116,422.32879 C 591.02278,424.76556 589.45691,426.96433 588.83564,429.44942 C 588.35456,431.37374 586.468,432.63673 585.73971,434.09331 C 584.99569,435.58136 584.02013,436.32777 583.57257,438.11802 C 583.08185,440.08089 583.2095,440.7017 582.3342,442.45231 C 581.50694,444.10681 580.35706,445.09613 578.92868,446.16742 C 577.7319,447.065 577.67872,449.32129 577.38071,450.81131 C 576.72699,454.07993 576.45194,457.70011 576.45194,461.02787 C 576.45194,463.93529 575.52316,466.66435 575.52316,469.69646 C 575.52316,472.11198 574.73655,474.70045 574.28479,476.5075 C 573.89855,478.05246 573.6656,479.44553 573.6656,481.15139 C 573.6656,483.30999 573.9752,485.12251 573.9752,487.34324 C 573.9752,489.18133 574.28479,490.70688 574.28479,492.60632 C 574.28479,493.01911 574.28479,493.4319 574.28479,493.84469"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2605"
       d="M 587.90686,488.8912 C 587.90686,492.1546 591.86043,483.67521 593.47953,480.8418 C 600.20168,469.07803 608.62741,459.54639 612.98386,446.47702 C 617.1629,433.93991 621.86757,420.60793 623.51001,407.46835 C 625.43571,392.06276 630.41637,377.11226 636.5129,362.88701 C 638.7069,357.76768 641.846,353.1496 644.25272,348.33616 C 645.50223,345.83714 647.30286,343.70372 649.82538,343.07309 C 651.12144,342.74907 654.89296,338.93429 656.01724,337.81001 C 657.31843,336.50882 658.21968,335.91716 659.73235,334.4045 C 660.23209,333.90475 660.90443,333.66366 661.28031,333.47572"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2607"
       d="M 669.9489,335.33327 C 671.75117,333.53101 667.33802,339.71399 665.9242,341.83472 C 660.06139,350.62894 653.44805,358.53659 647.65824,367.22131 C 644.35901,372.17015 642.25848,378.91339 640.8472,384.55849 C 640.69159,385.18094 648.58432,377.90629 653.2309,370.93642 C 657.0863,365.15333 660.08972,357.88576 664.99542,352.98005 C 665.40821,352.56726 665.821,352.15447 666.23379,351.74168 C 668.19462,349.78085 669.04619,347.54915 671.80646,346.16901 C 672.2982,345.92314 672.9154,345.06008 673.35442,344.62105"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2609"
       d="M 674.59279,368.76927 C 677.00859,367.56138 670.62039,372.43209 668.71053,374.34194 C 662.03874,381.01374 653.77251,393.15022 650.75416,402.20527 C 647.05649,413.29829 644.26412,424.46744 639.91842,435.33168 C 638.11646,439.83659 634.84223,450.30917 634.03616,455.14561 C 633.57609,457.90606 630.98983,460.51988 630.32105,463.19502 C 629.64182,465.91195 629.4287,468.62197 628.77309,471.24443 C 628.01063,474.29426 625.53921,477.71219 624.1292,480.5322 C 622.26528,484.26005 619.42979,486.8351 617.62775,490.43917 C 617.03106,491.63255 616.3587,492.04849 615.7702,493.2255"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2611"
       d="M 572.11764,410.87387 C 573.68055,410.87387 577.33703,410.87387 579.85745,410.87387 C 582.39619,410.87387 584.17012,409.94509 586.66849,409.94509 C 588.62925,409.94509 590.59,409.94509 592.55075,409.94509 C 594.77135,409.94509 597.57576,410.65955 599.67138,411.18346 C 601.57473,411.65929 603.29911,411.93559 605.24405,412.42183 C 607.57141,413.00367 610.13506,413.04101 612.67427,413.04101 C 616.06286,413.04101 619.48808,412.42183 622.89083,412.42183 C 625.71657,412.42183 626.80319,413.01293 629.39227,413.6602 C 631.24779,414.12408 634.8355,416.0075 636.20331,417.37531 C 637.54241,418.71441 640.62248,420.33641 642.39516,421.40001 C 644.4408,422.6274 646.85506,424.6449 649.2062,425.11513 C 650.90813,425.45551 652.23437,427.52412 653.5405,428.83024 C 654.992,430.28174 657.94409,432.05554 659.42276,433.16453 C 660.86332,434.24496 662.60792,434.18254 663.75705,435.33168 C 665.34032,436.91495 667.1306,437.46686 668.71053,439.04679 C 670.46903,440.80529 671.58614,443.06106 673.66402,444.61946 C 675.98068,446.35696 677.46424,447.44446 678.92709,449.88253 C 679.25941,450.4364 679.86321,451.12825 680.16546,451.4305"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2613"
       d="M 580.78623,436.87965 C 581.67789,435.98796 587.32577,434.69726 590.3836,433.47413 C 594.08017,431.9955 599.38256,430.99219 603.0769,430.06861 C 605.59105,429.44007 607.56235,429.10204 609.88794,428.52064 C 611.7166,428.06348 613.59449,427.91002 614.84142,426.66309 C 614.98509,426.51942 616.60609,425.78075 616.69898,425.73431"
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path2615"
       d="M 570.86086,425.81548 C 567.93835,425.81548 567.04513,421.38056 564.9786,419.31403 C 562.2836,416.61903 560.21479,413.93103 557.54838,411.26462 C 557.13559,410.85183 556.7228,410.43904 556.31001,410.02625 C 553.46381,407.18005 550.19592,404.06681 546.71264,401.97685 C 542.79292,399.62501 538.72231,397.43032 534.94812,395.16581 C 532.14961,393.4867 528.61569,392.91431 525.66034,391.1411 C 523.62269,389.91851 521.81893,389.03402 520.08768,387.73559 C 518.49514,386.54119 517.01462,385.89518 515.75338,384.94925 C 514.10669,383.71423 512.60297,383.06446 510.7999,382.16292 C 509.21446,381.3702 507.94195,380.75185 506.15601,380.30537 C 503.39845,379.61598 501.40728,378.0858 499.03538,376.89985 C 498.85077,376.80755 498.62259,376.89985 498.41619,376.89985 C 497.68425,376.89985 495.67918,375.06695 495.01067,374.7327"
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:2.9000001;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 190.23361,411.13323 C 191.30873,429.27059 198.4387,445.50096 203.54609,462.52561 C 205.84006,470.17216 208.96245,478.07885 211.90509,485.43546 C 213.77336,490.10612 214.18004,494.75084 215.00102,499.67672 C 215.51509,502.76111 215.9298,505.50788 215.9298,508.6549"
       id="path5226" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 197.66383,332.80631 C 197.66383,348.38926 200.86788,364.77794 203.2365,380.17397 C 206.45921,401.12155 206.22124,422.48461 209.42835,443.33086 C 211.25258,455.18833 212.34632,467.51808 214.69143,479.24361 C 214.95442,480.55856 215.00683,482.05318 215.31061,483.26831"
       id="path5228" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 206.02283,387.2946 C 208.54261,399.89346 211.03987,413.1179 216.85858,424.75531 C 220.76541,432.56898 222.51079,441.96187 226.14635,450.1419 C 230.05494,458.93621 236.36291,472.17754 236.36291,481.72035 C 236.36291,484.43267 238.01161,487.48709 238.53006,490.07935"
       id="path5230" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 216.23939,338.06938 C 216.23939,344.03239 224.25,370.22806 226.76554,376.76845 C 233.10362,393.24745 235.54492,411.83059 240.38761,428.78001 C 242.65345,436.71043 248.91339,443.09313 250.29458,451.38027 C 250.70613,453.84958 252.58248,456.00878 253.08091,458.5009 C 254.68592,466.52593 254.00969,449.73767 254.00969,447.66516 C 254.00969,424.46896 254.93846,401.24211 254.93846,378.00683 C 254.93846,362.26831 255.86724,346.41377 255.86724,330.94875 C 255.86724,328.43117 255.24806,325.80207 255.24806,323.20894"
       id="path5232" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 275.99076,332.80631 C 275.99076,328.92026 273.82361,340.37519 273.82361,344.26123 C 273.82361,350.68616 270.28513,368.45511 268.87013,375.53008 C 268.00521,379.8547 265.10882,392.38668 268.87013,381.10275 C 273.40059,367.51138 277.30963,353.42207 281.25384,339.61734 C 283.56713,331.52081 288.40537,324.5093 293.32795,317.94586"
       id="path5234" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 296.11428,331.56794 C 296.69874,329.52232 294.96656,335.78892 293.63754,337.45019 C 292.98623,338.26434 284.52721,362.4819 282.49221,366.5519 C 279.41217,372.71197 278.84775,379.27216 277.22913,385.74664 C 276.46973,388.78426 277.05466,392.28743 275.68117,395.03442 C 274.51956,397.35764 274.15578,400.5168 273.51402,403.08382 C 272.81756,405.86967 272.58524,409.19611 272.58524,412.06201 C 272.58524,414.613 274.4428,417.30971 274.4428,420.11142 C 274.4428,422.53157 278.89329,412.25541 280.94424,410.20445 C 286.49432,404.65438 289.34621,396.83468 293.94713,390.70012 C 297.66424,385.74398 300.71064,379.0782 302.61573,373.36294 C 306.07419,362.98755 306.70466,350.99647 308.49799,340.23653 C 309.00359,337.20292 309.96443,334.06115 310.66513,331.25834 C 310.7211,331.03448 310.87153,330.84555 310.97473,330.63916"
       id="path5236" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 317.47617,330.94875 C 317.9024,329.24383 317.16658,334.45443 317.16658,336.21182 C 317.16658,344.66166 314.19457,357.63547 310.35554,365.31353 C 307.06387,371.89687 304.73399,381.60789 302.92532,388.84256 C 301.73756,393.59359 300.15101,398.10229 298.28143,402.46464 C 296.75696,406.02174 293.32773,408.81184 291.77999,412.6812 C 290.82673,415.06433 289.79012,417.28011 288.68406,419.49223 C 287.46568,421.929 285.89981,424.12777 285.27854,426.61286 C 284.79746,428.53718 282.9109,429.80017 282.18261,431.25675 C 281.43859,432.7448 280.46303,433.49121 280.01547,435.28146 C 279.52475,437.24433 279.6524,437.86514 278.7771,439.61575 C 277.94984,441.27025 276.79996,442.25957 275.37158,443.33086 C 274.1748,444.22844 274.12162,446.48473 273.82361,447.97475 C 273.16989,451.24337 272.89484,454.86355 272.89484,458.19131 C 272.89484,461.09873 271.96606,463.82779 271.96606,466.8599 C 271.96606,469.27542 271.17945,471.86389 270.72769,473.67094 C 270.34145,475.2159 270.1085,476.60897 270.1085,478.31483 C 270.1085,480.47343 270.4181,482.28595 270.4181,484.50668 C 270.4181,486.34477 270.72769,487.87032 270.72769,489.76976 C 270.72769,490.18255 270.72769,490.59534 270.72769,491.00813"
       id="path5238" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 284.34976,486.05464 C 284.34976,489.31804 288.30333,480.83865 289.92243,478.00524 C 296.64458,466.24147 305.07031,456.70983 309.42676,443.64046 C 313.6058,431.10335 318.31047,417.77137 319.95291,404.63179 C 321.87861,389.2262 326.85927,374.2757 332.9558,360.05045 C 335.1498,354.93112 338.2889,350.31304 340.69562,345.4996 C 341.94513,343.00058 343.74576,340.86716 346.26828,340.23653 C 347.56434,339.91251 351.33586,336.09773 352.46014,334.97345 C 353.76133,333.67226 354.66258,333.0806 356.17525,331.56794 C 356.67499,331.06819 357.34733,330.8271 357.72321,330.63916"
       id="path5240" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 366.3918,332.49671 C 368.19407,330.69445 363.78092,336.87743 362.3671,338.99816 C 356.50429,347.79238 349.89095,355.70003 344.10114,364.38475 C 340.80191,369.33359 338.70138,376.07683 337.2901,381.72193 C 337.13449,382.34438 345.02722,375.06973 349.6738,368.09986 C 353.5292,362.31677 356.53262,355.0492 361.43832,350.14349 C 361.85111,349.7307 362.2639,349.31791 362.67669,348.90512 C 364.63752,346.94429 365.48909,344.71259 368.24936,343.33245 C 368.7411,343.08658 369.3583,342.22352 369.79732,341.78449"
       id="path5242" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 371.03569,365.93271 C 373.45149,364.72482 367.06329,369.59553 365.15343,371.50538 C 358.48164,378.17718 350.21541,390.31366 347.19706,399.36871 C 343.49939,410.46173 340.70702,421.63088 336.36132,432.49512 C 334.55936,437.00003 331.28513,447.47261 330.47906,452.30905 C 330.01899,455.0695 327.43273,457.68332 326.76395,460.35846 C 326.08472,463.07539 325.8716,465.78541 325.21599,468.40787 C 324.45353,471.4577 321.98211,474.87563 320.5721,477.69564 C 318.70818,481.42349 315.87269,483.99854 314.07065,487.60261 C 313.47396,488.79599 312.8016,489.21193 312.2131,490.38894"
       id="path5244" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 268.56054,408.03731 C 270.12345,408.03731 273.77993,408.03731 276.30035,408.03731 C 278.83909,408.03731 280.61302,407.10853 283.11139,407.10853 C 285.07215,407.10853 287.0329,407.10853 288.99365,407.10853 C 291.21425,407.10853 294.01866,407.82299 296.11428,408.3469 C 298.01763,408.82273 299.74201,409.09903 301.68695,409.58527 C 304.01431,410.16711 306.57796,410.20445 309.11717,410.20445 C 312.50576,410.20445 315.93098,409.58527 319.33373,409.58527 C 322.15947,409.58527 323.24609,410.17637 325.83517,410.82364 C 327.69069,411.28752 331.2784,413.17094 332.64621,414.53875 C 333.98531,415.87785 337.06538,417.49985 338.83806,418.56345 C 340.8837,419.79084 343.29796,421.80834 345.6491,422.27857 C 347.35103,422.61895 348.67727,424.68756 349.9834,425.99368 C 351.4349,427.44518 354.38699,429.21898 355.86566,430.32797 C 357.30622,431.4084 359.05082,431.34598 360.19995,432.49512 C 361.78322,434.07839 363.5735,434.6303 365.15343,436.21023 C 366.91193,437.96873 368.02904,440.2245 370.10692,441.7829 C 372.42358,443.5204 373.90714,444.6079 375.36999,447.04597 C 375.70231,447.59984 376.30611,448.29169 376.60836,448.59394"
       id="path5246" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#555040;stroke-width:1.29999995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 277.22913,434.04309 C 278.12079,433.1514 283.76867,431.8607 286.8265,430.63757 C 290.52307,429.15894 295.82546,428.15563 299.5198,427.23205 C 302.03395,426.60351 304.00525,426.26548 306.33084,425.68408 C 308.1595,425.22692 310.03739,425.07346 311.28432,423.82653 C 311.42799,423.68286 313.04899,422.94419 313.14188,422.89775"
       id="path5248" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:2.9000001;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 267.30376,422.97892 C 264.38125,422.97892 263.48803,418.544 261.4215,416.47747 C 258.7265,413.78247 256.65769,411.09447 253.99128,408.42806 C 253.57849,408.01527 253.1657,407.60248 252.75291,407.18969 C 249.90671,404.34349 246.63882,401.23025 243.15554,399.14029 C 239.23582,396.78845 235.16521,394.59376 231.39102,392.32925 C 228.59251,390.65014 225.05859,390.07775 222.10324,388.30454 C 220.06559,387.08195 218.26183,386.19746 216.53058,384.89903 C 214.93804,383.70463 213.45752,383.05862 212.19628,382.11269 C 210.54959,380.87767 209.04587,380.2279 207.2428,379.32636 C 205.65736,378.53364 204.38485,377.91529 202.59891,377.46881 C 199.84135,376.77942 197.85018,375.24924 195.47828,374.06329 C 195.29367,373.97099 195.06549,374.06329 194.85909,374.06329 C 194.12715,374.06329 192.12208,372.23039 191.45357,371.89614"
       id="path5250" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer11"
     inkscape:label="little twiggies"
     style="display:inline">
    <path
       id="path5252"
       d="M 83.298676,44.164396 C 86.204562,41.49219 94.042856,42.132092 99.277834,42.132092 C 103.59889,42.132092 106.36518,38.698508 110.17269,36.035081 C 114.18435,33.228853 119.26435,29.938118 123.24657,29.938118 C 126.69382,29.938118 130.43396,27.958853 133.41511,25.873461 C 134.74804,24.941099 135.72271,24.582079 137.04673,23.841157"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5254"
       d="M 128.13358,-7.1630061 C 131.23904,-7.9393621 126.19083,5.1528029 124.67589,6.6677479 C 120.62101,10.722629 116.54521,11.597501 112.57398,13.583114 C 108.82165,15.45929 105.95639,17.11526 102.20091,16.17638 C 98.340952,15.211383 94.781787,15.211213 90.963427,14.447552"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5256"
       d="M 124.3124,7.0851819 C 115.98062,5.3361919 118.42836,17.237365 114.30281,21.362917 C 111.49982,24.165911 109.98071,30.416057 109.98071,34.329257 C 109.98071,40.060683 109.16574,43.59064 108.25187,48.160012 C 107.83307,50.25394 106.86479,52.321264 106.52301,53.346523"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csssc" />
    <path
       id="path5258"
       d="M 95.285524,42.31874 C 93.467937,51.406729 88.040515,66.232198 85.776892,77.550351 C 84.805082,82.409433 83.796268,83.448141 79.725937,84.465716"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csc" />
    <path
       id="path5260"
       d="M 90.099011,61.990743 C 91.57894,63.766677 93.573693,69.804569 95.285524,73.228229 C 96.746441,76.150045 101.14044,79.083145 103.06533,81.008033 C 104.6152,82.5579 104.64071,83.108551 105.65859,84.465716"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       sodipodi:nodetypes="cscsssc"
       id="path5262"
       d="M 110.76359,94.855107 C 111.92751,93.3032 118.54337,85.987953 118.54337,83.617619 C 118.54337,78.377095 119.67781,76.009969 117.7605,74.092668 C 117.73097,74.210784 120.94803,64.719102 129.86242,60.261914 C 133.4489,58.468664 138.82103,59.397499 142.82874,59.397499 C 145.20694,59.397499 151.11745,53.702042 153.20181,51.617695 C 157.01392,47.805589 159.92279,45.615333 163.57487,44.702306"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5264"
       d="M 108.25187,132.87336 C 108.19139,132.9036 104.50921,144.38629 103.92977,146.7041 C 102.28017,153.30244 108.26033,153.62372 111.70955,155.34834 C 115.3542,157.17065 119.40243,155.34834 123.81148,155.34834 C 125.62997,155.34834 129.70673,160.37919 131.59125,162.2637 C 133.77158,164.44403 136.09544,165.42575 137.6422,166.5858"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5266"
       d="M 136.77778,138.92431 C 140.97812,143.12466 126.11658,144.39898 120.35376,145.83968 C 115.92878,146.94595 114.66758,151.16116 112.57398,155.34834 C 110.62495,159.24636 105.83688,160.87794 103.06533,162.2637 C 101.3365,163.12812 101.3365,158.80602 100.47206,157.07716"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5268"
       d="M 144.55756,124.22915 C 142.8495,124.89308 135.61233,126.56128 132.77576,127.66385 C 129.21704,129.04711 129.19971,129.95364 123.93942,129.95364 C 121.48489,129.95364 119.03033,129.95364 116.57579,129.95364"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5270"
       d="M 96.385272,193.38289 C 99.789024,193.38289 108.10081,196.84057 112.57398,196.84057 C 117.60422,196.84057 119.94142,195.97617 124.67589,195.97617 C 129.90437,195.97617 131.41978,197.44603 135.91337,198.56944 C 136.80882,198.79329 138.37986,198.56944 139.37105,198.56944"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csssc" />
    <path
       id="path5272"
       d="M 135.91337,181.281 C 142.34879,182.88983 130.83493,167.3206 124.67589,164.85697 C 118.84289,162.52377 114.05516,160.84325 109.98071,158.80602 C 104.59051,156.11091 98.572978,145.90082 95.285524,141.51759 C 91.919892,137.03005 90.555361,134.19416 87.505748,131.14452 C 85.841758,129.48052 81.457497,128.98415 79.725937,128.55124"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5274"
       d="M 75.093955,290.4265 C 78.915882,287.81147 82.737842,285.19646 86.559767,282.58145 C 87.756912,281.76234 88.973639,280.97222 90.180551,280.16762 C 95.625305,276.53778 99.470834,270.27386 102.85332,266.89137 C 103.00539,266.73931 99.241159,267.49269 99.232527,267.49484"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5276"
       d="M 65.438504,277.75375 C 70.995393,272.19689 79.921663,270.6725 79.921663,259.64982 C 79.921663,256.0942 79.663809,252.92393 81.128587,249.99438 C 81.643443,248.96467 81.451762,248.70171 81.73206,247.58054"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5278"
       d="M 61.214267,241.54588 C 61.460569,241.05325 67.229809,238.53812 68.455845,237.92508 C 70.357751,236.97412 75.325345,237.92508 77.507792,237.92508 C 78.31243,237.92508 79.117047,237.92508 79.921663,237.92508"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5280"
       d="M 68.455845,218.01077 C 71.27917,218.01077 62.74638,219.29899 60.007345,218.61424 C 58.3639,218.20338 60.007345,212.25102 60.007345,219.82117 C 60.007345,224.16539 57.182026,227.94962 55.17961,231.28697"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5282"
       d="M 67.2489,215.59691 C 67.2489,220.04057 66.444285,224.4477 66.041978,228.87314 C 65.196653,238.17181 61.311227,247.96837 63.62811,257.23596 C 64.572679,261.01417 64.523288,265.0409 65.438504,268.70177 C 65.693585,269.72209 65.438504,271.24869 65.438504,272.32257"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5284"
       d="M 26.21332,126.28417 C 26.21332,121.78622 35.466458,125.88186 39.489556,123.87033 C 42.230803,122.49969 44.317267,122.03641 44.317267,119.04261"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5286"
       d="M 41.903398,111.19756 C 46.843779,108.72737 32.442527,116.93543 28.023714,120.24953 C 26.651083,121.27903 26.808111,122.07726 26.21332,123.26686"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5288"
       d="M 25.006399,114.81835 C 22.58718,116.63276 31.034343,114.21488 34.058371,114.21488 C 37.80523,114.21488 40.013847,113.651 42.506871,112.4045 C 42.153033,111.58068 43.603337,111.85627 43.713793,111.80103"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5290"
       d="M 17.161371,27.316008 C 16.799702,27.044779 20.122268,18.980348 21.385609,16.453665 C 22.576748,14.071387 27.369901,12.279768 28.627187,11.022481 C 31.202363,8.4472809 30.848207,6.3626189 31.644504,3.1774289"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5292"
       d="M 14.144031,8.0051399 C 14.79225,7.3569449 20.79201,4.6811629 22.592531,3.7809029 C 25.296814,2.4287729 27.236828,2.1539439 29.834109,-0.44336008 C 31.206423,-1.8156491 33.636537,-3.2097301 34.66182,-4.0641251"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5294"
       d="M 28.627187,280.77106 C 24.269731,282.51404 15.186095,286.26819 9.3163203,288.61611 C 6.0543316,289.92089 -0.2498512,291.6342 -3.5614761,292.46212"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csc" />
    <path
       id="path5296"
       d="M -6.3737584,233.70085 C -11.399159,235.71101 1.2410897,225.96156 4.4886094,221.63156 C 7.0972225,218.1534 7.5126618,217.25139 10.523242,214.99345 C 12.419263,213.57143 14.129098,212.43246 15.954425,211.97612"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5298"
       d="M 224.7531,178.18211 C 230.94277,173.53988 236.52634,163.75591 244.66745,158.87125 C 249.39293,156.03595 255.87844,148.73976 258.54712,147.40542 C 259.85694,146.75053 259.39886,144.60187 259.75404,143.18119 C 259.85348,142.78338 261.24786,142.1853 261.56444,141.97424"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       sodipodi:nodetypes="csc"
       id="path5300"
       d="M 246.54019,157.35925 C 247.81329,152.26685 261.24963,140.60102 264.58176,131.71535 C 265.67229,128.8073 266.98816,125.08469 268.80602,123.26686"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5302"
       d="M 228.01317,187.42119 C 233.80508,189.76595 228.37389,199.90683 228.37389,205.33801 C 228.37389,209.72144 227.54166,214.09818 226.5635,218.01077 C 225.90188,220.65728 221.41956,223.29833 219.92539,224.0454 C 218.47506,224.77056 216.74854,229.57367 216.3046,230.6835"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csssc" />
    <path
       id="path5304"
       d="M 226.4455,218.97496 C 228.30708,220.71408 228.89819,224.56969 230.78776,226.45927 C 232.55333,228.22485 230.1281,230.79596 229.58084,231.89045"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csc" />
    <path
       id="path5306"
       d="M 231.39124,227.06274 C 231.41375,227.08527 234.36373,227.06274 236.21894,227.06274"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <circle id="suspendRedraw1" cx="120" cy="120" r="101" fill="purple"/>
    <path
       id="path5308"
       d="M 249.14115,187.84427 C 251.41415,190.83875 258.40665,194.3352 260.35751,196.28606 C 262.24782,198.17637 262.77135,204.0824 262.77135,206.54495 C 262.77135,208.94014 264.59829,211.43879 265.18523,213.78651 C 265.55902,215.28161 267.05987,215.85394 267.59907,218.01077"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csssc" />
    <path
       id="path5310"
       d="M 238.33442,187.11607 C 238.67419,188.4751 251.3682,197.81036 254.92634,198.6999 C 258.95296,199.70656 262.68884,199.90683 266.99562,199.90683 C 270.35415,199.90683 271.01993,198.19641 273.63373,196.88951"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="cssc" />
    <path
       id="path5312"
       d="M 263.97828,209.56228 C 263.18411,212.73907 258.80461,213.87498 257.34018,216.80386 C 257.21296,217.05828 256.93787,217.20616 256.73673,217.40729"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5314"
       d="M 192.7695,122.05993 C 195.42325,119.72262 198.20068,115.08819 198.20068,109.99065 C 198.20068,108.12991 198.12796,106.40502 198.1383,104.97582"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csc" />
    <path
       id="path5316"
       d="M 187.94179,99.731747 C 185.70724,95.262663 195.36267,92.735006 197.59721,88.265934 C 198.40194,86.656452 203.82447,83.595465 204.83879,82.834746 C 207.74091,80.658157 207.79684,78.776168 210.87342,78.007035 C 213.02555,77.469004 214.52106,74.96287 215.70115,73.782773 C 217.31602,72.167901 220.25173,72.053968 222.33926,72.575851 C 225.15498,73.279786 227.69585,73.160672 230.18429,73.782773 C 231.01565,73.990625 232.31533,73.782773 233.20161,73.782773"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5318"
       d="M 238.02934,68.351588 C 238.41787,68.448718 237.42587,59.625781 237.42587,57.489245 C 237.42587,53.361699 234.90874,52.558252 232.59816,50.247666 C 230.03008,47.679593 226.79859,46.861968 224.7531,44.816482 C 222.05242,42.115797 221.73579,38.888611 221.73579,35.16106 C 221.73579,34.435775 222.5404,33.954115 222.94271,33.350665"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5320"
       d="M 228.37389,33.350665 C 228.37389,31.977402 238.1465,43.123257 240.44318,45.419956 C 242.94876,47.925506 245.55303,45.882331 247.68476,44.816482 C 248.984,44.166877 250.05495,43.329651 250.70207,43.006088"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5322"
       d="M 250.09862,33.350665 C 250.45613,33.171897 241.86093,29.284524 234.40855,23.695218 C 232.81097,22.497028 232.0021,20.394709 231.39124,18.867507"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5324"
       d="M 256.73673,41.195693 C 256.16944,40.770235 253.5723,27.249982 253.11594,26.109086 C 251.69683,22.561303 251.41745,18.823685 250.70207,15.246718 C 250.38874,13.680071 248.89328,11.629116 248.28823,10.419007"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5326"
       d="M 265.18523,46.626877 C 264.41017,42.751567 272.69898,43.609561 276.65105,43.609561 C 282.05723,43.609561 288.90667,37.415202 292.9446,33.954115 C 294.13743,32.931676 295.35844,31.942577 296.56536,30.936797 C 301.46943,26.850082 303.20349,23.625423 303.20349,17.660586 C 303.20349,13.563244 302.63791,12.757097 304.41041,9.2120859 C 305.36138,7.3101549 304.41041,2.3425629 304.41041,0.16011392 C 304.41041,-1.0468081 304.41041,-2.2537541 304.41041,-3.4606751"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5328"
       d="M 376.22268,37.574904 C 376.22268,28.078989 366.99595,15.071963 359.32567,7.4016919 C 355.04927,3.1252889 354.63523,-4.4845741 350.87717,-9.4953081 C 349.75044,-10.997631 349.25905,-11.113439 348.4633,-11.909176"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5330"
       d="M 369.58458,33.954115 C 368.48375,32.486372 363.21363,38.224461 362.34299,39.385299 C 359.87862,42.671144 358.69447,44.048833 356.30835,47.230351 C 353.6567,50.765878 351.09267,54.184601 349.06678,56.885773 C 346.5176,60.284677 344.77914,63.777426 343.63559,68.351588 C 342.52386,72.79849 342.0769,76.748508 341.22173,81.024351 C 340.33876,85.439294 339.81829,89.662416 338.20442,93.697092 C 336.64903,97.585577 334.92605,101.37937 333.98018,105.16293 C 333.13256,108.55337 331.15775,110.41798 330.35939,113.61143 C 329.75402,116.03286 329.15244,118.54369 329.15244,121.45646 C 329.15244,124.47377 329.15244,127.49111 329.15244,130.50843 C 329.15244,133.34668 330.2939,137.48802 330.96284,140.16385 C 331.75403,143.32863 330.96284,147.7156 330.96284,151.02622 C 330.96284,154.40725 331.60412,156.60869 332.16978,158.87125 C 332.72663,161.09873 332.29723,162.39839 332.77324,164.30243"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5332"
       d="M 281.47876,187.23409 C 282.21706,190.18723 281.0101,181.13525 280.27183,178.18211 C 279.17778,173.80589 279.06491,169.0977 279.06491,164.30243 C 279.06491,158.52088 279.53765,153.96297 280.87531,148.61235 C 281.73399,145.17765 282.4572,142.2848 283.28915,138.95692 C 283.96283,136.26225 285.38636,134.15905 286.90994,131.1119 C 288.50758,127.91663 289.23049,126.05395 289.92726,123.26686 C 290.47765,121.06538 291.73488,118.45028 292.34111,116.02528 C 293.0071,113.36141 292.8122,110.52015 293.54805,107.57677 C 294.44194,104.00127 294.15152,99.973381 294.15152,96.110952 C 294.15152,93.315433 295.09044,89.640948 295.73722,87.053808"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csssssssssc" />
    <path
       id="path5334"
       d="M 241.04666,161.28511 C 242.40074,161.28511 247.51599,161.28511 250.70207,161.28511 C 254.32286,161.28511 257.94365,161.28511 261.56444,161.28511 C 265.36903,161.28511 266.87069,160.74412 269.40947,159.47473"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5336"
       d="M 280.87531,149.8193 C 283.23447,149.8193 287.6234,152.10979 290.53073,152.83661 C 293.89673,153.67812 298.76051,156.04629 301.99655,157.66433 C 305.82767,159.5799 309.67839,160.97845 313.46238,162.49203 C 315.87309,163.45632 318.84432,167.13198 320.70394,168.52669 C 322.70864,170.03021 324.06992,170.68573 325.53168,172.14749"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5338"
       d="M 321.30741,181.19943 C 318.94559,179.63045 313.62425,176.53361 310.44505,173.35441 C 307.72597,170.63531 303.3349,168.65814 299.58269,164.90591 C 297.07703,162.40023 291.49157,160.34621 288.72034,158.2678 C 286.25742,156.42062 283.63834,154.21814 280.87531,152.83661 C 280.07067,152.43431 280.07067,151.22739 279.66836,150.42275"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5340"
       d="M 296.3407,87.281085 C 291.7819,84.698618 301.66719,83.301158 305.01389,81.627825 C 305.92522,81.172137 307.02588,80.118813 307.42772,79.817429"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csc" />
    <path
       id="path5342"
       d="M 295.65887,87.210495 C 295.9074,86.083385 295.35844,80.964308 295.35844,78.007035 C 295.35844,74.955866 293.91195,72.700168 292.9446,70.765456 C 292.15075,69.177773 288.73906,67.757502 287.51341,67.144666 C 287.19439,66.98516 286.39898,66.030254 286.30647,65.937745"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csssc" />
    <path
       id="path5344"
       d="M 320.10048,111.19756 C 320.63392,110.13069 327.92051,103.98098 329.75591,102.14562 C 331.89469,100.00682 333.41386,97.871793 335.18709,95.507478 C 337.15157,92.888171 337.50928,90.259642 338.80789,87.662461 C 340.03898,85.200243 342.58606,82.624898 344.23906,80.420877 C 345.43994,78.819724 344.2362,80.422313 345.446,79.817429"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5346"
       d="M 412.5284,233.14631 C 417.25427,233.14631 417.39194,224.74432 421.17262,221.90882 C 424.9687,219.06176 429.83581,219.52693 434.13894,218.45114 C 439.69835,217.06129 445.03357,215.51137 450.56295,214.12902 C 454.35972,213.17985 455.60309,212.40018 460.07162,212.40018"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5348"
       d="M 425.49472,243.51938 C 429.38824,244.49274 432.71888,239.19726 436.73221,239.19726 C 441.76454,239.19726 444.8772,237.651 449.69855,240.0617 C 453.14144,241.78312 455.17349,243.66355 458.34277,245.24821 C 459.0717,245.6127 459.49532,246.40078 460.07162,246.97705"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5350"
       d="M 367.57846,208.07806 C 371.71807,210.14787 380.24946,215.5078 386.59575,219.31556 C 390.8309,221.85666 392.84832,221.90882 398.69765,221.90882 C 400.4265,221.90882 400.72317,222.26686 402.45202,222.26686"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="cssc" />
    <path
       id="path5352"
       d="M 383.13804,181.281 C 383.13804,182.8747 395.18464,189.03313 398.69765,190.78963 C 402.30952,192.59558 405.44889,194.20628 409.07072,195.11175 C 412.95128,196.08187 415.38954,197.55587 419.44377,198.56944 C 424.35616,199.79754 426.34539,200.28452 428.95243,202.89153 C 430.84463,204.78373 441.02242,204.54688 443.43616,205.75376"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="cssssc" />
    <path
       id="path5354"
       d="M 403.79883,192.68886 C 403.90501,193.11478 400.08147,201.68509 400.08147,205.73942 C 400.08147,209.96363 394.86417,212.46086 392.64672,214.12902"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5356"
       d="M 398.69765,209.80692 C 397.51028,210.69745 402.4045,220.31226 403.01974,222.77323 C 403.53407,224.83049 406.36085,227.72658 407.19352,229.39194"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csc" />
    <path
       id="path5358"
       d="M 437.59664,132.00894 C 437.70785,132.45383 428.45021,141.89423 425.49472,144.11085 C 422.58324,146.29446 419.80133,148.93983 416.8505,151.89064 C 413.99401,154.74712 408.76303,156.36657 405.61302,157.94158 C 401.18038,160.15791 398.4256,161.45369 394.37553,162.2637 C 393.52789,162.43324 392.64669,162.2637 391.78226,162.2637"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5360"
       d="M 403.04567,146.7041 C 401.48223,146.96591 411.88997,154.72865 413.3702,155.34834 C 423.10336,159.42285 436.73942,160.3769 445.37637,163.99256"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5362"
       d="M 408.41588,151.59396 C 409.18189,154.19292 413.56623,157.54813 414.98507,161.3993 C 416.49763,165.50478 418.80673,167.37549 418.80673,172.63677 C 418.80673,175.48685 420.60901,181.85076 421.35447,183.87426 C 421.94966,185.48967 429.63695,184.73868 431.54557,184.73868"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="csssc" />
    <path
       id="path5364"
       d="M 419.37475,176.85148 C 420.08618,180.28183 415.11409,181.89882 413.80231,185.06142"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5366"
       d="M 349.57396,249.65731 C 350.06661,253.02188 354.1969,262.60457 355.47656,267.72318 C 356.56864,272.09163 358.38767,275.27427 359.79866,278.09626 C 361.66779,281.83452 362.63613,283.7712 364.12077,286.74046 C 365.61206,289.72305 367.894,291.69364 369.30731,294.52028 C 370.78597,297.47762 373.00512,300.02697 375.35827,303.16449 C 377.11127,305.50184 382.86604,306.77027 385.73132,307.4866 C 389.44029,308.41384 393.62592,308.35103 397.83323,308.35103 C 401.9877,308.35103 404.1228,305.63846 407.34187,304.02891 C 410.6728,302.36345 413.57268,302.12022 415.98608,299.70682 C 419.60361,296.08928 423.0139,294.6585 426.35916,290.19815 C 428.83214,286.90082 432.7943,283.37884 435.00338,278.96067 C 437.10928,274.74888 438.83302,274.87957 440.18991,269.45204 C 440.42981,268.49236 440.76468,267.15291 441.05432,265.99434"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       sodipodi:nodetypes="cssssssssssssc" />
    <path
       id="path5368"
       d="M 355.56168,268.58762 C 356.52932,264.78548 361.67316,273.75029 365.24173,275.50298 C 368.20688,276.9593 373.38802,276.36739 377.56185,276.36739 C 380.52716,276.36739 384.83474,272.79534 388.1219,271.18088 C 392.673,268.94562 393.71641,268.2787 396.92196,265.12991 C 398.82601,263.25962 398.93014,263.2905 399.56199,260.80781"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232141;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5370"
       d="M 388.32458,233.14631 C 391.61621,229.8547 383.13804,241.45758 383.13804,246.11264 C 383.13804,250.8967 381.30797,253.48752 382.27362,257.35013 C 383.33722,261.60445 383.04134,264.02523 387.46016,265.12991"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5372"
       d="M 388.24331,243.51938 C 388.48143,244.39885 376.72301,249.85226 374.1994,250.43474 C 369.95672,251.41404 364.24016,250.29703 361.09176,249.57033 C 357.75779,248.80078 353.62273,246.19045 352.66541,242.65494 C 351.99461,240.17757 347.63517,237.14625 346.1116,235.73958 C 344.84847,234.57334 344.81213,230.9405 344.23909,228.82421"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232165;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5374"
       d="M 348.56117,251.29916 C 349.30528,250.92711 358.28445,250.38109 361.52751,249.57033 C 364.94012,248.71717 367.70066,245.61931 370.17173,244.38379"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5376"
       d="M 393.51111,188.19635 C 397.18924,188.19635 402.25083,188.12474 405.61302,185.60309"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5378"
       d="M 405.09363,193.92454 C 405.84255,193.32929 415.4287,193.92454 419.33998,193.92454 C 422.11727,193.92454 421.47177,195.61894 422.90158,196.75536"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5380"
       d="M 334.73041,-11.485128 C 339.37656,-11.485128 339.56797,-3.5388371 341.6458,0.61679792 C 343.46388,4.2529309 348.4894,5.7315679 350.29002,7.5321619 C 351.95169,9.1938459 357.69421,10.247632 360.66307,10.989845 C 363.5395,11.708954 366.58188,11.172918 369.30731,11.854284"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5382"
       d="M 282.00069,54.210963 C 283.29849,54.5354 292.58341,49.784003 295.83142,48.160012 C 299.69307,46.229191 302.73938,38.681048 303.61122,35.193672 C 304.56917,31.361867 305.4687,27.76384 306.2045,24.8206 C 306.71741,22.768864 308.59102,21.776386 309.66217,19.634063"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5384"
       d="M 204.2027,246.11264 C 205.2837,249.65678 209.79431,252.56868 212.84692,255.62127 C 216.54179,259.31615 218.3675,258.88264 220.62673,263.40108 C 221.99951,266.14661 226.69821,266.85876 230.13536,266.85876 C 233.49051,266.85876 238.29529,267.72318 242.23729,267.72318 C 245.88614,267.72318 252.17546,265.88696 255.20359,265.12991 C 259.50165,264.05541 265.46487,265.12991 269.89876,265.12991 C 273.69217,265.12991 276.41231,264.2655 280.27183,264.2655"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5386"
       d="M 420.30821,127.68684 C 418.96396,133.06382 430.04602,132.98795 435.00338,135.46663 C 439.16725,137.54857 442.21713,138.20908 445.37645,139.78874 C 448.65172,141.42637 453.13607,141.29643 457.47835,142.382 C 463.17186,143.80538 465.14195,144.5322 468.71584,149.29739 C 469.5868,150.45866 470.74889,151.33045 471.3091,151.89066"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5388"
       d="M 441.44868,189.43919 C 440.46277,192.33198 438.42027,199.09976 437.73385,203.98804 C 436.94412,209.61202 435.03686,214.71777 434.05727,220.24909 C 433.32272,224.39664 431.11379,228.8859 429.79211,232.76399 C 428.44934,236.70387 427.1066,240.64378 425.76388,244.58362 C 425.13198,246.43771 424.50015,248.29174 423.86825,250.14581"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       sodipodi:nodetypes="cssssssc"
       id="path5390"
       d="M 419.44377,246.11264 C 419.44377,250.54775 420.32497,253.95948 421.17262,257.35013 C 422.40151,262.26566 422.96177,263.52168 424.63031,266.85876 C 426.49423,270.58661 429.54241,272.36082 431.54569,276.36739 C 434.42738,282.13083 442.77297,290.01304 447.96969,296.2491 C 449.41042,297.97796 450.85112,299.70682 452.29181,301.43564 C 455.53396,305.32623 457.71668,307.72495 460.07162,310.07986 C 461.82841,311.83667 463.50036,315.50629 464.39372,316.99525"
       style="fill:none;fill-rule:evenodd;stroke:#35352a;stroke-width:1.70232153;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 444.09516,203.30653 C 447.24429,204.30373 447.25832,206.71289 444.09516,206.71289 C 442.14192,206.71289 444.98971,211.17128 443.60853,212.55242 C 442.50186,213.65913 443.03378,205.91592 440.68879,210.60592 C 438.28475,215.41403 437.76901,208.82996 437.76901,206.71289 C 437.76901,204.68556 442.19464,203.68664 444.09516,203.30653 z "
       id="path5966" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer12"
     inkscape:label="twiggies dark"
     style="display:inline">
    <path
       id="path5392"
       d="M 65.422186,33.350665 C 68.851295,32.029541 77.131266,30.787358 82.756344,29.729876 C 91.376606,28.109314 99.544124,26.237466 107.79458,24.298692 C 113.98937,22.842964 121.15222,22.488297 127.69672,22.488297 C 136.43503,22.488297 144.93018,24.298692 153.37696,24.298692 C 157.01498,24.298692 160.653,24.298692 164.29105,24.298692 C 164.30063,24.298692 165.89126,24.298692 166.21706,24.298692"
       style="fill:none;fill-rule:evenodd;stroke:#26241c;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5394"
       d="M 155.95817,74.989695 C 156.34646,74.989695 149.57567,78.720501 143.28542,83.438195 C 141.0894,85.085214 135.91853,86.939453 133.02652,87.662461 C 129.41413,88.565563 125.84767,91.236209 123.37111,93.093641 C 120.4531,95.28212 118.21579,96.438556 115.52605,99.128273 C 113.04362,101.61072 109.97819,102.98743 107.07755,105.16293 C 103.73466,107.67011 99.340264,109.27944 97.42213,111.19756 C 95.386226,113.23344 93.897403,116.09836 92.594422,117.83566 C 90.852457,120.15829 90.787943,123.24728 90.180551,126.28417 C 89.619205,129.09092 88.87347,132.71946 88.370165,134.73266 C 87.619943,137.7335 87.777073,141.32928 87.163241,143.78465 C 86.583767,146.10247 86.53645,148.70562 85.956294,151.02622"
       style="fill:none;fill-rule:evenodd;stroke:#26241c;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5396"
       d="M 97.42213,110.59411 C 96.910805,112.63938 91.893041,102.35746 91.387475,100.33522 C 90.685106,97.525685 87.772814,97.921349 84.74937,97.921349 C 82.338759,97.921349 80.395755,102.40432 79.318189,104.55945 C 77.980214,107.2354 76.51748,109.17056 74.490481,111.19756 C 75.804036,112.93259 73.439268,112.2488 73.283557,112.4045"
       style="fill:none;fill-rule:evenodd;stroke:#26241c;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5398"
       d="M 186.73487,92.490168 C 188.75138,93.498448 192.34333,97.672468 193.37297,99.731747 C 194.46222,101.91025 195.90306,103.46878 197.59721,105.16293 C 199.10496,106.67067 202.59217,108.26386 204.83879,109.38717 C 207.79637,110.86598 211.25854,113.44764 213.89076,115.42183 C 216.93346,117.70386 220.449,120.16967 222.94271,122.66341 C 225.31886,125.03953 228.37059,127.18771 231.39124,128.69804 C 235.10473,130.55479 236.82534,133.28494 241.04666,134.12921 C 245.08284,134.93646 250.95305,138.23826 254.32286,140.16385 C 257.84084,142.17412 262.19671,143.49732 265.18523,144.99159 C 268.45466,146.6263 271.36813,146.8761 273.63373,148.0089 C 275.97169,149.17789 279.04857,149.8193 281.47876,149.8193"
       style="fill:none;fill-rule:evenodd;stroke:#26241c;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5400"
       d="M 380.54478,178.68773 C 384.36112,178.48803 388.69274,176.77481 393.51111,174.36561 C 398.67778,171.78229 403.72078,172.24541 409.07072,170.90793 C 413.10167,169.9002 417.53427,170.04351 422.03703,170.04351 C 426.35916,170.04351 430.68125,170.04351 435.00338,170.04351 C 438.82134,170.04351 438.72659,174.21589 442.78318,175.23004 C 446.99584,176.2832 451.41211,175.22623 454.88509,176.09446 C 457.6023,176.77376 459.28216,176.95887 462.66489,176.95887"
       style="fill:none;fill-rule:evenodd;stroke:#26241c;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5402"
       d="M 441.91874,107.80513 C 442.69588,107.99941 439.87711,120.2938 439.32548,122.5003 C 438.24278,126.8311 438.66161,131.2067 437.59664,135.46661 C 436.57756,139.54289 436.73221,143.92282 436.73221,148.43294 C 436.73221,153.18858 437.5983,156.21939 438.46106,159.67044 C 439.48477,163.76522 439.32548,168.29042 439.32548,172.63677 C 439.32548,177.05362 439.37764,181.48962 440.18991,184.73868 C 441.4616,189.82545 440.23572,191.23331 445.37642,192.51848 C 447.5131,193.05265 450.1804,198.18685 451.42739,199.43385 C 453.8928,201.89925 455.28516,204.55611 456.61391,207.21364"
       style="fill:none;fill-rule:evenodd;stroke:#26241c;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5404"
       d="M 303.61122,232.28189 C 307.11661,230.5292 296.87382,236.42602 294.10258,239.19726 C 291.31134,241.98851 288.10942,243.05827 285.45836,244.38379 C 281.0773,246.57432 276.66602,247.9896 274.22088,250.43474 C 271.57669,253.07893 268.23287,255.15759 265.57666,256.48569 C 264.25956,257.14426 263.83495,257.64686 262.9834,258.21455 C 260.4374,263.30652 260.7835,266.93644 258.66128,271.18088 C 257.02204,274.45936 256.00906,277.46765 255.20359,280.68952 C 254.07685,285.19646 251.7856,289.17495 250.88149,292.79142 C 249.87885,296.80194 247.6987,300.3361 246.55939,304.89332 C 245.70314,308.31834 242.99214,313.75668 241.37285,316.99525 C 239.69063,320.35967 240.56438,326.28002 239.64402,329.96156 C 238.6333,334.00441 238.23652,337.09866 236.18631,341.19905 C 234.39393,344.78379 232.67596,350.05397 231.86422,353.30097 C 230.89324,357.18492 229.35095,359.03184 228.40653,362.80961 C 227.91515,364.77516 227.00979,367.53204 226.67769,368.86056"
       style="fill:none;fill-rule:evenodd;stroke:#26241c;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       id="path5406"
       d="M 47.938056,132.92229 C 47.941314,132.93536 34.614667,132.31882 31.644504,132.31882 C 27.350908,132.31882 25.724194,131.22622 23.799477,129.30151"
       style="fill:none;fill-rule:evenodd;stroke:#26261e;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
    <path
       id="path5408"
       d="M 40.696478,58.092694 C 38.398368,55.794583 31.756152,52.773158 28.023714,49.040745 C 24.752703,45.76971 20.730192,42.212782 17.76482,39.988771 C 16.433093,38.989971 15.460485,38.109651 14.747503,37.574904"
       style="fill:none;fill-rule:evenodd;stroke:#26261e;stroke-width:2.91826558;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer3"
     inkscape:label="rev1 tree2"
     style="opacity:0.87209305;display:none"
     sodipodi:insensitive="true" />
  <g
     inkscape:groupmode="layer"
     id="layer8"
     inkscape:label="tree2"
     style="display:inline">
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#2d2a22;stroke-width:29.91222;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 190.16249,467.72344 C 189.18736,461.97047 189.72265,446.53129 192.04619,437.16704 C 194.13413,428.75219 194.50386,419.74986 196.02052,411.19827 C 197.42956,403.2537 198.08734,396.06082 198.39035,387.86857 C 198.58446,382.62067 198.05656,376.52283 198.27024,370.74637 C 198.55141,363.14464 198.09528,355.10644 198.38302,347.32698 C 198.70508,338.62041 198.26619,330.11511 198.59565,321.20884 C 199.15021,306.2156 199.70478,291.22232 200.25937,276.22908 C 200.70477,264.18724 199.6168,252.86194 200.05242,241.08508 C 200.41874,231.18173 199.26376,221.66697 199.61252,212.23827 C 199.83812,206.13878 199.26888,201.15866 199.49239,195.11608 C 199.67782,190.10328 199.08575,186.16617 198.45354,182.462 C 198.24714,181.25257 198.04071,180.04317 197.8343,178.83372 C 196.80687,172.81372 192.6967,168.43357 191.66218,162.37215 C 190.66329,156.51949 188.31872,150.48986 186.27566,145.04083 C 183.64708,138.03023 179.24146,132.2849 177.97962,124.89123 C 177.59596,122.64354 177.0241,123.01508 176.57472,122.13269"
       id="path5410" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#2d2a22;stroke-width:18.96872711;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 207.08286,182.8477 C 211.29087,179.44473 219.67508,170.56595 222.89363,162.51951 C 227.92991,149.92888 232.48918,136.8674 237.95154,124.1219 C 242.09913,114.44418 242.93535,102.68085 245.48047,92.500356 C 247.04245,86.252452 247.77791,79.546201 249.24493,73.677983 C 250.07946,70.339924 251.91631,67.355536 254.5152,63.890364 C 256.54555,61.183234 258.94964,53.681468 259.78546,50.338254 C 260.03643,49.334395 260.28741,48.330537 260.53835,47.326677 C 262.12726,40.971083 264.75156,34.158515 267.31442,27.751413 C 271.19758,18.043487 271.11006,4.9464329 272.58468,-5.3759341 C 274.06549,-15.741685 279.36073,-25.752017 279.36073,-36.244616 C 279.36073,-39.379222 282.57823,-43.546213 283.87808,-45.279347"
       id="path5412" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#2d2a22;stroke-width:14.10494995;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 198.80102,160.26082 C 198.80102,157.85111 202.56548,140.89991 202.56548,136.16821 C 202.56548,132.04667 203.31839,128.89434 203.31839,124.87479 C 203.31839,121.07039 209.03039,114.64545 211.60022,112.07559 C 216.45847,107.21737 219.82863,98.110622 223.64655,91.747443 C 226.48653,87.014145 230.91169,83.315383 234.18705,78.948249 C 237.17047,74.970385 239.47359,72.155936 243.22178,68.407717 C 245.45932,66.170185 248.38713,59.582833 249.99785,56.361409 C 251.48578,53.385532 252.98199,51.118574 255.26811,48.832454"
       id="path5414"
       sodipodi:nodetypes="csssssssc" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#2d2a22;stroke-width:17.75278282;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 146.8513,352.24893 C 141.03092,345.4341 131.42423,334.33587 122.75869,327.40344 C 116.32354,322.25532 106.9467,309.14542 98.666047,307.07528 C 91.73047,305.34138 83.957066,301.97946 77.585005,298.79344 C 71.935779,295.96882 67.602423,293.47444 61.774209,292.01737 C 56.248206,290.63587 52.630578,288.03747 47.469212,286.74713 C 42.254102,285.44335 38.289807,280.65164 33.917128,278.46529 C 29.014927,276.01419 23.672897,271.38686 18.859243,270.18345 C 10.521612,268.09903 1.5462912,263.4092 -5.9862862,259.64291 C -10.372415,257.44987 -15.898225,256.19275 -19.538395,254.37266 C -21.846111,253.2188 -23.039681,252.68781 -24.808661,251.36107"
       id="path5416" />
    <path
       style="opacity:1;fill:#5b7ab0;fill-opacity:1;stroke:#2d2a22;stroke-width:17.75278282;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 126.52315,298.79344 C 124.87349,284.6817 128.78183,271.23911 128.78183,257.38422 C 128.78183,246.86246 131.0405,237.04606 131.0405,226.51557 C 131.0405,214.54578 133.29919,202.69729 133.29919,190.37662 C 133.29919,182.95068 134.80499,176.53686 134.80499,169.29558 C 134.80499,159.57788 143.83972,149.95499 143.83972,140.68558 C 143.83972,137.50761 149.88631,127.08659 151.36867,124.1219 C 153.29205,120.27511 154.26214,116.31255 155.13314,112.82851 C 155.3053,112.13987 156.137,111.82465 156.63891,111.3227"
       id="path5418" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#2d2a22;stroke-width:7.05247498;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 210.84733,273.19502 C 213.59494,270.77924 223.39157,266.54646 228.16391,264.16029 C 232.80886,261.83782 237.07699,261.05172 240.96312,258.13714 C 245.29562,254.88775 248.14122,253.21769 252.25651,249.10238 C 255.60055,245.75837 258.11305,243.20421 261.29127,240.82056 C 263.75805,238.97046 271.25398,237.77397 274.84334,237.05608 C 280.03551,236.01767 286.03094,233.34453 290.65415,231.03293 C 297.13398,227.79302 303.95615,224.15579 309.4765,219.7395 C 314.21733,215.94685 321.0463,215.95598 326.04018,212.21057 C 327.86386,210.8428 331.28307,209.96557 332.81623,209.19899"
       id="path5420" />
    <path
       id="path5422"
       d="M 186.49022,180.49111 C 186.49022,177.28611 186.48324,187.01281 187.49675,190.05335 C 191.20847,201.18848 193.77059,212.53217 198.06554,223.26953 C 199.11795,225.90049 200.80081,228.17132 201.58847,231.32193 C 202.16957,233.6463 201.58847,236.95682 201.58847,239.37435 C 201.58847,245.70959 200.05471,238.24806 199.57535,235.85141 C 198.76828,231.81596 198.34923,228.2718 196.5557,225.28263 C 195.5097,223.53925 194.2216,222.12424 193.03281,219.74661 C 192.71062,219.10225 193.53605,228.573 193.53605,231.32193 C 193.53605,233.4252 192.95762,227.49832 192.52952,225.78591 C 191.85214,223.07644 190.72557,222.09306 190.01312,219.24333 C 189.36284,216.6421 189.00659,214.66194 189.00659,212.19746 C 189.00659,207.60134 188.50331,210.09057 188.50331,213.20403 C 188.50331,216.27114 188.31693,219.50434 189.00659,222.26298 C 189.60272,224.64749 189.42324,227.45252 190.01312,229.81211 C 190.75278,232.77073 189.94765,236.53052 190.5164,239.37435 C 191.05714,242.07795 190.50023,244.82944 191.01969,247.42674 C 191.52964,249.97656 191.0049,252.40034 191.52296,254.4726 C 192.27648,257.48663 193.03281,258.36303 193.03281,254.4726 C 193.03281,252.00818 193.54087,249.42062 194.03934,247.42674 C 194.91914,243.90758 194.54261,254.08051 194.54261,255.98242 C 194.54261,259.50534 194.54261,263.02827 194.54261,266.5512 C 194.54261,270.24189 194.54261,273.93257 194.54261,277.62327 C 194.54261,280.47515 194.54261,283.32705 194.54261,286.17896 C 194.54261,289.90417 192.52952,287.37539 192.52952,284.6691 C 192.52952,280.40406 191.38206,281.20652 190.5164,284.6691 C 189.96776,286.86374 190.5164,289.9427 190.5164,292.21826 C 190.5164,294.73462 190.5164,297.25099 190.5164,299.76739 C 190.5164,302.1467 189.61294,304.38785 189.00659,306.81322 C 188.30197,309.63166 188.50331,313.26733 188.50331,308.32306 C 188.50331,305.65838 188.51588,303.34058 188.00004,301.2772 C 187.32613,298.58163 186.99347,296.50462 186.99347,293.72809 C 186.99347,291.11386 186.91529,288.50488 187.49675,286.17896 C 188.13198,283.63806 187.99376,281.17762 188.50331,278.6298 C 188.96294,276.33163 189.50987,274.14823 189.50987,271.58397 C 189.50987,269.06757 189.50987,266.5512 189.50987,264.03484 C 189.50987,261.51846 189.50987,259.00209 189.50987,256.48569 C 189.50987,253.96932 189.50987,251.45295 189.50987,248.93658 C 189.50987,246.42021 189.50987,243.90381 189.50987,241.38744 C 189.50987,238.7072 189.03485,236.97106 188.50331,234.84486 C 187.93064,232.55417 188.0467,230.50205 187.49675,228.30228 C 186.88764,225.86577 186.99347,223.93685 186.99347,221.25641 C 186.99347,218.74005 186.99347,216.22368 186.99347,213.7073 C 186.99347,211.19093 186.99347,208.67453 186.99347,206.15816 C 186.99347,203.64179 186.99347,201.12542 186.99347,198.60905 C 186.99347,196.09265 186.99347,193.57628 186.99347,191.05991 C 186.99347,189.29725 185.85626,186.51094 185.48366,185.0206 C 185.09996,183.48577 185.97641,181.77559 186.49022,180.49111 z "
       style="opacity:1;fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    <path
       id="path5424"
       d="M 176.42471,159.35357 C 176.42326,161.4624 179.8372,164.95118 180.45089,167.40596 C 180.84591,168.98593 183.14679,171.33598 183.97382,172.43872 C 186.25452,175.47964 186.91719,173.64331 185.98694,169.92235 C 185.18806,166.7269 184.1025,165.40427 183.47057,162.87648 C 183.10663,161.42082 187.49675,162.36388 187.49675,160.86338 C 187.49675,158.54021 183.68794,159.28209 181.96072,158.85029 C 177.4014,157.71045 177.07002,158.91514 175.92142,154.32082 C 175.31066,151.87774 173.69386,150.87226 172.90178,149.28805 C 171.97418,147.43289 171.21392,145.91236 170.38541,144.2553 C 169.25755,141.99959 170.27702,149.35777 170.88869,151.80441 C 171.37732,153.75908 173.3525,154.77155 174.41159,155.83063 C 175.36798,156.787 175.72884,158.19379 176.42471,159.35357 z "
       style="opacity:1;fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer2"
     inkscape:label="tree1"
     style="opacity:1;display:inline">
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#241f0b;stroke-width:34.77599716;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 49.7279,-3.1172701 C 49.476955,-2.6153281 49.017644,-22.499171 48.975013,-21.939619 C 48.365728,-13.945007 50.657077,22.785888 51.98659,30.76299 C 53.188769,37.976044 53.835117,45.618617 54.998166,52.596943 C 56.401658,61.017792 57.256855,69.606516 57.256855,78.19536 C 57.256855,86.330074 58.762632,93.432525 58.762632,101.53509 C 58.762632,107.40022 59.670407,115.0979 61.774209,120.35744 C 64.98199,128.37689 66.559751,138.04544 67.797387,146.70873 C 68.905161,154.46327 72.602655,163.67113 74.573431,171.55427 C 76.18331,177.99385 76.766679,184.09175 78.337896,190.37662 C 79.585596,195.36744 81.729891,198.67437 82.855274,203.17585 C 83.883988,207.29069 84.955794,210.07217 85.866848,213.71635 C 86.932329,217.97828 88.352605,220.94655 90.384203,225.00977 C 92.783116,229.80759 93.828776,235.66335 96.407353,240.82056 C 99.571294,247.14839 101.45627,254.68283 104.6892,261.14871 C 109.96228,271.69487 117.74162,279.23165 119.74711,291.26449 C 121.43394,301.38549 125.66316,309.01265 128.78183,318.3687 C 130.4138,323.26459 132.86802,327.93738 134.05207,332.67367 C 134.95942,336.30302 137.40913,339.38778 139.32234,343.21422 C 141.24446,347.05842 142.74214,350.0538 144.59261,353.75474 C 146.44566,357.46081 149.27468,360.43666 150.61577,365.80105 C 152.20021,372.1388 156.05478,374.9266 157.39182,381.61182 C 159.15244,390.41491 163.48716,401.40367 166.42656,410.22181 C 169.61022,419.77284 168.68525,432.59787 168.68525,442.5963 C 168.68525,446.26219 167.93234,450.11497 167.93234,453.88971"
       id="path5426"
       sodipodi:nodetypes="csssssssssssssssssssssssc" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#241f0b;stroke-width:38.91020584;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 189.93691,-10.980901 C 189.58733,-2.2327431 184.28138,5.6805229 184.07845,14.489332 C 183.75631,28.472371 176.64691,42.864212 176.33313,56.48417 C 176.0071,70.635958 173.4987,83.939138 170.86322,97.77836 C 167.3716,116.11328 166.20772,136.10694 161.28305,154.03971 C 156.94378,169.84068 159.72379,189.03069 159.35115,205.20559 C 158.99586,220.62845 157.14127,235.75084 156.78798,251.0853 C 156.61649,258.52928 154.95408,265.31046 154.77972,272.87878 C 154.66569,277.82826 154.39421,282.60621 155.20296,287.19733 C 155.92493,291.29605 154.98715,296.56448 154.89082,300.74581 C 154.75036,306.84276 153.12124,312.17824 152.98658,318.02314 C 152.78124,326.93651 151.06243,336.16543 150.85693,345.08545 C 150.56907,357.5799 168.39673,368.28439 168.10659,380.8783 C 167.84437,392.25999 166.82251,403.92539 166.55622,415.48491 C 166.34076,424.83751 165.37964,433.86709 165.16194,443.31726 C 165.04408,448.43237 163.43244,453.00867 163.30971,458.3365 C 163.28658,459.3401 163.26348,460.34368 163.24035,461.34728"
       id="path5428"
       sodipodi:nodetypes="csssssssssssssssc" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#241f0b;stroke-width:21.15742493;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 169.43813,131.65085 C 171.02699,130.37975 173.12003,115.25232 175.46129,110.56982 C 179.02155,103.4493 180.9891,95.98759 182.99022,87.982978 C 184.66818,81.271212 188.91603,76.326089 190.51918,69.913516 C 190.77014,68.909658 191.02112,67.905799 191.27206,66.90194 C 193.01403,59.934095 199.82683,54.491725 204.07129,48.832454 C 208.9639,42.308964 215.6329,33.327563 219.88206,26.245637 C 224.01189,19.362592 235.09333,10.643982 241.71601,6.6703749 C 250.47243,1.4165239 258.27067,-2.8602911 266.5615,-8.3875111 C 271.52502,-11.696532 277.09523,-15.156768 280.8665,-18.928041 C 281.11748,-19.179013 281.36844,-19.429984 281.61942,-19.68093"
       id="path5430" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#241f0b;stroke-width:53.98791122;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 206.32995,484.0055 C 215.26324,469.86737 242.96819,418.75725 256.77388,404.95157 C 266.41255,395.31288 269.24497,370.45318 271.83177,357.51921 C 272.37601,354.79811 289.80888,309.51873 292.15992,304.81659 C 300.34011,288.45624 304.61847,266.75964 317.75834,253.61976 C 326.37268,245.00543 330.40136,226.03603 336.58072,215.22215 C 343.75539,202.66645 346.10693,182.35618 356.15597,172.30715 C 365.30995,163.15317 371.73095,148.64807 380.24859,138.4269 C 389.15381,127.74065 397.50744,118.15649 407.35279,108.31113 C 414.84029,100.82361 422.77256,93.523618 429.18673,84.971402 C 436.0708,75.79263 440.81051,65.81868 448.762,57.86721 C 449.76586,56.86335 450.76972,55.859492 451.77359,54.855631 C 457.90118,48.728003 459.41632,41.9426 465.32567,36.033257 C 469.12938,32.229565 471.00512,28.095136 475.1133,23.986949 C 485.07101,14.029243 473.69362,26.116455 476.61908,21.728259"
       id="path5432"
       sodipodi:nodetypes="csssssssssssssc" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.31948882;stroke:#241f0b;stroke-width:31.37135315;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 359.16756,150.47321 C 358.34134,136.02003 363.60687,122.33152 365.94359,108.31113 C 367.62076,98.248148 368.2712,88.253303 369.70806,78.19536 C 369.95904,76.438588 370.21,74.681842 370.46096,72.925094 C 371.67332,64.438656 372.71777,57.11899 375.73121,49.585366 C 378.2754,43.224885 382.01662,39.404364 386.27175,33.02168 C 391.69897,24.880862 400.71225,19.745662 405.84702,11.187729 C 408.90253,6.0952079 412.46568,2.1699949 414.88174,-3.8701571 C 416.91229,-8.9465781 418.28991,-11.795704 421.65779,-15.163577 C 422.75503,-16.260796 423.15743,-16.663201 423.91647,-17.42224"
       id="path5434" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:17.2664032;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 68.550275,182.8477 C 66.294456,175.74818 54.033218,172.84801 48.222125,167.03689 C 47.469212,166.284 46.716324,165.53112 45.963435,164.77821 C 41.431637,160.24643 38.176628,157.69686 32.411327,154.2377 C 31.335338,153.59207 30.403609,152.73189 29.399749,151.979 C 27.232791,150.35378 17.583401,148.96743 14.341865,148.96743 C 12.502507,148.96743 9.7781113,146.50891 7.5658228,145.95586"
       id="path5436" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:8.51160812;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 29.399749,201.67004 C 33.732158,198.60986 42.102303,200.88493 48.975013,203.17585 C 55.695681,205.41605 59.987014,209.98989 65.538699,212.21057 C 71.579313,214.62683 75.356648,219.00179 81.34947,221.99819 C 88.499615,225.57326 95.406273,227.47034 102.43053,230.28004 C 106.80207,232.02866 110.2756,236.16387 114.47684,239.31476 C 120.02585,243.47653 125.30218,247.81023 131.0405,252.11398 C 135.72689,255.62877 139.8696,260.19016 143.08683,263.40737 C 147.48147,267.80204 151.62184,270.68715 156.63891,274.7008 C 159.79538,277.22598 161.85228,281.41994 164.16788,283.73553 C 166.63196,286.19961 168.07017,291.54015 169.43813,294.27607 C 171.39082,298.18143 172.26796,301.62327 174.7084,304.0637 C 177.30267,306.65798 178.26164,312.25355 179.22576,316.11001 C 179.55825,317.43994 184.32193,324.21775 186.00182,325.89764 C 188.97976,328.8756 190.86074,334.10971 192.77787,337.94394 C 194.76759,341.9234 199.8672,345.89609 203.31839,348.48447 C 209.3004,352.97099 213.53613,357.9493 218.37628,362.78948 C 222.51023,366.92341 231.20489,369.95666 236.44575,372.57708 C 245.79906,377.25375 256.40597,379.16918 265.80862,383.87051 C 274.5506,388.24151 282.47933,393.3352 290.65415,397.42262 C 300.40178,402.29644 306.68889,407.601 317.00545,411.72762 C 323.1217,414.17412 331.9073,420.80527 335.8278,426.03261 C 338.07045,429.02279 343.6882,431.6343 347.12123,435.06735 C 350.53021,438.47632 353.20439,444.97498 354.65018,447.86654 C 357.30901,453.18422 361.5383,457.07427 368.20229,458.40707"
       id="path5438" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:26.02120018;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 399.82387,467.4418 C 403.97298,465.14503 409.86157,457.15295 414.88174,453.1368 C 418.40786,450.31591 420.97997,441.76832 423.91647,438.83181 C 428.05423,434.69405 430.47493,426.4678 432.9512,421.51523 C 435.86442,415.68884 439.1237,411.7338 440.48015,404.95157 C 441.52327,399.73596 444.81755,394.19809 446.50331,389.14078 C 446.83052,388.15912 447.00523,387.13306 447.2562,386.1292 C 448.82504,379.85383 451.85717,374.50137 453.27935,368.81263 C 454.89916,362.33346 457.74965,357.70756 459.30252,351.49606 C 459.55348,350.49219 459.80445,349.48833 460.05543,348.48447 C 461.71484,341.84673 463.68579,335.46877 465.32567,328.90921 C 467.04442,322.0342 470.59593,315.95649 470.59593,308.58106 C 470.59593,304.63364 473.84666,298.31514 475.1133,295.78187 C 475.33777,295.33291 475.1133,294.77801 475.1133,294.27607"
       id="path5440" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:4.37739801;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 186.00182,196.39978 C 190.39451,189.88807 200.38566,180.51016 207.83576,173.06005 C 214.03797,166.85784 217.69319,158.68526 223.64655,152.73189 C 228.64811,147.73031 234.20288,141.79514 238.70443,136.16821 C 242.7731,131.08238 247.25969,128.62242 252.25651,124.87479 C 255.71555,122.28053 258.60954,120.56896 262.04416,118.85167 C 267.15467,116.29638 269.7012,114.56391 275.59626,113.5814 C 280.68162,112.73384 285.7279,114.33429 290.65415,114.33429 C 295.72113,114.33429 300.52613,115.08717 305.71203,115.08717 C 310.66907,115.08717 314.80545,113.19028 319.26415,112.07559 C 322.64391,111.23066 327.8874,109.68035 331.31044,108.31113 C 334.97487,106.84536 338.99935,106.05244 342.60388,106.05244 C 345.50966,106.05244 349.77071,105.20186 352.39149,104.54666"
       id="path5442" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:2.67507672;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 275.59624,113.5814 C 276.28986,105.57635 275.59626,94.573026 275.59626,86.477208 C 275.59626,82.11605 274.84334,78.553601 274.84334,74.43087 C 274.84334,70.091361 276.29246,66.262427 277.85493,63.13745 C 280.1812,58.484909 280.65445,54.622243 281.61942,48.832454 C 282.51169,43.478726 284.32966,38.292797 285.38388,33.02168 C 286.06359,29.623165 288.62397,25.362886 289.90126,23.23406 C 292.07201,19.61614 292.72154,15.960137 295.1715,12.693527 C 297.3378,9.8051509 299.14691,5.6157369 299.68887,2.9059089 C 300.46314,-0.96543708 304.65993,-3.4262411 305.71203,-7.6346221 C 306.15128,-9.3916381 308.40158,-11.829946 309.4765,-12.904888"
       id="path5444"
       sodipodi:nodetypes="csssssssssc" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:3.16145396;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 196.42018,109.34531 C 206.56993,108.18914 215.98464,114.61557 225.78306,114.61557 C 234.16253,114.61557 242.23258,115.36846 250.62859,115.36846 C 255.84326,115.36846 260.55003,113.14324 266.43935,114.61557 C 270.84885,115.71795 276.12336,115.36846 280.74434,115.36846 C 287.45748,115.36846 295.27343,120.8341 301.82539,122.1445 C 302.84005,122.34745 303.83311,122.64644 304.83696,122.89741 C 309.74831,124.12525 316.93021,127.43823 321.40065,129.67346 C 327.1206,132.53343 334.36033,134.98384 340.22303,136.4495 C 345.72362,137.82466 351.18023,138.81237 356.78669,140.21398 C 360.89694,141.24153 364.83351,141.47278 368.83303,142.47264 C 373.53749,143.64879 378.09768,146.23714 383.8909,146.23714 C 390.59846,146.23714 400.48185,150.15764 407.23063,151.50738 C 409.6496,151.99119 411.61091,151.78112 414.00667,152.26027 C 415.51247,152.76221 417.01826,153.26413 418.52405,153.76608 C 423.45458,155.40959 430.35981,154.51895 435.84062,154.51895 C 441.11089,154.51895 446.38113,154.51895 451.6514,154.51895 C 456.1422,154.51895 459.33207,156.77766 464.45062,156.77766 C 468.96798,156.77766 473.48535,156.77766 478.0027,156.77766 C 479.03747,156.77766 480.01042,156.27571 481.01428,156.02476"
       id="path5446" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:40.85571289;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 144.59261,471.20627 C 137.8182,465.53372 110.22904,424.79638 101.67764,416.24496 C 90.999955,405.56728 81.285557,378.21467 76.079201,364.29527 C 68.635878,344.39514 58.68576,324.68347 54.998166,302.55791 C 52.480603,287.45246 47.137891,272.03533 42.951858,257.38422 C 39.105804,243.92308 35.03441,230.98473 31.658438,217.48084 C 26.98362,198.78159 18.87376,179.9087 15.094752,161.01374 C 11.89288,145.00441 6.8129105,127.91279 6.8129105,111.3227 C 6.8129105,92.415749 0.78975591,73.757748 0.78975591,54.855631 C 0.78975591,41.375629 -4.4805098,27.589036 -4.4805098,13.446416 C -4.4805098,5.5721089 -5.2333985,-1.5899461 -5.2333985,-9.1404231 C -5.2333985,-15.700368 -6.7391749,-21.423085 -6.7391749,-27.962773 C -6.7391749,-30.965571 -6.4455973,-32.901572 -5.9862862,-34.738815"
       id="path5448"
       sodipodi:nodetypes="csssssssssssc" />
    <path
       id="path5450"
       d="M 323.53767,190.22285 C 321.4675,194.57944 327.35474,181.39097 328.68732,176.84759 C 330.94928,169.13539 342.81931,157.94107 346.25821,146.21621 C 346.85807,144.17084 347.58673,142.15129 348.25098,140.11883 C 350.37321,133.62545 350.05953,125.48989 353.50366,120.81578 C 355.87009,117.6043 354.3113,122.92344 353.79105,124.01828 C 352.65715,126.4045 352.97308,128.88115 352.52398,131.12661 C 352.03337,133.57942 351.93101,136.18174 350.67486,138.82524 C 349.5222,141.25093 350.62275,145.27159 350.1814,147.47829 C 349.60712,150.34947 347.4953,153.76561 346.49042,155.88025 C 344.74877,159.54544 349.38655,154.86194 350.07833,153.40606 C 351.34295,150.74475 353.11089,148.29591 353.7693,145.00413 C 354.45247,141.58854 356.72334,138.7402 357.36445,135.53469 C 357.84252,133.14445 359.29307,130.20696 360.4734,127.72301 C 361.6134,125.32391 359.76159,132.82835 359.2542,135.3651 C 358.70754,138.09838 357.23302,140.83118 356.77521,143.12022 C 356.32986,145.34684 355.18152,147.10857 354.15249,149.27412 C 352.66387,152.40678 351.99433,155.0849 350.50941,158.20982 C 349.0857,161.206 347.42954,163.5566 346.81845,166.61177 C 346.25396,169.43416 343.92526,172.83874 343.12749,175.01371 C 342.14398,177.69515 340.98039,179.56297 340.55267,181.70135 C 339.64645,186.23232 341.28708,184.5925 341.47001,184.84731 C 342.61999,186.44934 344.03795,181.66061 345.49623,180.18164 C 345.86907,179.80348 344.37973,184.21739 344.08544,185.68871 C 343.48686,188.68152 341.34403,190.18876 340.25083,192.48942 C 339.60888,193.84031 338.96754,189.48489 337.39583,188.97926 C 336.86148,188.80738 334.2059,193.7887 334.04744,194.12219 C 333.04927,196.22271 333.41109,188.79819 333.52055,188.25093 C 334.00467,185.83059 334.41776,183.76508 334.83555,181.67635 C 335.17106,179.99889 337.69467,177.43333 338.08817,175.46594 C 338.63268,172.74339 339.57396,171.13029 340.03308,168.83481 C 340.51245,166.43806 342.18467,164.50692 342.02585,162.73746 C 341.79896,160.20879 338.49252,166.93383 336.88346,169.11744 C 335.74436,170.66331 335.82052,174.52711 334.9865,176.28229 C 333.60213,179.1956 331.55678,180.96179 330.52189,183.13952 C 329.45501,185.38471 329.05306,187.39058 328.57701,189.77064 C 328.1114,192.09857 326.28624,193.32232 325.2765,195.44729 C 324.07154,197.98308 323.01922,199.56305 322.02387,201.65773 C 320.83071,204.16866 320.28939,205.94233 319.40113,207.81163 C 318.28469,210.16111 317.78453,211.19813 316.05271,212.95454 C 314.31294,214.71902 312.57445,215.19797 311.39655,217.67675 C 309.54955,221.56369 308.31974,220.97897 310.08882,217.25606 C 311.04927,215.23486 312.95071,213.7724 313.38936,211.57941 C 313.81984,209.42706 316.70226,205.68633 317.80603,204.18843 C 319.24549,202.23489 320.04155,198.21479 320.91493,196.37675 C 322.1237,193.83306 323.92068,194.49094 323.53767,190.22285 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:10.70030689;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 173.95549,206.94031 C 180.54161,200.57623 189.67013,193.43628 195.78945,190.37662 C 199.95174,188.29548 206.05055,187.81134 210.84733,186.61216 C 217.77415,184.88046 223.76204,182.8477 231.17547,182.8477 C 237.22439,182.8477 243.66357,182.48428 249.24493,183.60057 C 255.40262,184.83211 260.31931,186.8695 266.5615,188.11793 C 271.46925,189.09949 276.39574,189.34122 280.8665,191.12951 C 284.55689,192.60566 293.69838,189.80379 297.43019,188.87085 C 303.99933,187.22854 306.8433,190.00132 312.48807,193.3882 C 318.59707,197.05361 322.94588,199.74644 329.80465,203.17585 C 338.02399,207.28549 346.53336,210.74604 355.40306,212.96346 C 361.30574,214.43913 362.35607,217.83472 364.4378,221.99819 C 367.39855,227.9197 369.18161,228.81954 376.48413,230.28004 C 382.4298,231.46917 387.54083,231.7858 393.8007,231.7858 C 394.80456,231.7858 395.80842,231.7858 396.81228,231.7858 C 400.98051,231.7858 406.89514,233.0628 410.36437,234.79742 C 414.63808,236.93426 420.32686,242.5012 423.16358,245.33792 C 426.76523,248.93956 430.42041,253.60391 434.45701,256.63134 C 437.66727,259.03903 441.19413,262.61558 444.24462,265.66607 C 448.49365,269.91509 452.56806,273.50145 456.29093,278.46529 C 458.39583,281.27181 460.03663,282.15459 460.8083,285.24133"
       id="path5452"
       sodipodi:nodetypes="csssssssssssssssssssc" />
    <path
       sodipodi:nodetypes="csssssssssssssssssssssssssssc"
       id="path5454"
       d="M 425.5185,52.00152 C 430.65788,46.052148 416.93653,65.235465 411.79714,71.184811 C 403.92336,80.299479 386.2101,99.904119 380.83208,109.89492 C 377.81257,115.5042 380.82184,112.75351 383.56098,110.03543 C 386.12457,107.49155 399.9928,92.299997 402.23943,89.214413 C 404.4736,86.145911 407.18647,83.588995 408.90212,80.401861 C 410.30558,77.794682 412.95452,75.710822 414.38553,74.054244 C 415.58781,72.662523 416.58964,70.979778 418.17031,70.039659 C 421.90899,67.816014 413.82334,77.637971 410.97967,80.929775 C 408.82452,83.4246 407.05162,87.684371 406.26255,90.789616 C 405.28872,94.622014 409.86306,83.591525 412.66982,80.806309 C 417.38415,76.12823 417.9529,71.491618 423.63668,68.111123 C 424.61974,67.526426 425.46165,66.731781 426.37412,66.042097 C 428.85124,64.169836 430.73201,61.947965 429.49046,66.833969 C 428.3142,71.462971 421.23765,77.85385 417.9957,81.606715 C 415.43603,84.569776 413.14856,87.584372 410.81358,90.28731 C 408.63719,92.806699 407.10357,95.681872 404.93425,98.193038 C 403.27849,100.10974 401.87348,103.20263 400.48959,104.80462 C 398.83285,106.72242 406.35469,99.502514 408.44651,97.426756 C 412.49372,93.410637 417.31708,90.091108 420.70757,86.166265 C 423.1306,83.361395 423.85238,80.326229 426.19953,77.609153 C 427.99978,75.525196 428.65376,72.235678 429.86937,69.694866 C 430.9858,67.361227 431.67407,64.768591 432.36842,62.035999 C 432.71385,60.676624 426.19264,64.027789 425.73129,64.219957 C 424.59975,64.691282 427.7009,58.644683 428.09837,57.080493 C 428.69742,54.723045 431.17646,53.830275 432.14709,52.027103 C 432.99802,50.446352 433.54414,48.705121 433.98626,46.965177 C 434.52327,44.851867 430.45616,49.585172 429.03076,51.235233 C 427.43362,53.084075 429.52012,53.915974 425.5185,52.00152 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5456"
       d="M 284.65989,261.9089 C 284.03452,261.95638 284.03452,261.95638 284.65989,261.9089 C 292.70044,261.29924 277.91422,278.7389 274.8886,287.31418 C 272.93879,292.84047 271.00028,297.47013 269.40992,302.74268 C 268.82584,304.679 272.14335,299.68672 272.49422,297.68319 C 273.05316,294.49175 274.7504,292.40911 275.91503,289.38111 C 276.9711,286.63529 278.55332,283.7651 279.84905,282.11244 C 281.75979,279.67518 284.53472,274.66515 285.97349,270.92443 C 286.65694,269.14739 288.14414,267.59295 289.07994,266.3994 C 292.03101,262.63521 288.46246,267.74967 286.86736,269.78425 C 285.41342,271.63878 284.41003,278.6311 284.51716,281.22229 C 284.58773,282.92965 285.74263,277.9711 287.57937,275.62827 C 289.11999,273.66319 291.47812,271.40306 292.09285,270.99657 C 294.10886,269.66356 289.55129,275.59956 289.09692,278.19412 C 288.60726,280.99012 286.91326,283.30631 286.12303,285.92617 C 285.28293,288.7113 284.96433,289.89993 284.51207,292.48247 C 284.15401,294.52717 282.73382,297.10585 281.96301,299.10991 C 281.30183,300.82906 280.69999,302.70156 280.77686,304.56171 C 281.00371,310.05035 287.71896,295.97221 288.66695,290.5589 C 290.21235,281.73468 295.81661,273.51713 297.45606,264.15572 C 298.00287,261.03303 300.78751,257.6556 301.83694,256.317 C 302.65972,255.2676 303.22675,253.98158 304.04952,252.93215 C 305.9862,250.46184 302.30625,259.24046 301.14189,262.2677 C 300.05817,265.08551 299.5825,268.04528 298.68125,271.03323 C 297.78532,274.00348 296.29656,276.72218 295.75156,279.83422 C 295.22656,282.83199 293.87348,287.67699 295.86203,282.50675 C 297.6167,277.94462 298.37911,273.57474 299.99994,268.78847 C 301.25401,265.08529 302.97445,261.61826 304.78361,259.31065 C 306.42894,257.21208 306.95755,254.27523 308.24859,252.07758 C 310.00985,249.07947 310.32854,244.30192 311.55895,241.10291 C 312.86349,237.7111 313.62776,234.54014 314.91348,231.19729 C 315.29342,230.20937 315.05128,229.0101 314.78091,227.99024 C 313.96853,224.92601 312.00695,233.66566 310.42206,236.3635 C 308.81719,239.09533 307.25699,241.56052 306.01904,243.66769 C 304.85377,245.65132 303.25308,247.30753 302.48781,249.2973 C 301.67497,251.41059 300.07497,252.61098 299.40347,254.35677 C 298.71994,256.13382 297.23285,257.68824 296.29705,258.88181 C 295.35312,260.08586 294.71345,264.62086 295.42528,260.55643 C 295.908,257.8002 296.31994,255.86269 297.03628,254.00011 C 297.25682,253.42672 292.77512,256.72095 292.45652,257.02827 C 290.51765,258.89854 289.97796,261.18843 287.0271,262.26562 C 286.26284,262.54459 285.44895,262.02779 284.65989,261.9089 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       style="fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 157.87429,82.705467 C 156.7818,82.726794 155.15855,85.445303 155.06242,87.873224 C 153.51623,95.327451 153.55074,103.01458 151.71858,110.44419 C 151.71201,110.52098 151.72555,110.59545 151.71858,110.67217 C 151.73655,110.69635 151.77709,110.7231 151.79458,110.82417 C 151.74756,110.93088 151.63455,111.29834 151.56658,111.50814 C 151.56507,111.52577 151.56807,111.566 151.56658,111.58414 C 151.56213,111.63856 151.57084,111.7532 151.56658,111.81213 C 151.40474,114.05265 151.3998,119.30652 152.02255,122.90762 C 152.25954,124.27782 151.82852,126.74231 151.64257,128.68335 C 151.4124,131.08695 151.20381,132.99914 150.42664,133.69912 C 149.71732,134.33797 148.93626,135.02267 148.07074,135.67502 C 146.67008,141.5331 143.73318,146.98055 144.72691,153.30621 C 145.34652,162.00758 144.06502,170.57712 143.66294,179.22101 C 144.84433,187.24224 145.96097,195.42811 144.72691,203.5399 C 143.97222,211.97266 142.23034,220.24539 142.447,228.77073 C 141.781,236.70701 142.36564,244.74109 141.00307,252.63363 C 139.27052,265.10015 140.45587,277.67517 140.77509,290.17589 L 140.85107,290.55588 C 141.29676,290.27884 142.53564,290.56843 142.675,288.65598 C 143.25391,280.90868 145.4648,273.2366 144.95488,265.40103 C 145.61471,257.36322 148.9925,249.59414 147.76676,241.38614 C 146.17477,233.82254 149.15721,226.80013 150.12265,219.49916 C 151.10049,213.83278 151.38238,208.1222 151.41459,202.39995 C 150.37739,201.29424 148.87565,199.83358 148.60273,197.23219 C 147.95575,191.06589 147.95529,180.80099 147.76676,177.32111 C 147.66508,175.44432 149.42655,173.75549 150.65462,172.68531 C 150.39507,166.01965 150.57196,159.36227 152.17456,152.85023 C 153.75566,145.74496 157.17063,139.02149 156.50635,131.41921 C 156.72133,123.93425 157.65268,116.5216 157.6463,109.00026 C 157.53373,101.37988 158.29904,93.861752 158.78625,86.277303 C 159.01881,83.705702 158.52979,82.692676 157.87429,82.705467 z M 140.85107,290.55588 C 140.6346,290.69044 140.61039,290.93764 141.00307,291.69583 L 140.85107,290.55588 z "
       id="path5460" />
    <path
       style="fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 206.37521,182.62138 C 205.25503,182.35467 203.30137,183.22716 202.46429,183.85497 C 200.68748,185.39381 199.07337,184.53701 197.13046,185.35278 C 193.26511,187.59148 189.13743,189.41384 185.15428,191.44593 C 182.19468,193.13054 181.09558,195.30956 180.49445,197.34561 C 181.2673,198.11845 182.30476,198.85876 183.2633,198.3795 C 185.38106,197.43833 186.34017,195.73554 187.46548,193.96723 C 188.06718,191.71321 189.4547,191.19981 191.45752,190.39537 C 194.7368,190.05043 198.0422,190.19438 201.33262,189.97517 C 203.64718,189.14567 205.1866,187.15153 207.00558,185.56289 C 208.13346,184.43499 207.15588,183.59718 206.37521,182.62138 z "
       id="path5462"
       sodipodi:nodetypes="ccccccccccc" />
    <path
       style="fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 214.98968,180.94051 C 213.56316,181.29714 213.07674,181.81023 212.46835,182.62138 C 211.58331,183.80146 213.23503,184.95101 214.14925,184.72246 C 215.78798,183.73177 217.57252,183.18426 219.40193,182.62138 C 222.97982,182.39366 226.11677,182.38723 229.27704,184.09213 C 231.45273,184.74388 233.73108,184.22436 236.00049,184.30223 C 238.37563,185.00427 240.67017,185.29378 243.14417,185.35278 C 247.11497,184.76675 251.13144,184.89319 255.12035,185.14267 C 256.08223,185.14267 256.93879,185.77299 258.06186,185.77299 C 260.10486,186.259 262.13418,186.88957 264.15503,187.45386 C 265.07545,187.91407 265.79352,188.29429 267.09654,188.29429 C 268.46964,188.29429 269.66063,188.22736 270.87847,188.71452 C 272.01475,189.16902 273.30718,189.05905 274.45031,189.34485 C 275.30278,189.55794 276.28711,189.55494 277.39182,189.55494 C 278.4398,189.55494 279.23781,188.96963 279.70301,188.50441 C 281.72165,186.38225 280.1508,187.04357 278.51295,185.20931 C 266.09125,183.31851 258.30252,180.38615 247.87321,178.47096 C 241.08584,177.7774 236.75331,179.94032 228.47735,178.32355 C 226.58255,178.32355 224.09069,178.48136 222.38417,179.16397 C 219.19043,178.78476 217.92478,180.57922 214.98968,180.94051 z "
       id="path5464"
       sodipodi:nodetypes="csccccccccsssscccccc" />
    <path
       style="fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 284.95574,188.50441 C 284.63344,191.15028 286.58236,191.7468 287.68715,192.70656 C 289.76851,192.70408 291.51647,191.87658 293.36007,191.02569 C 294.39541,190.76687 295.86895,191.02569 296.9319,191.02569 C 299.28545,190.5095 301.68172,190.27895 304.07559,189.97517 C 306.16922,191.41675 307.85864,193.05984 310.16874,194.17733 C 312.97146,194.97223 313.86115,193.7654 314.16082,191.86613 C 314.16082,190.52626 313.22459,189.66925 312.47995,188.92461 C 311.39618,187.84087 310.0333,187.45386 308.69797,187.45386 C 305.98754,185.73796 302.94527,184.96049 299.87344,184.30223 C 297.11735,184.15553 294.50108,184.75497 291.8893,185.56289 C 291.19874,185.73553 289.92225,186.68954 289.57811,187.03365 C 289.18188,187.4299 287.01665,187.30632 286.42651,187.45386 C 286.0669,187.54376 285.22897,188.34045 284.95574,188.50441 z "
       id="path5466"
       sodipodi:nodetypes="cccccccscccssc" />
    <path
       style="fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 201.4696,37.297425 C 201.33091,38.328083 199.5931,39.98831 199.20369,41.54603 C 198.9248,42.661588 197.20193,44.133365 196.65451,45.228153 C 196.08764,46.361899 194.9343,47.521836 194.10536,48.627032 C 193.07479,50.001146 192.16189,51.664217 191.55618,52.875638 C 190.94984,54.088323 190.98972,56.043219 190.98972,57.407485 C 190.98972,58.456918 189.87278,61.05753 190.98972,58.823695 C 191.63638,57.530368 191.78746,56.199225 192.12266,54.858332 C 192.51125,53.304112 193.39958,52.021266 194.10536,50.609727 C 194.93517,48.950084 195.26806,47.967456 196.65451,46.927605 C 197.83014,46.0459 198.55966,45.872189 199.48695,44.94491 C 200.74497,43.686895 201.58672,43.577728 202.31933,42.112516 C 202.89831,40.954548 203.47501,39.472531 203.73554,38.430393 C 204.01271,37.321646 205.08509,36.147871 205.43497,34.748272 C 205.80802,33.256187 206.4701,32.896073 207.41765,31.632609 C 208.41459,30.303388 209.61786,29.715649 210.53329,28.800213 C 211.51951,27.814035 212.85857,27.041399 213.93219,25.967794 C 214.76773,25.132294 215.75293,22.892817 216.19811,22.002431 C 216.7807,20.837264 216.72748,19.035186 217.04786,17.753826 C 217.21838,17.071583 214.43706,18.067878 213.93219,18.320308 C 213.20808,18.682368 212.47395,20.953557 212.23274,21.43597 C 211.65846,22.584527 210.28853,23.367376 209.40036,24.551609 C 208.84297,25.294769 207.86532,26.771898 207.41765,27.667246 C 206.68077,29.141042 205.71822,29.053251 205.71822,31.066125 C 205.71822,31.593212 203.95612,33.394732 203.73554,33.615304 C 202.94043,34.41041 201.99515,35.983597 201.4696,37.297425 z "
       id="path5468" />
    <path
       style="fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 224.87035,8.5421979 C 223.75922,9.6533269 227.37672,6.5766249 228.83569,5.9930449 C 230.35275,5.3862399 231.1471,4.6362939 232.5178,4.2935929 C 234.07001,3.9055369 233.95938,7.2273979 234.21729,8.2589569 C 234.72696,10.29773 234.42238,10.886271 233.36753,11.941078 C 232.71579,12.592823 230.53419,10.666014 230.2519,10.524893 C 229.07031,9.9340889 227.24698,10.580266 226.00331,9.9584079 C 225.46258,9.6880549 225.24796,9.0142759 224.87035,8.5421979 z "
       id="path5470" />
    <path
       style="fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 236.76752,-0.33005808 C 236.67227,-0.36940708 237.12869,2.9082189 237.38681,3.7608629 C 237.93982,5.5873329 238.80607,6.2271379 240.48338,6.5733899 C 241.94914,6.8759659 244.14403,6.5847709 245.4378,6.3177019 C 247.15029,5.9642019 248.06872,5.1358779 249.46326,4.2722409 C 250.60331,3.5662159 250.72515,2.4056209 251.01153,1.4597139 C 251.3991,0.17961592 252.60775,-0.66490408 253.17909,-1.6084781 C 254.0707,-3.0809131 251.39192,-3.4475921 250.39221,-3.6539631 C 248.67193,-4.0090661 246.83334,-3.6863551 245.4378,-3.3982741 C 243.29856,-2.9566681 240.9255,-2.4302371 239.55443,-1.8641661 C 238.07943,-1.2552221 238.64962,-0.95169708 236.76752,-0.33005808 z "
       id="path5472" />
    <path
       id="path5474"
       d="M 241.47304,384.21047 C 240.33579,384.49478 237.21256,390.07862 235.57819,391.71299 C 233.39036,393.90081 232.35772,398.68643 230.75515,400.8232 C 228.58248,403.72007 226.32632,405.92958 224.8603,408.86164 C 223.43262,411.71697 220.4889,414.15424 218.42956,416.90005 C 216.57009,419.37935 213.46158,423.47571 217.35776,419.57952 C 218.34429,418.593 219.50135,417.7932 220.57313,416.90005 C 223.34451,414.59059 224.89399,412.57921 227.53975,409.93342 C 229.56024,407.91293 230.82361,405.01908 232.36282,402.96679 C 233.5455,401.38988 234.41281,397.25913 235.0423,396.00016 C 237.04982,391.9851 237.66093,394.6725 235.57819,398.14372 C 233.97067,400.82296 232.44541,404.90391 231.29103,407.78983 C 229.58634,412.05159 224.8464,416.02545 222.18082,419.57952 C 220.20363,422.21578 218.76979,423.94895 216.82186,426.54615 C 214.71285,429.35818 213.68967,431.28605 211.46291,433.51281 C 209.69649,435.27924 208.61066,437.60962 207.71165,439.40766 C 206.55108,441.72879 204.5029,443.66832 203.96038,445.8384 C 203.32195,448.39214 201.77434,450.74636 200.74502,452.80503 C 199.78754,454.71999 198.52471,456.86324 198.06554,458.69987 C 197.00547,462.94013 195.69151,461.6098 199.13733,458.16398 C 201.21819,456.08312 203.01426,453.21525 205.03216,451.19733 C 207.71353,448.51597 208.54669,446.15405 210.39113,443.69481 C 213.06485,440.12983 214.61189,436.79457 217.35776,434.04869 C 220.60153,430.80493 223.50681,426.7855 226.46797,423.33079 C 229.80705,419.43521 233.13896,415.58801 236.11409,412.6129 C 238.00432,410.72267 238.47166,408.11174 239.86535,406.71805 C 242.58101,404.00239 235.14548,414.35955 233.97052,415.82827 C 229.79377,421.0492 227.36965,427.25218 222.71672,431.90511 C 220.30535,434.3165 218.70841,437.96404 216.82186,440.47944 C 214.77833,443.20418 213.28217,444.99207 212.53472,447.98196 C 211.99146,450.15495 215.97847,443.77394 216.82186,442.08713 C 218.08844,439.55396 220.35283,436.94848 222.71672,434.58459 C 224.84346,432.45785 227.63518,429.13023 229.14746,427.61796 C 231.52796,425.23746 232.80127,422.98982 233.97052,420.65132 C 234.96088,418.67056 236.7444,416.71123 237.72177,414.75649 C 238.81139,412.57725 238.84094,410.95783 240.40126,409.39752 C 242.47936,407.3194 243.08823,406.16713 244.15252,404.03857 C 245.42782,401.48797 247.77511,400.2873 243.08074,400.2873 C 241.10013,400.2873 238.29418,405.07385 237.18589,406.18215 C 235.33262,408.0354 233.19538,410.78827 231.82693,412.6129 C 229.31005,415.96873 231.78392,411.09124 232.36282,409.93342 C 233.84464,406.96977 235.44726,405.77717 237.72177,403.50269 C 239.7997,401.42475 240.17885,399.43793 242.00894,397.60784 C 244.74424,394.87251 243.71779,392.88596 242.54482,391.71299 C 241.88317,391.05131 240.44326,392.0808 241.47304,387.96172 C 241.81141,386.60823 242.78446,384.47274 244.15252,384.74636 C 245.04568,384.92498 242.36619,384.38909 241.47304,384.21047 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5476"
       d="M 107.14849,455.15107 C 106.43724,453.628 105.38173,450.11176 103.69805,447.86685 C 100.26854,443.29416 96.044105,439.37762 92.963439,434.44857 C 90.438803,430.40913 88.675337,425.94331 85.295837,422.56381 C 83.669295,420.93727 81.920993,418.5761 85.295837,420.26355 C 87.401957,421.3166 89.668648,423.86958 91.046546,425.24747 C 92.353719,426.55465 93.158641,428.50972 94.496969,429.84803 C 95.846949,431.19803 96.063005,432.5642 97.18062,433.68183 C 98.681074,435.18228 99.319644,436.97098 100.63103,438.28237 C 101.16864,438.81999 100.33952,432.62353 96.413849,428.69788 C 91.803402,424.08745 89.01714,417.85077 84.529088,413.36273 C 81.93544,410.76904 80.035642,407.33575 77.628268,404.92835 C 75.181379,402.48146 74.132311,399.85337 72.64434,396.87738 C 71.409373,394.40749 70.590921,391.83925 69.193923,389.97656 C 67.964653,388.33754 67.07964,387.66491 66.126875,385.75939 C 64.670612,382.84683 63.857534,379.74907 63.059851,376.55829 C 62.429238,374.03586 62.160174,371.80948 61.526326,369.27407 C 60.999239,367.16568 60.40902,366.33833 59.992802,364.67353 C 59.271894,361.78988 62.886652,369.90461 63.826601,372.72448 C 65.791762,378.61994 69.813738,383.31217 74.177858,387.67629 C 76.681857,390.18029 77.327958,393.59313 78.778401,396.494 C 79.881727,398.70068 80.436303,400.95998 81.462064,403.01146 C 82.23298,404.55328 82.638003,405.79836 82.995571,407.22866 C 83.365531,408.70849 85.431635,409.80047 86.062618,411.06243 C 87.761558,414.4603 86.665286,408.87255 86.446003,407.9954 C 85.9729,406.10305 84.964426,404.75279 84.529088,403.01146 C 84.526635,403.00159 89.716579,409.37276 92.963439,419.1134 C 94.515175,423.7686 99.629824,428.46345 103.31469,432.14829 C 105.37576,434.20941 107.65765,436.87465 109.44876,438.66577 C 109.99747,439.21447 110.42933,442.58808 110.5989,443.26631 C 111.42103,446.55481 110.40872,445.18523 108.682,442.88293 C 107.21713,440.92976 105.99833,440.08377 105.99833,443.26631 C 105.99833,445.5534 108.33988,447.566 109.06538,449.017 C 109.91452,450.71527 111.08523,452.57036 112.13241,453.61754 C 113.26002,454.74516 113.88543,456.13732 114.81607,457.06798 C 116.0264,458.27828 116.55927,459.57791 117.49973,460.51839 C 118.76699,461.78562 118.64487,463.56546 118.64986,463.58542 C 119.17768,465.69669 115.20476,460.90708 113.66593,459.36825 C 112.4209,458.12321 110.91038,457.37945 109.83213,456.3012 C 108.68635,455.15542 109.82357,455.68608 107.14849,455.15107 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5478"
       d="M 31.239352,279.56327 C 31.076609,282.38642 35.073149,287.56666 35.073149,291.44804 C 35.073149,294.7774 36.606649,298.04985 36.606649,301.41592 C 36.606649,304.39862 37.808391,308.13975 38.523561,311.00041 C 39.175793,313.60929 39.673697,316.71685 39.673697,319.43474 C 39.673697,321.42793 41.434409,324.56071 41.973972,326.71896 C 42.685639,329.56565 44.557489,333.03613 45.80777,335.53666 C 46.932689,337.78653 47.79438,339.33562 49.258182,341.28737 C 50.52629,342.97819 51.566846,344.77132 51.941843,346.27131 C 52.3718,347.99119 53.304016,348.99566 53.85873,350.10511 C 54.305103,350.99783 55.069883,351.69963 55.775641,352.40539 C 57.520836,354.15058 53.690589,347.89895 53.091979,345.50454 C 52.643734,343.71155 51.653081,341.4766 50.791705,339.75386 C 49.809296,337.78903 49.218907,336.22486 48.491431,334.76991 C 47.662037,333.11115 47.342169,331.70642 46.957908,330.16937 C 46.456234,328.16267 45.424384,327.64156 45.424384,325.56881 C 45.424384,324.00346 44.621203,321.58935 44.274246,320.20151 C 43.773375,318.19802 43.988304,316.75746 43.507497,314.83418 C 43.043468,312.97813 43.124109,311.50874 43.124109,309.46687 C 43.124109,307.437 43.13369,305.67137 42.740723,304.09954 C 42.144545,301.7148 43.294682,308.99901 43.890859,311.38377 C 44.672809,314.51156 45.604732,317.65275 46.191157,320.58489 C 46.548986,322.37402 47.815464,324.98364 48.491431,326.33557 C 48.90354,327.15981 49.373331,327.98422 50.024931,328.63584 C 51.939703,330.55062 47.998051,323.5953 47.341294,320.96825 C 46.644145,318.17967 46.57452,315.56267 46.57452,312.5339 C 46.57452,309.97689 46.191157,308.21633 46.191157,306.01646 C 46.191157,303.87679 44.818697,302.12143 43.890859,300.26575 C 43.066765,298.61754 42.601034,297.44243 41.590585,296.43198 C 41.041319,295.88269 40.372502,298.86817 39.673697,300.26575 C 38.572685,302.46778 39.895341,303.45259 38.906949,299.49901 C 38.353305,297.2845 37.454479,295.60607 36.990037,293.74831 C 36.412511,291.43825 35.456512,290.86232 35.456512,288.38099 C 35.456512,286.77374 34.597715,284.94576 34.306375,283.78045 C 33.813651,281.80952 32.958283,281.71196 31.239352,279.56327 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5480"
       d="M 13.220522,221.28959 C 15.303676,224.37466 14.616936,232.69025 17.437682,237.39153 C 18.80236,239.66598 18.352025,243.7325 18.971207,246.20926 C 19.539928,248.48418 20.358988,249.51396 21.654867,250.80981 C 23.499723,252.65469 23.461299,252.1744 22.805005,248.89292 C 22.245743,246.09665 20.809592,243.21153 20.121344,240.45858 C 19.656901,238.60083 18.958439,236.19027 18.587819,234.70787 C 18.093246,232.72955 18.204457,230.26432 18.204457,228.19043 C 18.204457,226.44937 19.754104,228.58187 20.504731,228.95718 C 21.807955,229.60882 19.124318,226.15841 17.82107,225.50677 C 16.659649,224.92605 16.164224,222.71314 15.904158,221.67298 C 15.684996,220.79632 14.106604,221.46682 13.220522,221.28959 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5482"
       d="M 138.50665,361.94519 C 138.0894,357.93323 130.63243,346.29117 123.81148,339.47022 C 118.31443,333.9732 116.02625,326.48217 114.30281,319.58851 C 112.55185,312.58465 110.84513,304.21843 110.84513,297.11355 C 110.84513,290.071 118.43213,317.28132 120.35376,323.0462 C 121.94098,327.80784 129.52905,348.17652 126.40472,332.55483 C 124.92864,325.17437 120.35376,306.68925 120.35376,304.89332 C 120.35376,298.78775 123.3755,316.88063 126.40472,322.18178 C 131.01951,330.25764 134.21878,340.3689 139.37105,345.52116 C 141.46503,347.61515 141.3641,353.49337 141.96432,355.89424 C 143.09116,360.40165 139.55636,344.91919 135.04895,343.79231 C 129.88803,342.5021 137.48399,351.41388 137.6422,351.57212 C 142.72911,356.659 137.51126,361.44751 141.96432,363.67402"
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5484"
       d="M 164.34611,29.508525 C 162.93366,31.551092 162.56953,36.378244 161.82971,40.077317 C 161.18049,43.323401 161.32646,46.740325 161.32646,50.142803 C 161.32646,53.774852 160.642,56.906759 159.81661,60.208315 C 159.14658,62.888401 159.31334,65.887599 159.31334,68.764012 C 159.31334,74.171802 159.81661,73.414244 159.81661,68.260734 C 159.81661,64.674477 160.97487,59.601461 161.82971,56.182105 C 162.56319,53.248252 162.60619,50.718018 163.84283,47.626431 C 164.93349,44.899751 164.61901,42.047852 165.85592,39.574038 C 166.66395,37.957974 166.59143,43.329164 167.86901,44.60678 C 170.59734,47.335116 167.86901,36.88989 167.86901,33.031456 C 167.86901,26.628124 170.41096,15.868966 172.90178,10.887341 C 173.73045,9.2300089 173.40506,7.2042709 173.40506,5.3513169 C 173.40506,3.1640039 170.86031,8.9309599 169.88213,10.887341 C 168.42431,13.80298 168.072,15.611454 167.36576,18.436455 C 166.74783,20.908056 166.86399,23.461612 166.35919,25.985595 C 165.79604,28.801406 166.0491,31.755444 165.35264,34.54127 C 164.93771,36.201009 164.6816,31.186114 164.34611,29.508525 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5486"
       d="M 261.47939,320.21062 C 260.91406,320.99679 257.99245,329.00537 256.01677,332.95674 C 254.51103,335.96821 253.96251,338.88616 252.37498,342.06115 C 250.84946,345.11223 250.07999,347.59941 249.34022,350.55859 C 248.63252,353.38935 252.1326,345.33834 254.19589,343.27508 C 256.62133,340.84961 257.7094,339.80429 259.65852,337.20548 C 261.1849,335.1703 262.23788,331.74367 262.69333,329.92198 C 263.68568,325.95247 261.8648,338.09165 260.87242,342.06115 C 259.83265,346.22026 258.77096,348.41133 256.62372,350.55859 C 255.30475,351.87754 253.43437,352.99769 252.98197,354.80728 C 252.26751,357.66516 258.53358,352.37946 261.47939,352.37946 C 265.55446,352.37946 266.72355,352.64648 267.54898,349.34466 C 268.49185,345.57326 268.51545,344.24737 265.12115,345.09595 C 262.79654,345.6771 261.47939,350.99493 261.47939,346.30986 C 261.47939,343.68519 261.98082,340.66233 262.69333,337.81243 C 263.40764,334.95511 265.14739,333.45872 265.7281,331.13587 C 266.36996,328.56841 269.53597,325.45177 271.19074,323.24542 C 273.02887,320.79456 273.71378,318.1993 274.83251,315.96189 C 278.04459,309.53769 274.53389,312.38991 271.19074,316.56886 C 268.79967,319.55771 265.74891,322.02109 265.7281,322.0315 C 263.26679,323.26215 266.92529,316.60235 268.15595,314.14102 C 271.37032,307.71229 266.3397,313.52789 264.51419,315.96189 C 263.23515,317.66731 263.61175,317.54517 261.47939,320.21062 z "
       style="fill:#4e492c;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer16"
     inkscape:label="front branch shadow"
     style="display:inline">
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 198.58266,348.89442 C 198.3054,349.44889 196.76794,351.41625 196.47729,352.57875 C 196.17613,353.78349 194.96674,355.40517 194.37197,355.99995 C 193.10945,357.26245 192.97023,358.19119 191.7403,359.42113 C 190.78767,360.37375 189.68263,361.42492 188.84545,362.0528 C 187.63383,362.9615 186.62227,364.01281 185.68742,364.94765 C 184.7725,365.86258 184.53408,366.62733 183.84525,367.31617 C 183.13195,368.02947 182.3967,368.56678 181.73991,368.89516"
       id="path2913" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 207.79354,357.84211 C 208.31986,359.94747 206.6401,362.03014 206.2145,364.15814 C 205.90773,365.69206 205.55449,367.84671 204.89869,369.15834 C 204.06975,370.81617 204.18566,374.03929 203.846,375.73752 C 203.52282,377.35339 203.58283,379.03587 203.58283,380.73771 C 203.58283,382.21665 203.846,383.49948 203.846,385.21158 C 203.846,386.54681 204.10918,388.02097 204.10918,389.42224 C 204.10918,391.14859 203.98203,392.56252 203.58283,394.15927 C 203.25487,395.47109 202.79333,396.94074 202.79333,398.36996 C 202.79333,398.50229 202.58372,399.41798 202.53017,399.68578"
       id="path3888" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 295.95472,371.52683 C 296.72516,371.14163 299.03718,369.45927 300.16541,368.89516 C 301.29186,368.33194 301.9441,367.87423 303.06025,367.31617"
       id="path3894" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:2.67507672;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 295.16521,371.79001 C 295.94932,371.02671 298.21783,370.36894 299.90223,369.94783 C 302.12254,369.39275 304.05757,368.38266 306.21826,367.84249 C 308.05149,367.38418 309.72679,366.35141 311.48161,365.47399 C 312.95422,364.73769 313.84178,363.89913 315.42913,363.10548 C 316.70442,362.46783 319.39755,362.62758 320.95564,362.31598 C 322.547,361.9977 324.39987,362.17862 325.95585,361.78962 C 327.47033,361.411 329.16335,361.38251 330.69285,361.00014 C 330.86306,360.95757 331.04374,361.00014 331.2192,361.00014 C 332.04383,361.00014 334.03947,359.98476 334.64039,359.6843 C 336.04966,358.97966 338.50129,358.63163 340.1669,358.63163 C 341.73442,358.63163 343.89331,358.42373 345.16708,358.10529 C 345.33728,358.06273 345.51797,358.10529 345.6934,358.10529 C 346.9008,358.10529 348.33451,357.84211 349.64093,357.84211 C 349.81639,357.84211 349.99183,357.84211 350.16729,357.84211"
       id="path3898" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:2.67507672;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 282.79633,376.0007 C 284.21833,376.0007 285.77396,375.30139 287.53335,374.42167 C 289.02919,373.67377 291.08116,373.73211 292.53354,373.36902 C 294.18838,372.95529 295.77194,372.66539 297.53371,373.10585 C 298.86384,373.43837 300.35721,373.28537 301.74441,373.63219 C 302.84332,373.90692 304.43575,373.91028 305.42878,374.15853 C 308.07094,374.81908 310.88376,373.61789 313.58695,374.15853 C 315.70996,374.58313 318.2531,373.36902 320.42931,373.36902 C 321.97377,373.36902 324.23171,372.84267 326.219,372.84267 C 327.8863,372.84267 329.20258,372.68891 330.69285,372.31635 C 332.31029,371.91199 334.31694,372.56444 335.42987,372.84267 C 336.94338,373.22106 338.11047,373.91981 339.11424,374.42167 C 340.41774,375.07346 341.43352,374.91112 342.53542,375.73752 C 343.53985,376.49087 344.81173,377.27044 345.95659,377.84286 C 347.22725,378.47821 347.95684,378.5403 349.37778,378.89555 C 350.43401,379.15961 351.23561,379.95214 352.27262,380.21138"
       id="path3900"
       sodipodi:nodetypes="csssssssssssssss" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:0;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 352.27262,379.1587 C 353.21935,379.23767 355.98784,378.89555 357.79913,378.89555 C 360.88636,378.89555 363.04576,379.17544 365.16782,377.05337 C 367.35062,374.87059 367.91541,371.02138 369.90486,368.36883 C 371.33219,366.46571 371.28018,363.77602 372.27336,361.78962 C 372.76736,360.80165 373.3906,359.95241 373.58921,359.15795"
       id="path3904" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 352.79895,380.73771 C 353.87256,381.32756 355.60822,381.52721 357.53597,381.52721 C 360.50424,381.52721 363.57793,380.14831 366.48367,379.42187 C 370.21891,378.48806 373.8688,372.28348 375.43139,369.15834 C 376.84875,366.32359 376.34889,362.54125 378.06305,359.6843 C 378.2436,359.38342 378.06305,358.98251 378.06305,358.63163"
       id="path3906" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 203.846,345.21005 C 204.77979,343.65377 212.62738,342.57839 214.37272,342.57839 C 219.30516,342.57839 225.34713,341.15063 230.16279,339.94671 C 234.67453,338.81876 238.68615,338.63087 243.32118,338.63087 C 244.43344,338.63087 244.02397,338.49032 244.637,338.36769"
       id="path3908" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 178.31874,305.20856 C 180.31442,305.20856 184.09174,303.54462 186.74009,303.10323 C 187.92019,302.90654 189.60272,302.46141 190.42446,302.05053"
       id="path3912" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 193.58246,332.05167 C 194.90755,332.05167 198.02145,332.05167 200.16166,332.05167 C 202.03642,332.05167 205.12417,332.19268 206.74084,331.78851 C 207.88341,331.50287 208.67111,331.50334 209.63569,331.26219"
       id="path3916" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 320.89558,361.02731 C 323.08043,359.38867 325.71234,353.02681 328.32435,350.41479 C 330.44642,348.2927 332.5465,347.25387 334.16123,345.63915 C 335.05845,344.74192 341.73688,344.62527 343.18188,344.04728 C 343.85899,343.77641 344.5969,343.69351 345.30438,343.51664"
       id="path3920" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 347.00853,357.9354 C 348.50009,357.69701 350.15657,356.47109 351.63874,354.98888 C 352.93241,353.69523 355.37614,352.90971 357.11084,352.04237 C 358.89338,351.15108 360.75876,350.42887 362.5829,349.51679 C 364.14424,348.73612 365.80797,348.44747 367.4236,348.04354 C 369.02684,347.64272 370.43704,346.85251 371.84336,346.14934 C 373.15837,345.49184 374.33398,344.90405 375.63172,344.25518 C 376.78279,343.67965 378.21644,343.17919 379.20962,342.78192 C 380.38287,342.31261 381.27743,342.0637 382.36661,341.51914 C 383.51559,340.94465 384.52259,339.9278 385.73403,339.62496 C 386.75445,339.36985 388.21452,338.40727 388.68053,337.94124 C 389.37867,337.24309 391.1944,337.3654 392.25845,337.09937 C 393.37015,336.82145 393.67164,336.32516 394.78401,336.04704 C 396.03242,335.73497 396.58339,335.72092 397.52005,334.78427 C 398.06237,334.24199 399.0529,333.80737 399.6247,333.52148"
       id="path3934" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 180.81025,324.41408 C 181.87428,327.69201 178.64526,332.21437 177.09586,336.08787 C 175.73373,339.49321 174.24133,341.66907 173.38147,345.10852 C 173.26014,345.59386 172.67398,345.81601 172.32022,346.16978"
       id="path3938" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 174.97336,313.80157 C 174.0798,317.37579 172.22724,320.79269 169.13646,323.88347 C 166.8499,326.17003 164.89114,329.721 163.83021,331.84287 C 163.30962,332.88407 163.16486,334.23478 162.76896,335.02663"
       id="path3940" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:5.10696411;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 79.991266,361.55794 C 79.141274,363.25794 73.007269,364.21106 69.90936,364.21106 C 66.233829,364.21106 63.286381,366.33355 59.296821,366.33355 C 56.826144,366.33355 51.930145,367.89439 49.745556,368.98669 C 46.931497,370.39374 42.900643,371.36123 39.663655,372.17045 C 36.320003,373.00638 33.490452,373.44843 30.112389,374.29296 C 26.438634,375.2114 22.968963,376.60946 19.49985,377.47671 C 16.68477,378.18051 13.956946,379.59921 11.009838,379.59921 C 8.1907939,379.59921 5.1479914,380.00344 2.5198007,380.66049 C 0.012476071,381.2873 -0.75938061,382.30007 -2.7864566,383.31361 C -4.6484558,384.24461 -6.4816377,385.95715 -8.6233516,387.028 C -10.7943,388.11348 -12.373932,389.16861 -14.460224,390.21176 C -19.821467,392.89238 -13.669229,389.42073 -15.521477,391.27301"
       id="path3942" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:4.62058735;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 41.984477,371.2432 C 40.422063,374.01137 37.325857,382.68297 35.418649,386.49736 C 33.815523,389.70361 32.123197,392.78097 31.173642,396.57927 C 29.907261,401.64476 26.538366,406.77065 24.806108,411.96743 C 23.033481,417.28531 21.963694,422.12389 21.091739,427.35558 C 20.359304,431.75013 18.72274,435.48617 17.907985,439.55999 C 17.410957,442.04514 16.672878,445.74455 15.785458,447.51939 C 14.653001,449.7843 15.254844,454.36785 15.254844,457.07067 C 15.254844,459.57596 13.618816,462.4211 12.07109,463.9688 C 11.894219,464.14569 11.717324,464.32257 11.540452,464.49944"
       id="path3948"
       sodipodi:nodetypes="cssssssssc" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 31.173642,399.2324 C 33.40485,399.86611 35.633213,402.21314 36.4799,405.59992 C 36.978509,407.59437 39.785638,411.55877 41.255544,413.02868 C 43.426417,415.19956 44.741218,416.0981 47.092415,417.27371 C 47.67157,417.56327 48.839313,417.71042 49.214918,417.80432"
       id="path3955" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 25.867359,410.90617 C 26.077305,411.74593 29.32852,416.05168 30.643004,417.80432 C 32.405247,420.15399 34.412041,422.09034 36.4799,423.64122 C 38.082684,424.8433 39.159086,426.85104 40.194268,427.88622"
       id="path3960" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 21.091739,424.70246 C 21.366422,424.90848 12.746961,425.99271 9.4179493,426.82497 C 6.6372557,427.52015 5.2868036,428.94747 1.9891873,428.94747 C 1.6354444,428.94747 1.2816782,428.94747 0.92793531,428.94747"
       id="path3962" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 26.397997,402.94678 C 20.703586,404.08568 14.794731,404.00803 8.8873354,404.00803 C 7.2551733,404.00803 2.771307,406.53542 1.4585497,407.1918 C -0.72752347,408.28484 -2.4069119,410.14708 -3.317071,411.96743 C -4.2587467,413.85077 -8.2746193,414.66605 -10.215217,415.15118 C -12.660774,415.76258 -16.310648,416.54239 -19.235868,417.27371 C -19.750651,417.4024 -20.29712,417.27371 -20.827758,417.27371"
       id="path3966" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 24.806108,375.3542 C 22.503766,376.35638 18.612941,373.93669 16.316096,371.63984 C 15.09772,370.42145 14.37061,370.49016 12.601703,370.04796"
       id="path3969" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:4.62058735;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 83.433214,362.92991 C 89.472219,365.17306 94.672986,369.27627 98.062722,374.73072 C 103.32357,378.05609 110.46592,380.20403 112.55052,386.88318 C 112.9259,394.34173 118.41105,396.95733 124.0542,398.61526 C 130.77269,400.58916 134.45691,404.38439 140.54872,406.19784 C 145.42371,407.84336 151.47345,414.80733 151.85802,420.26432 C 152.13003,426.95879 160.55172,428.60351 162.46141,434.78659 C 167.66454,438.08925 172.35409,442.80654 175.02602,448.37699 C 178.50831,453.92298 182.97984,458.8555 185.84406,464.81017 C 186.61368,466.46976 188.13624,467.73249 188.49721,469.5858"
       id="path3973"
       sodipodi:nodetypes="cccscccccc" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 225.91348,371.10921 C 225.41011,371.91409 222.64573,378.34333 221.66847,382.25236 C 220.89012,385.36574 219.37797,389.48648 217.95408,392.33426 C 216.55458,395.13327 216.63517,397.80719 214.77033,400.29366"
       id="path3975" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 233.34224,375.3542 C 232.86287,376.31298 232.28099,381.18459 232.28099,384.37486 C 232.28099,387.60315 230.9354,391.34913 230.15848,394.45676 C 229.34489,397.71112 228.34794,399.6697 226.97473,402.41617 C 226.38811,403.5894 226.6454,402.58082 225.91348,402.94678"
       id="path3977" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 349.01877,436.90687 C 353.03881,435.08317 360.51924,434.25373 366.52944,434.25373 C 372.42438,434.25373 379.85352,432.07282 384.0401,427.88622 C 387.83885,424.08747 390.99482,417.80432 396.77514,417.80432 C 401.64772,417.80432 408.83107,415.60538 413.75519,414.62057 C 418.14291,413.74302 423.54515,414.62057 428.0821,414.62057 C 428.78959,414.62057 429.4971,414.62057 430.20461,414.62057"
       id="path3985" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 304.3517,405.30987 C 304.16117,406.07207 298.07092,414.9114 297.62946,420.89082 C 297.24308,426.12434 289.05178,450.63617 287.45969,453.82032 C 284.29191,460.15586 282.30923,468.7445 280.96275,475.47674 C 280.94838,475.54867 280.14691,476.70056 280.09652,476.77615"
       id="path3998"
       sodipodi:nodetypes="csssc" />
    <path
       style="opacity:1;fill:none;fill-opacity:1;stroke:#241f0b;stroke-width:1.70232153;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 292.22409,397.51355 C 298.40555,398.39685 304.42984,396.64729 310.41551,396.64729 C 317.4883,396.64729 323.83257,394.48563 330.33944,391.88287 C 333.81834,390.49132 338.24415,386.14382 340.73454,383.65341 C 342.74187,381.64609 344.73749,380.08359 346.36523,378.45586"
       id="path4019" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer15"
     inkscape:label="front branch highlight"
     style="display:inline">
    <path
       style="fill:#b6a378;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 85.559506,364.15285 C 91.887498,364.81083 94.314987,372.53646 99.984734,374.74519 C 103.95403,378.4965 110.93637,378.76855 112.2146,385.14511 C 112.45276,391.72101 119.41207,393.12387 124.29974,395.14774 C 128.8437,398.90823 134.88213,400.36144 139.63647,403.98568 C 145.75264,405.77375 147.04524,412.50587 151.19643,416.51366 C 155.06386,420.48698 157.26311,425.67795 160.95537,429.79546 C 163.83737,435.41897 168.52124,439.80073 172.12992,444.94266 C 175.28989,449.36005 180.55879,451.86174 183.14197,456.7584 C 184.47997,459.70532 190.42282,466.6628 191.5134,460.31679 C 191.08325,454.55646 185.42814,451.55815 182.04422,447.52384 C 178.79059,444.22719 177.61572,439.12466 173.49278,436.68238 C 167.33389,432.69058 165.79731,424.3116 159.18587,420.82103 C 154.98726,417.11978 151.78362,412.52472 149.0288,407.69105 C 145.36607,403.75676 139.61971,400.15263 134.42447,398.75142 C 129.53875,396.69638 124.43817,394.49951 121.22391,390.17767 C 116.62794,386.93627 114.94296,382.74505 111.97156,378.18223 C 109.3869,373.12378 102.64575,372.71783 99.082531,368.29692 C 94.459566,365.86294 90.694999,361.20349 85.228381,360.98775 C 83.33642,361.99153 83.624838,363.43621 85.559506,364.15285 z "
       id="path5973"
       sodipodi:nodetypes="cccccccccccccccccccc" />
    <path
       style="fill:#b6a378;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 258.67346,362.92095 C 261.73443,365.61866 264.23253,368.9143 267.54878,371.33099 C 268.688,372.72211 270.38589,373.3404 272.13347,373.47905 C 274.4458,373.69408 276.70311,374.44405 279.04852,374.18951 C 281.83953,373.89532 284.71942,374.19799 287.41572,373.27546 C 290.59486,372.3258 293.38219,370.36542 296.66239,369.69618 C 299.16398,369.21397 301.30674,367.77005 303.57285,366.71476 C 301.45117,368.70676 297.44108,370.35044 294.80554,371.56467 C 290.26045,373.80468 287.57445,375.41153 282.40385,375.7323 C 280.38411,375.84281 278.41416,376.30352 276.42352,376.59916 C 273.8187,376.72947 271.21267,376.40146 268.61528,376.29114 C 266.37107,375.95442 265.35622,374.38853 264.35625,372.72492 C 263.07776,370.91495 261.41026,369.38118 259.67547,368.01888 C 258.2534,367.3668 256.14948,366.05793 257.65564,364.3395 C 257.95929,363.84221 258.31058,363.37605 258.67346,362.92095 z "
       id="path5975"
       sodipodi:nodetypes="ccssccccccccccc" />
    <path
       style="fill:#b6a378;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 298.93271,373.95089 C 297.04004,372.05822 304.05694,372.39409 306.65367,371.74491 C 309.40781,371.05636 312.33465,371.28977 314.92612,370.64192 C 317.33101,370.04069 320.70498,370.64192 323.19858,370.64192 C 325.95604,370.64192 328.71353,370.64192 331.47102,370.64192 C 333.85291,370.64192 336.34273,372.41134 338.08897,372.8479 C 341.047,373.58739 342.16889,374.97088 344.70694,375.60538 C 346.41447,376.03227 348.8567,377.68026 350.22191,378.36287 C 351.49742,379.00063 351.711,379.47969 352.42789,380.01736 C 349.94012,379.5626 347.5513,378.66369 344.41862,377.09734 C 342.69383,376.23494 340.98758,375.45297 338.64048,374.86619 C 336.54738,374.34293 334.1452,372.78697 331.73421,372.1842 C 328.99959,371.50055 327.87602,372.92339 324.56473,372.92339 C 321.80726,372.92339 319.04977,372.92339 316.29228,372.92339 C 313.53481,372.92339 310.77731,372.92339 308.01982,372.92339 C 303.43698,372.92339 303.69412,376.33159 298.93271,373.95089 z "
       id="path5977"
       sodipodi:nodetypes="cssssssscssssssc" />
    <path
       style="fill:#b6a378;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 330.7722,358.14262 C 332.53558,359.01706 336.59578,357.51398 338.49315,357.03964 C 342.65151,356.00006 341.54283,357.46147 341.80212,357.59113 C 343.88196,358.63103 337.44007,359.23315 335.18417,359.79713 C 332.65734,360.42881 334.65133,361.24595 330.7722,358.14262 z "
       id="path5985" />
    <path
       style="fill:#b6a378;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 359.59737,348.58204 C 361.40642,348.61312 365.79362,346.2787 367.86983,344.72156 C 369.96852,343.14752 373.19715,342.56249 375.59078,341.96407 C 378.09849,341.33713 380.71123,339.30521 383.31173,338.6551 C 386.06351,337.96715 388.72631,336.48926 391.58418,335.34611 C 394.28403,334.26617 395.83631,333.31796 398.75363,332.58864 C 400.83346,332.06867 395.15617,334.93886 393.23866,335.8976 C 390.64061,337.19666 388.9486,337.49115 386.6207,338.6551 C 384.26377,339.83357 383.04109,340.23938 380.55423,340.86109 C 378.41496,341.39591 375.6729,343.85326 373.93629,344.72156 C 371.55663,345.91139 368.82753,347.27592 366.21531,348.58204 C 362.98899,350.19522 363.38009,350.85167 359.59737,348.58204 z "
       id="path5989" />
    <path
       style="opacity:1;fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 272.64557,335.42332 C 273.8896,335.05221 276.93895,335.19754 278.96717,335.19754 C 286.23127,334.62041 293.64503,334.38779 300.64123,332.26252 C 302.14397,331.88681 302.83902,330.59917 304.02778,330.0048 C 305.97196,329.03273 302.38541,329.58425 301.54431,330.0048 C 292.86859,331.87769 284.94665,335.08674 276.03216,334.52024 C 274.49342,334.52024 273.7883,334.2806 272.64557,335.42332 z "
       id="path2898"
       sodipodi:nodetypes="cccsccc" />
    <path
       style="opacity:1;fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 205.84983,357.11456 C 205.83946,358.17941 204.81401,360.78591 203.88675,362.02224 C 203.30077,362.80352 203.78573,367.1078 203.55956,368.2386 C 203.18072,370.13278 203.38928,372.19151 202.90522,374.12778 C 202.39462,376.17014 201.92369,378.2269 201.92369,380.34415 C 201.92369,385.26926 202.0778,390.54349 201.26934,395.39428 C 201.17792,395.94281 201.05122,396.48488 200.94215,397.03019 C 200.10147,401.23363 200.01723,405.3104 198.97908,409.46289 C 198.76097,410.33539 198.54285,411.20785 198.32473,412.08031 C 197.96496,413.51938 199.27368,409.26608 199.63345,407.82701 C 199.93668,406.61409 199.91556,404.73552 200.28779,403.24653 C 200.67012,401.71724 200.9383,399.66293 201.26934,398.33888 C 201.57415,397.11958 201.60532,395.35898 201.92369,394.08558 C 202.2723,392.69113 202.59233,391.0838 202.90522,389.83228 C 203.31328,388.2 203.2324,386.29744 203.2324,384.59746 C 203.2324,382.74345 203.2324,380.88943 203.2324,379.03544 C 203.2324,377.36368 203.25213,375.6847 203.55956,374.45497 C 203.93196,372.96537 204.54367,371.8272 204.86828,370.52884 C 205.25697,368.9741 205.84983,367.91672 205.84983,365.94835 C 205.84983,363.95556 205.49228,363.15547 205.84983,361.36789 C 206.33389,358.9475 207.67576,359.39702 205.84983,357.11456 z "
       id="path2902" />
    <path
       style="opacity:1;fill:#958052;fill-opacity:1;stroke:none;stroke-width:16.79999924;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:0.568306"
       d="M 196.32023,348.97661 C 195.60695,350.13271 193.79413,352.10718 193.08991,353.51564 C 192.1968,355.30189 190.74858,355.90803 189.81814,357.76893 C 189.19058,359.02403 188.79278,360.10302 187.85507,361.0407 C 187.11159,361.78418 186.46001,363.17646 185.892,364.31246 C 188.3967,362.64195 189.08453,361.12445 191.12683,359.732 C 191.52939,358.12187 191.96503,357.58508 193.08991,356.46022 C 193.95436,355.59578 194.61076,354.40004 195.05297,353.51564 C 196.43739,351.64455 197.12338,350.5896 197.67038,349.5895 C 198.21566,349.69857 196.72266,348.9904 196.32023,348.97661 z "
       id="path2906"
       sodipodi:nodetypes="csssccsccc" />
    <path
       style="opacity:1;fill:#b6a378;fill-opacity:1;stroke:none;stroke-width:0.69999999;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1;display:inline"
       d="M 295.59856,426.331 C 295.53745,426.7892 295.34257,427.86089 295.06031,428.69128 C 294.80334,429.44742 295.16326,429.89837 294.43138,430.65255 C 293.74164,437.10432 288.86571,444.33724 286.89283,451.3879 C 286.77972,452.17169 286.69948,452.99933 286.35454,453.74814 C 286.04234,454.42595 286.21712,454.84098 285.89974,455.52995 C 285.60664,456.16631 285.29796,457.30314 285.18734,458.06962 C 285.16431,458.22947 286.50012,457.17112 286.55029,456.50111 C 286.61527,455.63253 286.89404,455.17655 286.67979,454.23374 C 286.48963,453.39689 287.00921,452.9783 287.10435,452.31891 C 287.1649,451.89946 288.64515,450.89545 288.876,450.65754 C 290.12783,443.47864 294.73163,437.44987 295.3021,429.7553 C 295.38235,429.19912 295.41481,428.2893 295.49209,427.75393 C 295.57414,427.18511 295.55526,426.91001 295.59856,426.331 z "
       id="path4000"
       sodipodi:nodetypes="csccssssssccsc" />
    <path
       style="opacity:1;fill:#b6a378;fill-opacity:1;stroke:none;stroke-width:0.69999999;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 334.64474,431.35586 C 335.75555,432.13936 336.38203,433.62622 337.73717,434.0079 C 338.82118,434.58024 340.12505,434.58009 341.13734,435.267 C 342.15619,436.12283 343.26647,436.84407 344.09372,437.90776 C 345.01368,438.75568 345.33965,439.96247 345.86078,441.05076 C 347.14345,442.64323 346.89,444.91649 348.12195,446.53511 C 348.67996,447.92705 348.93543,449.44182 349.8127,450.69398 C 350.55349,451.91193 351.14943,453.30069 352.17129,454.28219 C 353.1721,454.77442 354.327,454.98712 355.4195,455.12069 C 354.34417,454.68322 353.61096,453.73552 353.03927,452.72012 C 352.48713,451.66716 352.48621,450.3659 351.79877,449.34872 C 351.47873,448.19524 350.87107,447.18475 350.35143,446.12691 C 349.76352,444.97362 348.31426,444.42684 348.17452,443.02316 C 346.95726,439.931 345.54088,437.48129 342.64244,435.38415 C 341.24943,434.63153 339.74137,434.05587 338.54928,432.97696 C 337.543,432.02846 336.10815,432.03521 334.90594,431.51421 L 334.7736,431.43989 L 334.64474,431.35586 L 334.64474,431.35586 z "
       id="path4005"
       sodipodi:nodetypes="cccccccccscsccscccc" />
    <path
       style="opacity:1;fill:#b6a378;fill-opacity:1;stroke:none;stroke-width:0.69999999;stroke-linejoin:miter;stroke-miterlimit:4.5999999;stroke-dasharray:none;stroke-opacity:1"
       d="M 335.42251,431.74319 C 334.51369,431.71253 334.16609,430.74578 333.66619,430.148 C 331.60227,427.68552 329.07501,425.74417 326.92353,423.39782 C 326.42353,422.68335 326.00513,421.88625 325.23153,421.42399 C 324.85906,421.06035 324.40998,420.61318 323.83694,420.73086 C 324.58057,420.24299 325.38401,420.96974 326.05333,421.27076 C 328.0499,423.50425 329.84086,424.97312 331.71562,426.86311 C 332.37967,427.40198 333.18638,427.76978 333.70688,428.46946 C 334.11901,428.97717 334.60534,429.42405 335.18717,429.72884 C 336.35216,430.54777 337.12502,431.77503 338.05196,432.8294 C 338.39128,433.14841 338.43659,433.95721 337.79301,433.48307 C 336.9732,433.23358 336.42408,432.57232 335.8743,431.97505 C 335.7322,431.88218 335.57635,431.81365 335.42251,431.74319 z "
       id="path4009"
       sodipodi:nodetypes="cccccccscccsc" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer7"
     inkscape:label="rev1 leaves2"
     style="opacity:1;display:none"
     sodipodi:insensitive="true" />
  <g
     inkscape:groupmode="layer"
     id="layer6"
     inkscape:label="rev1 leaves1"
     style="opacity:1;display:none"
     sodipodi:insensitive="true" />
  <g
     inkscape:groupmode="layer"
     id="layer9"
     inkscape:label="leaves shade blur"
     style="display:inline">
    <path
       id="path5488"
       d="M 60.430227,165.49906 C 59.399592,165.89694 57.444914,167.14825 56.999538,168.92973 C 56.570625,170.64538 55.537341,171.41183 54.624458,172.09651 C 53.426948,172.99466 52.677075,174.67178 51.985471,176.05498 C 51.125288,177.77537 51.463029,178.69395 53.304965,178.69395 C 55.324478,178.69395 56.412431,178.09617 58.055123,177.11058 C 59.377827,176.31695 60.449851,176.29925 61.485812,175.26329 C 62.504262,174.24483 63.548611,174.30444 64.124799,173.1521 C 64.760275,171.88108 63.785672,170.96569 63.069189,170.24922 C 62.880887,170.0609 66.822225,170.97042 70.458334,173.1521 C 72.094071,174.13354 72.908873,175.08423 74.680697,175.52718 C 76.010143,175.85954 73.418936,170.35849 72.569534,169.72142 C 71.184934,168.68299 68.925418,168.29522 67.555462,167.61023 C 66.16255,166.91379 64.743617,166.29074 63.069189,166.29074 C 61.846169,166.29074 61.781724,166.03965 60.430227,165.49906 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5490"
       d="M 91.570184,214.0563 C 90.017595,214.53887 89.688491,216.83291 89.195112,218.80645 C 88.731344,220.66153 91.303845,222.76249 92.361885,223.82053 C 93.795213,225.25385 95.020673,225.80471 96.584257,226.1956 C 98.126578,226.58118 97.90374,227.29302 97.90374,224.87611 C 97.90374,223.1922 98.431534,221.96203 98.431534,220.12596 C 98.431534,218.43063 98.251143,218.25777 100.27882,217.75088 C 102.48805,217.19856 99.441704,213.43765 98.959328,212.4729 C 98.172351,210.89893 98.355104,210.47457 96.848142,210.09782 C 95.48285,209.7565 93.930216,210.90458 93.153565,211.68122 C 92.517913,212.31687 92.115366,213.14766 91.570184,214.0563 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5492"
       d="M 110.01683,337.27888 C 109.02851,341.16459 108.27954,343.22353 110.56554,345.50953 C 112.13415,347.07812 117.39523,344.56385 117.69875,344.4121 C 119.11866,343.70214 121.39663,340.85733 122.08844,339.4737 C 123.28077,337.08906 122.08844,333.84889 122.08844,332.8892 C 122.08844,329.93872 125.97376,331.26524 121.53972,329.04822 C 117.68361,327.12014 117.18604,330.55042 116.60134,332.8892 C 115.93422,335.55765 112.65516,336.75119 110.01683,337.27888 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5494"
       d="M 135.25749,354.28889 C 134.83575,355.97574 134.99045,361.98547 135.80619,363.61694 C 136.73744,365.47945 141.26154,364.58513 142.93941,364.16566 C 146.45833,363.28592 147.6384,362.21021 149.52394,360.32468 C 150.21341,359.63522 150.97743,354.51076 151.17007,353.74018 C 151.34997,353.02058 147.87782,351.69555 147.87782,348.80178 C 147.87782,346.96284 141.4289,349.2827 141.29329,349.35049 C 140.45251,349.77086 137.06015,352.84675 135.25749,354.28889 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5496"
       d="M 142.3907,368.55534 C 139.06747,371.85497 140.42649,372.45396 144.58556,373.49372 C 147.06124,374.11266 148.4124,375.68505 150.62135,376.23728 C 153.89594,377.05593 152.75695,379.8335 156.65715,377.8834 C 156.74171,377.84113 158.18282,370.68338 158.30329,370.20145 C 159.27402,366.31855 158.78282,366.51496 155.01104,367.45792 C 151.7285,368.27856 152.29571,368.58356 150.07265,366.3605 C 147.68242,363.97028 144.13447,367.50909 142.3907,368.55534 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5498"
       d="M 161.59557,344.96082 C 158.64632,342.01159 168.13566,350.14025 171.47234,352.64273 C 173.90052,354.4639 176.85675,352.74543 178.05685,351.54532 C 179.34415,350.25803 178.60555,345.23018 178.60555,343.31466 C 178.60555,339.58873 173.82242,342.68834 172.56975,343.31466 C 169.86224,344.66842 168.12867,343.01463 166.53395,342.21726 C 165.36086,341.63071 162.11887,344.64684 161.59557,344.96082 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5500"
       d="M 108.91939,357.03241 C 107.00839,356.07692 104.83103,359.11949 103.98101,362.51954 C 102.9744,366.54599 104.44046,366.90922 107.82198,366.90922 C 110.12298,366.90922 111.92785,365.28199 112.76036,363.61694 C 113.88057,361.37657 116.37456,359.61501 118.24748,358.67856 C 120.5688,357.5179 122.39233,355.23436 124.28329,354.28889 C 126.18925,353.3359 121.10832,352.09403 119.3449,352.09403 C 118.14131,352.09403 114.4731,355.07864 112.76036,355.93501 C 110.72339,356.95349 112.5982,357.03241 108.91939,357.03241 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5502"
       d="M 93.808445,336.73014 C 93.036779,337.08774 90.826664,331.8018 87.296144,333.4379 C 84.896118,334.55012 83.65655,337.05431 83.151985,338.92499 C 82.140297,342.67574 83.777323,341.4096 86.704119,342.76596 C 89.259797,343.95029 93.025909,341.98703 94.400469,341.66855 C 98.45274,340.7296 99.244907,342.41791 100.3207,344.41208 C 101.03224,345.73103 103.93188,344.9061 105.05691,343.86338 C 106.52301,342.50454 102.06072,339.18262 101.50473,338.92499 C 98.60452,337.58095 97.576192,336.03172 93.808445,336.73014 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5504"
       d="M 86.971004,343.86338 C 84.021774,342.38878 86.010325,350.85989 83.678756,353.19146 C 81.671838,355.19836 87.489256,358.38897 89.165854,359.22727 C 92.300653,360.79467 92.252357,359.98174 94.652939,357.58114 C 95.980511,356.25358 95.201655,351.79986 95.201655,349.89921 C 95.201655,348.47336 92.387395,346.32403 91.909408,344.4121 C 91.285854,341.91791 89.157948,342.98863 86.971004,343.86338 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5506"
       d="M 84.776176,337.27888 C 83.877933,333.68593 82.840633,344.52862 80.935202,347.70435 C 78.986086,350.95287 76.812657,350.9822 75.448081,348.25306 C 74.267429,345.89172 73.826424,344.98526 72.155841,343.31466 C 69.84956,341.00839 72.189595,339.73118 73.801958,338.92499 C 76.426557,337.61269 77.910441,338.40367 78.740352,335.08402 C 79.534086,331.90902 81.721304,329.99788 82.581326,333.4379 C 83.18523,335.85352 84.776176,332.72041 84.776176,337.27888 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5508"
       d="M 55.694537,361.42209 C 55.975104,362.54434 56.426148,363.61694 56.791951,364.71436 C 57.946516,368.178 60.084217,368.48729 60.084217,372.39631 C 60.084217,376.31793 59.229675,376.84892 57.88939,379.52952 C 56.24913,382.81001 57.333266,383.91919 60.632924,383.91919 C 61.487587,383.91919 65.095,381.10326 65.571309,380.62696 C 66.732221,379.46605 66.841412,373.90046 67.217454,372.39631 C 67.859085,369.82976 69.96099,369.12798 69.96099,365.26306 C 69.96099,363.27896 65.931108,363.06824 63.925189,363.06824 C 59.845624,363.06824 59.120338,362.10726 55.694537,361.42209 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5510"
       d="M 27.161634,391.05244 C 26.353373,393.54534 25.546205,396.05225 26.612927,398.18568 C 27.565667,400.09113 29.448119,401.24939 31.002607,402.02663 C 34.227534,403.63908 31.51199,405.75991 36.4897,402.02663 C 38.6257,400.42464 38.684552,398.49479 38.684552,395.44212 C 38.684552,392.05967 39.726592,391.54579 37.587114,389.40632 C 35.774068,387.59327 35.267628,386.96827 32.100021,387.76017 C 31.074494,388.01656 28.031082,390.53074 27.161634,391.05244 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5512"
       d="M 35.392286,380.07825 C 32.241192,380.86604 32.648728,374.02599 32.648728,371.29889 C 32.648728,368.64577 36.576129,366.59164 38.135845,365.81179 C 41.211721,364.27385 41.428086,362.874 41.428086,359.22727 C 41.428086,356.77337 43.622938,363.61694 44.720352,365.81179 C 46.076835,368.52474 43.685851,370.68727 42.525524,371.8476 C 40.03712,374.336 41.161649,375.82179 38.135845,377.33469 C 36.979045,377.91309 36.306798,379.16374 35.392286,380.07825 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5514"
       d="M 45.817766,378.98081 C 43.592661,380.09338 48.615968,383.70057 48.012617,386.11405 C 47.679351,387.44706 51.683114,389.23587 52.402296,389.95502 C 55.281846,392.83457 54.597124,386.5753 54.597124,385.01664 C 54.597124,381.14835 53.624102,381.12457 52.951004,378.4321 C 52.413167,376.28079 52.951004,372.43568 52.951004,371.8476 C 52.951004,369.55581 48.965017,374.11495 46.915179,375.13986 C 44.414615,376.39014 44.578962,375.88382 45.817766,378.98081 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5516"
       d="M 96.299086,420.13408 C 93.813703,419.38952 91.463405,418.62584 90.263262,423.42633 C 89.883863,424.94395 86.018719,427.2355 85.873584,427.81601 C 85.614275,428.85324 91.908511,429.32473 92.458112,429.46214 C 95.449218,430.20991 97.358716,428.10925 99.042629,427.2673 C 101.76809,425.90457 102.56198,425.9428 104.52971,423.97504 C 107.20468,421.30008 101.70705,420.29102 100.14003,420.68278 C 97.400731,421.3676 101.25491,422.11641 96.299086,420.13408 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5518"
       d="M 79.837782,417.93921 C 75.003339,419.14784 72.419242,421.79481 69.961014,425.07246 C 67.227183,428.71754 71.317643,427.88839 73.801958,427.2673 C 76.789021,426.52053 77.168011,425.54737 79.289078,423.42633 C 81.396061,421.31933 81.67235,420.99684 79.837782,417.93921 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5520"
       d="M 55.145831,420.68278 C 56.997591,418.83102 53.499686,415.61961 53.499686,413.00083 C 53.499686,412.20082 45.845002,415.73077 45.817766,415.74439 C 43.012534,417.14702 46.692515,422.10623 46.915179,422.3289 C 48.808575,424.22229 53.933924,421.65229 55.145831,420.68278 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5522"
       d="M 11.797746,362.51954 C 12.421233,363.14302 6.244408,371.98007 5.2132386,374.04242 C 3.8361333,376.79663 8.5833736,377.17805 10.151625,376.78599 C 11.735756,376.38995 13.332049,373.1687 13.992597,371.8476 C 15.340617,369.15152 17.844781,368.00662 19.47969,368.00662 C 20.107458,368.00662 22.223249,373.92533 22.223249,367.45792 C 22.223249,364.52856 19.746176,364.57326 17.83357,363.61694 C 16.541678,362.97099 13.220156,363.0885 11.797746,362.51954 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5524"
       d="M 18.930983,425.62116 C 16.520959,424.41617 14.838845,428.41107 16.187425,431.10826 C 17.510444,433.75427 20.206119,432.39117 21.674542,431.65698 C 24.711726,430.13837 26.283795,429.19873 27.71034,428.91343 C 29.983962,428.45872 29.47611,431.59716 32.648728,430.01084 C 35.273586,428.69842 31.658901,423.64148 31.551314,423.42633 C 30.245997,420.81571 29.82392,420.42874 26.612927,421.23148 C 26.290119,421.3122 24.684076,426.31124 22.771956,427.2673 C 22.167754,427.5694 19.151167,425.70925 18.930983,425.62116 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5526"
       d="M 36.4897,424.52376 C 35.911617,424.81277 36.315626,433.62098 39.781965,432.75441 C 42.686904,432.02817 44.91697,430.82364 47.463886,428.91343 C 50.420868,426.69569 47.256397,424.31626 46.366473,423.42633 C 46.046752,423.10661 38.545642,425.34612 36.4897,424.52376 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5528"
       d="M 192.87203,425.07246 C 191.043,425.43826 189.21396,425.80406 187.38493,426.16986 C 183.67553,426.91176 185.71956,431.08901 186.83623,432.20568 C 188.15025,433.51972 191.11069,431.65696 193.42074,431.65696 C 197.06789,431.65696 196.83387,430.1178 199.45656,429.46214 C 202.75883,428.63657 200.37688,425.02817 198.35912,424.52376 C 196.75524,424.12278 194.3298,424.70802 192.87203,425.07246 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5530"
       d="M 200.00524,392.69857 C 197.13911,391.98206 193.59428,394.19922 192.87203,397.08825 C 191.93308,400.84406 193.62141,401.57826 195.61556,402.57535 C 198.11795,403.82654 199.50595,401.72758 201.10268,400.9292 C 202.85339,400.05385 205.90079,399.72968 207.68719,399.28308 C 209.7641,398.76385 207.00614,394.76107 205.49236,393.2473 C 203.88696,391.6419 202.77343,392.14493 200.00524,392.69857 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5532"
       d="M 210.97946,393.796 C 204.06445,386.88097 215.04417,399.73062 217.01525,403.67277 C 218.98793,407.6181 220.67125,401.1204 220.85622,400.3805 C 221.36342,398.3518 226.56569,397.4146 227.98946,395.99082 C 230.88903,393.09125 225.16149,392.6648 222.50237,391.60114 C 219.60578,390.44252 217.99027,390.29057 215.36914,391.60114 C 213.70236,392.43455 213.2271,392.44741 210.97946,393.796 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5534"
       d="M 211.52816,409.15985 C 209.19442,410.32675 216.77938,414.88185 217.56396,415.19569 C 217.80812,415.29333 213.74507,419.01457 212.62557,420.13408 C 209.90492,422.85472 207.68719,421.62039 207.68719,417.93921 C 207.68719,416.12766 210.86603,414.55191 211.52816,411.90342 C 211.74997,411.01623 211.52816,410.07439 211.52816,409.15985 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5536"
       d="M 240.06105,363.06824 C 242.2464,364.72255 242.86573,367.45792 246.6456,367.45792 C 249.23456,367.45792 251.42604,365.57895 252.68139,363.06824 C 254.06,360.31104 249.77863,359.89538 254.32753,356.48371 C 257.02043,354.46402 258.1685,355.10135 258.1685,350.99661 C 258.1685,347.17179 254.52559,347.10612 252.13268,347.70435 C 250.0145,348.23389 247.52946,351.97243 246.6456,353.74018 C 244.99901,357.03331 248.22354,356.94638 244.45074,359.77597 C 242.63502,361.13778 242.867,361.38469 240.06105,363.06824 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5538"
       d="M 234.02527,357.03241 C 232.24612,358.36678 231.24955,367.36745 224.6972,371.29887 C 222.10206,372.85596 230.06269,374.04242 231.2817,374.04242 C 234.55712,374.04242 235.50049,369.78767 235.67138,369.10404 C 236.11249,367.33956 236.22011,364.51147 236.22011,361.97079 C 236.22011,358.98226 239.44929,357.03241 234.02527,357.03241 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5540"
       d="M 169.8262,438.79021 C 169.8262,435.64341 166.56423,444.24702 164.3391,446.47214 C 164.32307,446.48816 170.63903,449.00736 171.47234,449.2157 C 175.8464,450.30919 173.00424,445.14623 172.56975,444.27729 C 170.93987,441.01754 176.54752,444.16725 169.8262,438.79021 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5542"
       d="M 148.42652,455.2515 C 148.22437,452.20678 149.40874,450.42831 151.17007,448.66697 C 152.02343,447.81362 157.34523,447.12318 157.75459,447.02086 C 160.16806,446.41748 157.53594,453.55072 159.94942,454.15408 C 162.91688,454.89594 159.26042,458.68404 158.85201,459.09248 C 157.25578,460.68867 152.23783,459.35943 151.17007,459.09248 C 148.79256,458.4981 149.10808,458.65942 148.42652,455.2515 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5544"
       d="M 164.3391,420.68278 C 162.22762,420.1549 158.85201,422.11212 158.85201,425.07246 C 158.85201,427.90986 156.21917,428.692 155.01104,431.10828 C 153.99725,433.13582 160.75044,433.30311 162.14427,433.30311 C 165.45867,433.30311 164.8878,428.32469 164.8878,426.1699 C 164.8878,423.56729 165.79862,424.33158 164.3391,420.68278 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5546"
       d="M 69.961014,287.34628 C 71.296825,290.41016 74.152347,290.08981 78.191636,290.08981 C 78.683072,290.08981 79.100078,282.06648 79.289078,281.31046 C 80.033575,278.33243 80.64133,277.34208 77.094228,279.11563 C 74.024431,280.65051 74.393005,281.57424 71.058427,282.40786 C 69.422497,282.81687 70.291701,285.69272 69.961014,287.34628 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5548"
       d="M 37.038407,259.36206 C 34.199323,260.07183 39.655897,266.83267 37.038407,268.14141 C 33.689819,269.81573 33.804434,268.25797 32.648728,265.94658 C 31.457128,263.56336 30.304023,263.05318 28.807755,261.5569 C 26.491187,259.24034 31.614908,256.87696 32.648728,256.6185 C 34.119776,256.25075 35.864462,257.0109 36.4897,257.16722"
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5550"
       d="M 57.88939,214.91656 C 58.068255,214.73767 54.909379,217.83746 50.756152,220.95236 C 47.862959,223.12226 51.833016,225.89591 54.048417,225.34204 C 56.974781,224.61045 59.37357,223.32485 62.279069,222.5985 C 65.425494,221.81189 66.538009,224.11389 67.766162,225.34204 C 69.979131,227.55501 70.773848,226.45988 72.155841,223.69592 C 73.464415,221.07877 68.703776,218.58039 67.217454,218.20883 C 64.933378,217.6378 62.778165,217.66011 59.53551,217.66011 C 58.469005,217.66011 58.438096,215.83107 57.88939,214.91656 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5552"
       d="M 36.4897,206.1372 C 32.282024,206.1372 28.557586,211.32575 26.612927,213.27043 C 23.425063,216.45828 28.44769,217.06423 30.453901,216.56267 C 33.452419,215.81305 35.608238,213.49079 38.684527,212.72171 C 41.377722,212.04842 40.483858,215.66303 44.171645,213.81915 C 47.279597,212.26517 41.340101,210.09334 40.879379,209.97817 C 40.02209,209.76385 38.404204,206.903 36.4897,206.1372 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5554"
       d="M 29.356462,195.71171 C 27.762043,195.31311 21.907468,194.67253 19.47969,194.06558 C 17.410372,193.54823 20.864139,198.59876 22.771956,199.55266 C 24.767927,200.55067 28.112332,200.75059 29.905168,201.19882 C 33.711024,202.15027 32.201334,198.59869 32.648728,196.80914 C 33.442933,193.63228 35.720445,191.67843 32.100021,190.77331 C 29.486957,190.12005 29.629927,194.34437 29.356462,195.71171 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5556"
       d="M 47.463886,187.48106 C 44.290102,186.68761 52.965619,187.04501 57.88939,188.02978 C 60.347348,188.52136 61.251207,191.46114 62.279069,193.51687 C 63.567191,196.09312 57.417238,197.61305 56.243245,197.90654 C 54.259384,198.40251 52.801078,195.16299 50.756152,195.16299 C 46.763989,195.16299 49.481647,195.00336 48.561324,191.32203 C 47.76099,188.12073 44.792361,194.15991 47.463886,187.48106 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5558"
       d="M 61.730338,188.57849 C 61.070882,185.94062 62.551246,194.33776 64.473897,196.26044 C 66.064934,197.85144 69.157299,197.69595 70.509696,197.35784 C 72.902183,196.75971 67.520031,191.1233 72.70455,192.41946 C 75.621817,193.14876 74.785977,195.54618 77.642932,196.26044 C 81.809068,197.30196 80.935202,195.57747 80.935202,194.06558 C 80.935202,192.67716 77.221974,190.90108 76.545524,190.22461 C 74.67854,188.35763 73.29805,187.62944 70.509696,186.93233 C 67.610059,186.20744 63.909188,186.94436 61.730338,188.57849 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5560"
       d="M 34.84358,236.86495 C 36.306798,237.59657 37.770016,238.32817 39.233259,239.0598 C 42.953901,240.92013 46.956084,240.74682 49.658738,243.44948 C 52.220878,246.01162 49.916737,246.39773 48.012617,248.93658 C 45.714726,252.00039 41.568382,251.39953 43.622938,247.29045 C 45.319253,243.8978 38.922999,245.79944 38.135821,246.19302 C 36.221025,247.15043 37.454795,241.67102 35.940993,240.15723 C 34.732808,238.94903 35.443015,239.86216 34.84358,236.86495 z "
       style="opacity:1;fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    <path
       id="path5562"
       d="M 78.740374,215.46527 C 74.681311,211.40622 89.496469,220.18558 93.555532,224.24462 C 95.259673,225.94878 91.528647,230.6836 90.811977,232.47528 C 90.03746,234.41155 88.445629,229.01148 86.971004,227.5369 C 84.496048,225.06192 83.497706,225.71533 82.581326,222.04979 C 81.886429,219.27018 78.740374,221.95636 78.740374,215.46527 z "
       style="opacity:1;fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;display:inline" />
    <path
       id="path5564"
       d="M 13.992597,158.94815 C 12.088016,159.72537 10.66378,165.39851 8.5054801,168.2762 C 5.8185839,171.85877 2.8378924,171.20387 7.9567738,173.76332 C 10.77499,175.17242 12.876191,173.78229 13.992597,172.66588 C 15.621864,171.03662 15.359342,167.36839 16.736132,165.53267 C 18.866636,162.69201 22.127237,165.48466 23.320662,166.08138 C 27.091547,167.96682 24.691201,160.59182 24.418075,160.04555 C 23.564313,158.33805 18.78524,158.77453 17.284838,158.39943 C 16.205518,158.12959 15.09001,158.76524 13.992597,158.94815 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       sodipodi:nodetypes="csssssc"
       id="path5566"
       d="M 2.4696789,194.06558 C 0.90167211,193.67358 -2.5408115,205.32818 -3.0174136,207.23461 C -4.050698,211.36774 0.99257551,207.9309 1.9209727,207.23461 C 4.6635351,205.1777 5.2132386,203.70343 5.2132386,200.1014 C 5.2132386,198.11414 13.081953,201.39721 12.346453,198.45526 C 11.801709,196.27626 10.513976,192.32626 6.3106524,190.22461 C 3.8981231,189.01834 3.3004374,192.68098 2.4696789,194.06558 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5568"
       d="M 304.80883,374.04242 C 305.51113,374.28393 310.85171,373.21585 313.58818,371.8476 C 316.88461,370.19938 317.30582,368.50001 317.97786,365.81177 C 318.74795,362.73152 321.40851,363.13742 323.46498,364.16566 C 327.03229,365.94931 324.56241,365.41747 324.56241,361.42209 C 324.56241,358.6362 319.37225,359.37573 316.88046,358.12986 C 314.0036,356.69142 312.36694,361.12105 311.39335,363.06824 C 309.95254,365.94988 307.13581,368.02681 306.45497,370.75018 C 305.70048,373.76809 308.56066,369.04003 304.80883,374.04242 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5570"
       d="M 343.21854,332.34048 C 342.42792,335.50292 341.0237,342.39721 341.0237,345.50953 C 341.0237,348.49722 343.60561,348.21267 345.96208,348.80178 C 349.42695,349.668 348.35723,343.01849 348.15692,342.21726 C 347.5265,339.69556 349.55408,338.07655 350.90047,336.73016 C 353.43576,334.19487 344.24985,332.753 343.21854,332.34048 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5572"
       d="M 336.08529,340.02242 C 336.22335,339.88437 335.82839,347.08595 335.53659,348.25306 C 334.69882,351.6042 330.52539,348.72895 330.04949,348.25306 C 328.95838,347.16194 325.76637,345.5628 324.56241,344.96082 C 322.92647,344.14285 327.41104,342.34556 327.85466,340.57114 C 328.29379,338.81454 324.45284,338.48675 324.01368,336.73016 C 323.53881,334.83071 329.13408,334.53531 330.59819,334.53531 C 334.21517,334.53531 335.38926,336.54223 336.08529,340.02242 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5574"
       d="M 342.12112,354.28889 C 345.57214,354.28889 344.52154,361.5249 347.60821,363.06824 C 350.86565,364.69695 351.47941,366.30005 353.0953,363.06824 C 354.63958,359.97969 353.9344,358.38819 355.83887,356.48371 C 357.86029,354.4623 350.97229,354.28889 349.80306,354.28889 C 346.8991,354.28889 344.92798,354.99061 342.12112,354.28889 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5576"
       d="M 368.4592,352.09403 C 364.96484,352.09403 375.29363,355.83724 376.14113,359.22727 C 376.74572,361.64561 380.28164,360.99797 381.62823,360.32468 C 383.19317,359.54219 383.99711,355.78751 384.37178,354.28889 C 384.72942,352.85831 387.17004,353.13675 388.21273,352.09403 C 388.64894,351.65784 382.06968,350.55826 381.62823,350.44791 C 378.67705,349.71013 376.59435,351.0205 374.495,351.54532 C 371.67492,352.25035 372.62112,352.92642 368.4592,352.09403 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5578"
       d="M 367.91048,374.04242 C 365.93788,374.53558 372.10489,381.07802 373.39758,381.72437 C 375.53506,382.79311 377.23855,385.00953 377.23855,380.62696 C 377.23855,377.33241 376.82134,376.21451 376.14113,373.49372 C 375.25094,369.93295 376.58124,368.5825 372.30016,369.65274 C 369.67676,370.30861 371.10837,372.76327 367.91048,374.04242 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5580"
       d="M 305.35753,347.70435 C 303.07982,349.01904 301.25614,351.48971 300.41915,354.83759 C 299.89751,356.92415 296.09769,358.3701 294.38335,359.22727 C 290.06064,361.3886 293.58835,362.51954 296.57818,362.51954 C 300.09297,362.51954 301.97689,360.96179 304.26013,358.67856 C 306.9296,356.00907 305.85845,354.57519 309.19851,353.74018 C 311.85026,353.07725 316.97348,352.66601 312.49078,351.54532 C 311.17743,351.21699 308.74622,348.38209 305.35753,347.70435 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5582"
       d="M 302.61403,344.41208 C 299.71645,343.6877 300.62963,339.81197 302.06529,338.37628 C 303.9031,336.53847 306.39379,337.76636 307.55242,338.92499 C 308.52628,339.89887 309.00602,344.73947 309.19853,345.50953 C 309.65439,347.33297 306.82116,347.33874 305.35755,346.60694 C 303.78544,345.82088 305.48553,345.84785 302.61403,344.41208 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5584"
       d="M 286.7014,347.15564 C 287.98298,351.61933 282.90221,355.51348 280.11689,359.22727 C 279.37824,360.21213 278.81229,356.06934 277.92205,354.28889 C 277.01594,352.47669 280.13307,348.41439 280.6656,347.70435 C 282.97478,344.62546 278.78836,343.37246 283.40914,342.21726 C 285.80378,341.61859 286.42651,345.78117 286.7014,347.15564 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5586"
       d="M 307.55239,307.64853 C 304.25164,308.20847 301.97738,312.38978 300.96785,316.42789 C 300.03749,320.14936 305.31471,318.3698 307.00367,317.5253 C 310.47433,315.78998 308.32908,313.13562 313.03948,313.13562 C 316.81998,313.13562 314.6606,308.69595 314.1369,307.64853 C 313.43552,306.24574 308.83959,307.97033 307.55239,307.64853 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5588"
       d="M 124.28329,218.20883 C 126.37565,219.35816 129.80551,221.02264 131.41651,224.24462 C 132.84424,227.10007 128.46349,229.75165 127.02684,230.82915 C 123.87449,233.19341 122.45343,231.74284 120.99102,230.28042 C 118.96074,228.25014 118.24748,228.55799 118.24748,224.79333 C 118.24748,222.65964 122.60552,221.79124 123.18586,221.50106 C 124.22052,220.98376 123.91749,219.30624 124.28329,218.20883 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5590"
       d="M 141.60775,209.19522 C 143.37528,208.31147 147.26849,213.45059 148.1923,214.68232 C 150.25934,217.4384 144.37406,219.88938 143.25391,220.1694 C 142.80388,220.28193 150.81464,222.42552 152.03326,222.91297 C 155.19306,224.17689 148.81587,228.10699 147.64358,228.40006 C 144.29239,229.23787 143.3495,226.30086 142.15647,225.10783 C 141.19696,224.14829 141.39263,219.30889 141.05905,217.97458 C 140.44303,215.51045 141.1403,211.53248 141.60775,209.19522 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5592"
       d="M 138.54974,228.0856 C 138.50012,227.88708 136.3549,233.71372 136.3549,241.25463 C 136.3549,245.2808 136.26713,245.89673 139.64716,246.74173 C 143.2325,247.63805 142.3907,243.42544 142.3907,240.70591 C 142.3907,237.94807 141.8945,235.97753 141.29329,233.57269 C 140.93566,232.1421 143.13048,231.1623 143.48814,229.73172 C 143.79614,228.49969 138.7705,228.0856 138.54974,228.0856 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5594"
       d="M 148.97523,239.60851 C 149.11383,239.05407 155.61258,241.82977 156.65715,242.35205 C 159.74334,243.89513 160.68552,243.27555 162.14427,246.19302 C 163.25949,248.42345 156.67648,250.30352 155.55975,250.5827 C 152.84948,251.26027 153.16085,247.97975 152.26747,246.19302 C 151.24257,244.14321 148.97523,249.93705 148.97523,252.22882 C 148.97523,252.70435 145.13426,250.07711 145.13426,247.29043 C 145.13426,246.71072 148.40214,240.56364 148.97523,239.60851 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5596"
       d="M 164.8878,231.37787 C 164.8878,230.7631 175.91491,231.80261 176.41073,231.92657 C 178.36947,232.41626 180.10516,234.52358 181.34911,235.76755 C 183.51712,237.93554 175.63578,238.51107 172.56975,238.51107 C 169.51946,238.51107 168.24135,233.87631 167.08265,238.51107 C 166.10422,242.42488 164.68875,242.153 162.69297,240.15723 C 162.17698,239.64122 164.60789,232.07761 164.8878,231.37787 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5598"
       d="M 125.38072,260.4595 C 123.16916,262.48137 121.78233,269.3024 119.89361,273.07981 C 118.26441,276.33824 120.72285,277.06104 122.63716,278.01821 C 125.42306,279.41115 126.19837,273.65015 126.47814,272.53109 C 127.4664,268.57801 126.08845,268.69013 130.86781,268.69013 C 132.37381,268.69013 131.45596,261.71466 131.41651,261.5569 C 130.90338,259.50442 127.12293,260.11103 125.38072,260.4595 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5600"
       d="M 142.3907,271.43369 C 141.63526,268.41194 148.7685,274.44776 149.52394,277.46948 C 150.62492,281.87351 148.12497,281.32135 144.03682,282.9566 C 140.43678,284.39662 139.33701,284.29256 137.45232,282.40786 C 136.35773,281.3133 142.27405,276.15605 135.25746,279.66434 C 131.84701,281.36958 128.68846,278.62889 128.12427,276.37207 C 127.62555,274.37727 132.968,272.85279 133.61134,272.53109 C 136.45342,271.11007 138.92071,270.04568 142.3907,271.43369 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5602"
       d="M 390.91785,80.143619 C 390.406,81.317417 382.53608,89.802757 390.05343,87.923427 C 393.38957,87.089382 400.2455,88.742581 400.4265,88.787832 C 404.58211,89.826734 394.895,81.734487 390.91785,80.143619 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5604"
       d="M 381.40921,53.346523 C 384.16232,54.034822 377.26323,58.373212 377.95153,61.126328 C 378.96906,65.196457 385.9395,58.491427 390.05343,57.668645 C 392.33138,57.213056 392.94769,53.871398 393.51111,51.617695 C 394.49944,47.664442 385.48413,53.346523 381.40921,53.346523 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5606"
       d="M 405.61302,51.617695 C 406.40982,48.430463 410.17747,58.498089 408.20628,61.126328 C 405.40259,64.864602 407.48129,58.602782 403.88419,56.804231 C 402.25422,55.989232 405.03673,53.346523 405.61302,51.617695 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5608"
       d="M 351.61693,34.614664 C 350.23453,35.726256 347.36492,39.512657 346.42693,43.264719 C 345.88122,45.44746 351.17934,42.548966 352.77029,40.958049 C 354.91953,38.808794 355.11603,38.651355 359.11364,38.651355 C 362.70107,38.651355 360.60914,35.191337 357.38365,35.191337 C 355.25762,35.191337 353.81281,35.053839 351.61693,34.614664 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5610"
       d="M 303.58926,-2.3887971 C 300.33024,-2.3887971 300.962,4.7873139 303.58926,7.4145809 C 305.76054,9.5858679 307.91245,4.2447369 308.77927,3.3778899 C 310.16543,1.9917619 312.6442,4.0557779 314.54599,4.5312369 C 314.66563,4.5611489 312.13015,-1.7654551 311.66263,-2.3887971 C 310.48305,-3.9615721 304.94333,-2.6596121 303.58926,-2.3887971 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5612"
       d="M 334.71253,7.6124149 C 333.07335,5.4268049 338.40548,12.139836 341.05589,12.802428 C 343.44834,13.400551 336.53015,17.083646 335.86588,17.415792 C 333.28689,18.705301 332.00145,13.086983 331.8292,12.22578 C 331.47356,10.447558 334.27271,9.3716909 334.71253,7.6124149 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5614"
       d="M 327.7925,-3.9389801 C 327.41551,-8.8941941 329.33029,8.1890639 331.25252,8.1890639 C 334.63883,8.1890639 335.3893,4.8938549 337.01921,0.60906392 C 338.94135,-4.4440341 328.17686,-3.9389801 327.7925,-3.9389801 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5616"
       d="M 254.73643,15.584581 C 252.3512,17.792419 251.41264,21.319483 252.42976,25.387958 C 253.31333,28.922269 256.2809,22.093481 256.46644,21.351268 C 257.32515,17.916495 258.37332,17.126203 262.23314,16.161229 C 265.36926,15.377214 260.29149,12.595402 259.34979,12.124565 C 257.63049,11.264917 256.23744,14.383763 254.73643,15.584581 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5618"
       d="M 228.20964,18.467925 C 225.24007,19.198245 223.81104,21.204114 225.3263,24.234611 C 226.88806,27.358152 231.14681,22.450774 231.66966,21.927941 C 231.94785,21.649758 237.94546,23.081289 238.01303,23.081289 C 239.32357,23.081289 234.88948,18.696205 233.97633,18.467925 C 231.66188,17.889305 231.22744,17.864354 228.20964,18.467925 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5620"
       d="M 208.0262,15.007907 C 207.91391,14.979819 198.47184,20.774594 204.56617,20.774594 C 208.70975,20.774594 206.88133,18.484874 209.17954,23.081289 C 210.01637,24.754938 214.55766,19.245058 214.94623,18.467925 C 215.82586,16.708673 209.22665,15.007907 208.0262,15.007907 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5622"
       d="M 241.13253,7.9406219 C 242.78387,4.6379729 235.09347,12.249685 232.48249,14.860656 C 230.77431,16.568838 237.59394,15.515928 239.40252,13.707334 C 241.79563,11.314234 245.16922,15.468385 245.16922,10.823966 C 245.16922,7.3134869 245.07763,7.9406219 241.13253,7.9406219 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5624"
       d="M 162.82462,15.287501 C 161.14716,16.79785 159.30633,18.567073 158.58406,22.178401 C 157.94756,25.360843 162.74572,23.554072 163.35469,21.118269 C 163.8992,18.94027 168.20685,19.528057 170.2456,19.528057 C 173.2205,19.528057 170.06087,15.108806 168.65538,14.757422 C 166.21275,14.146776 165.76946,14.109568 162.82462,15.287501 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5626"
       d="M 140.56168,25.358825 C 139.65772,25.58482 139.67665,32.420079 140.03159,33.839961 C 140.69568,36.496216 144.27216,33.22552 144.27216,31.189592 C 144.27216,28.080447 145.86237,27.049376 145.86237,23.768613 C 145.86237,21.923928 142.14347,24.409732 140.56168,25.358825 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5628"
       d="M 150.633,43.911285 C 150.633,42.008284 154.23162,46.882615 155.93371,46.031576 C 156.18082,45.908011 156.46377,38.730367 156.46377,38.080517 C 156.46377,34.668506 155.53078,34.937254 152.7533,37.020384 C 152.24853,37.398956 150.633,43.467709 150.633,43.911285 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5630"
       d="M 126.24978,9.4567339 C 123.70435,10.683476 122.38605,15.511089 123.59943,17.937845 C 125.02063,20.780261 128.71472,16.029203 128.90013,15.287501 C 129.76534,11.826657 129.73256,12.429035 133.1407,11.577001 C 135.54674,10.975497 131.12686,7.9197319 129.96028,7.3364439 C 127.71156,6.2120849 128.33698,6.8477559 126.24978,9.4567339 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5632"
       d="M 176.07636,8.9266559 C 173.95022,7.8635799 178.54087,14.803896 180.847,14.227369 C 182.88144,13.718763 183.58739,9.8967349 185.08755,8.3966019 C 187.32598,6.1581709 187.12426,6.8063899 182.96729,6.8063899 C 181.29381,6.8063899 177.74293,7.9267109 176.07636,8.9266559 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5634"
       d="M 225.90297,30.129459 C 226.60972,31.189616 227.31649,32.24975 228.02325,33.309883 C 229.72952,35.869299 229.90027,40.287894 230.14352,41.260941 C 230.61799,43.158787 224.63051,43.381232 224.31277,43.381232 C 223.76702,43.381232 223.25261,36.127687 223.25261,35.430173 C 223.25261,31.935744 219.44026,35.29963 225.90297,30.129459 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5636"
       d="M 406.12677,37.020384 C 406.48015,38.080517 406.83356,39.140651 407.18693,40.200784 C 408.48108,44.083292 408.08367,43.911285 412.48762,43.911285 C 413.43334,43.911285 413.0177,37.364691 413.0177,36.490306 C 413.0177,34.052679 409.90872,34.334291 408.77714,34.900094 C 407.76521,35.406049 407.01023,36.313605 406.12677,37.020384 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5638"
       d="M 343.04844,61.933666 C 341.35013,62.782833 341.39459,67.732624 343.57853,68.82459 C 346.38776,70.2292 347.32239,65.59964 348.87921,63.523877 C 352.33332,58.918393 344.74352,60.916626 343.04844,61.933666 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5640"
       d="M 346.22887,52.392398 C 346.88849,51.512906 350.43688,47.646179 352.58971,46.031576 C 354.30932,44.741848 353.64984,50.242876 353.64984,52.392398 C 353.64984,53.341442 353.29659,54.15926 349.40928,56.102899 C 347.95228,56.83142 347.74135,52.997403 346.22887,52.392398 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5642"
       d="M 339.33794,57.693111 C 337.06208,58.831039 337.49794,63.274099 335.09739,60.873533 C 332.28387,58.060009 336.16926,56.102899 330.32676,56.102899 C 327.61952,56.102899 332.07335,53.280936 333.50716,52.922476 C 337.0804,52.02917 337.95304,54.230782 339.33794,57.693111 z "
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 77.665376,41.259871 C 76.426524,43.677191 76.019161,45.836247 79.12527,46.612772 C 80.748063,47.01846 80.94999,47.261429 83.018287,50.019142 C 85.646079,53.522885 85.45141,46.298427 85.45141,45.152886 C 85.45141,43.398328 81.856444,43.802459 81.071772,42.233138 C 79.997468,40.084515 86.316316,40.016228 81.558393,38.826742 C 79.258195,38.251674 78.826026,39.325475 77.665376,41.259871 z "
       id="path5902" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 78.986382,82.836982 C 75.618659,85.846498 77.568978,87.248476 79.473002,88.676511 C 82.520763,90.962328 80.932885,83.66757 80.932885,89.649773 C 80.932885,92.9237 86.743737,89.678441 86.772416,89.649773 C 88.982657,87.439498 85.833194,84.410025 84.339282,84.78349 C 83.779833,84.923349 88.21926,82.350362 83.852662,82.350362 C 82.460746,82.350362 80.522319,82.836982 78.986382,82.836982 z "
       id="path5906" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 105.4031,49.532546 C 105.77832,50.908678 103.03733,55.858689 106.86298,55.858689 C 110.08369,55.858689 111.80034,56.83193 115.62226,56.83193 C 118.19936,56.83193 114.34675,50.354669 113.67576,50.019166 C 110.54222,48.452398 113.18913,52.932665 113.18913,47.099393 C 113.18913,43.32114 109.32933,47.552794 108.32284,48.55928 C 107.59744,49.284712 106.37634,49.208108 105.4031,49.532546 z "
       id="path5910" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 108.32284,36.393614 C 108.31497,36.401494 104.60537,34.271574 102.48332,36.393614 C 101.23013,37.646815 101.75656,36.273552 100.0502,35.420373 C 98.535473,34.66301 99.867134,40.697376 101.51008,40.28663 C 104.37249,39.571023 104.71076,40.721841 106.86298,41.259894 C 109.89241,42.017258 109.88564,39.416281 112.21586,41.746516 C 113.19587,42.726494 112.14191,37.853501 110.75598,37.853501 C 109.81017,37.853501 109.13391,36.880235 108.32284,36.393614 z "
       id="path5912" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 106.37634,14.982057 C 104.31534,14.982057 101.90446,13.824284 101.02346,12.062283 C 99.105247,8.2258329 99.076964,13.726011 99.076964,15.468678 C 99.076964,16.992254 101.9967,15.524173 101.9967,19.361692 C 101.9967,22.442188 105.88973,21.496695 105.88973,19.361692 C 105.88973,17.713625 106.37634,17.051325 106.37634,14.982057 z "
       id="path5914" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 93.724064,13.52217 C 93.724064,9.3197709 89.447151,12.624657 88.857807,14.982057 C 88.574102,16.116824 86.911293,16.732116 86.911293,17.901804 C 86.911293,19.855074 90.797553,17.415184 92.750813,17.415184 C 95.930103,17.415184 92.77127,22.027916 97.13045,19.848312 C 98.862181,18.982439 96.755755,13.969929 96.64383,13.52217 C 96.407772,12.577965 94.697328,13.52217 93.724064,13.52217 z "
       id="path5916" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 94.210684,68.510974 C 93.579997,65.988207 99.670854,67.834667 101.9967,68.997596 C 103.36542,69.681954 99.588284,71.059592 98.103691,71.430723 C 96.84478,71.745458 99.021298,74.406163 98.103691,75.323738 C 97.015574,76.411862 96.270588,72.437015 96.64383,70.944102 C 96.676712,70.812537 92.776449,74.247944 93.724064,70.457482 C 93.886271,69.808654 94.048478,69.159802 94.210684,68.510974 z "
       id="path5918" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 285.94153,39.800009 C 282.95822,39.528196 281.94592,39.723794 281.07528,43.206402 C 280.71903,44.631392 284.14111,43.036122 285.45492,43.693023 C 287.42068,44.675895 288.86131,46.390984 288.86131,43.206402 C 288.86131,40.761042 290.02726,39.800009 285.94153,39.800009 z "
       id="path5924" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 367.6948,9.6291539 C 367.6948,8.0204619 371.06705,9.2790849 370.12793,13.035549 C 369.9764,13.641697 373.05067,12.050416 372.07444,15.955298 C 371.33791,18.901384 368.07125,16.818399 367.6948,16.441918 C 367.12131,15.868431 366.04848,16.245227 365.26167,16.441918 C 365.0587,16.492673 367.6948,9.8478299 367.6948,9.6291539 z "
       id="path5926" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 294.70081,154.64387 C 297.78101,153.70645 297.90176,151.87558 297.13396,148.80435 C 296.81677,147.53564 294.51222,149.70464 293.72757,150.75086 C 291.80042,153.32039 289.83456,148.87757 289.83456,153.18398 C 289.83456,154.10158 291.78106,154.21291 291.78106,155.13049 C 291.78106,157.6967 292.37928,156.50107 294.70081,154.64387 z "
       id="path5934" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 429.98299,158.53689 C 429.98299,160.00574 433.04885,157.39336 434.36265,158.05026 C 435.53234,158.63512 436.98692,158.2197 438.25566,158.53689 C 442.25809,159.53748 436.95659,162.75465 436.30916,162.91653 C 433.74482,163.55759 433.14918,162.30045 431.9295,165.34964 C 431.32707,166.85571 429.65857,162.4299 428.0365,162.4299 C 426.58566,162.4299 429.07667,159.6698 429.98299,158.53689 z "
       id="path5936" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 443.12192,161.94328 C 441.05735,161.94328 447.50155,164.25832 447.50155,166.32291 C 447.50155,171.36753 447.98817,162.69104 447.98817,167.78278 C 447.98817,171.05153 444.57776,171.18917 443.60853,171.18917 C 441.63518,171.18917 442.15668,167.26408 442.6353,165.34964 C 443.40613,162.26631 437.29139,169.23143 443.12192,161.94328 z "
       id="path5938" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 430.95625,182.86822 C 431.47371,180.79839 433.43814,187.68574 431.9295,189.19436 C 429.10964,192.01423 431.78628,183.15464 429.00974,188.70774 C 427.12717,192.47289 424.69813,184.05597 425.11673,182.38159 C 425.70858,180.01415 430.2635,182.34863 430.95625,182.86822 z "
       id="path5940" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 414.41096,183.84146 C 414.57801,183.17322 410.78703,175.95231 409.54467,180.9217 C 408.61642,184.63477 410.72932,185.99933 411.49118,186.76122 C 412.67328,187.9433 411.75121,194.02718 414.41096,188.70774 C 415.37582,186.77793 415.58545,186.77772 414.41096,183.84146 z "
       id="path5942" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 118.54202,129.82592 C 118.59498,127.66779 117.97923,124.73537 115.13562,125.44628 C 113.90081,125.75499 115.84621,128.74068 113.67576,129.82592 C 111.00685,131.16037 114.81768,133.19011 116.59551,132.74567 C 117.82186,132.43908 117.11408,136.60675 120.0019,133.71894 C 120.98187,132.73894 118.81382,131.18491 118.54202,129.82592 z "
       id="path5944" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 107.34961,131.77243 C 109.45261,129.66942 103.57152,130.19761 101.51008,132.25906 C 101.08531,132.68383 102.6932,136.01369 103.94322,136.63867 C 106.32172,137.82795 108.92678,139.57582 109.78274,136.15206 C 110.31301,134.03094 108.66232,133.41332 107.34961,131.77243 z "
       id="path5946" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 114.64899,148.80435 C 114.8079,148.16878 110.26935,143.48562 110.26935,149.77761 C 110.26935,152.37115 114.82501,144.20725 112.21586,154.64387 C 111.40434,157.88996 116.49864,154.74073 116.59551,154.64387 C 117.52023,153.71914 116.49728,151.92057 117.08212,150.75086 C 117.57879,149.50921 118.35979,145.09355 114.64899,148.80435 z "
       id="path5948" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 100.53682,152.21075 C 97.611652,149.91188 96.386612,151.01732 94.210684,154.64387 C 93.295338,156.16944 97.617071,153.51704 97.617071,156.59038 C 97.617071,159.97672 97.049375,161.53772 99.076964,159.51012 C 101.22729,157.3598 100.15256,155.425 103.4566,157.07699 C 105.55049,158.12395 103.31175,153.03913 100.53682,152.21075 z "
       id="path5954" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 392.99937,210.1193 C 392.08284,209.07771 387.48043,213.52569 392.02613,213.52569 C 393.97263,213.52569 391.55403,217.47681 392.02613,219.36522 C 392.44434,221.03804 394.69986,217.17809 395.91914,215.95881 C 398.00728,213.87067 400.40267,217.13984 398.35227,213.03907 C 397.21763,210.76975 396.08304,210.73602 392.99937,210.1193 z "
       id="path5956" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 419.2772,193.08737 C 418.40068,191.33433 424.63012,193.56053 424.63012,195.5205 C 424.63012,198.7081 423.9895,195.87786 425.11673,200.38676 C 425.88097,203.44379 422.11544,202.71118 420.73709,200.87339 C 418.76233,198.24038 419.03665,199.5338 416.35747,200.87339 C 413.18801,202.45812 415.9104,197.38782 416.35747,196.49374 C 417.26521,194.67824 418.09037,195.46106 419.2772,193.08737 z "
       id="path5958" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 402.73191,185.78797 C 403.94311,183.36556 403.89082,180.13411 406.62492,182.86822 C 407.78622,184.02952 408.58442,184.34107 410.03132,185.78797 C 412.78815,188.54483 407.99014,188.92739 407.11154,188.70774 C 405.28972,188.25226 407.76135,189.35462 406.1383,192.60076 C 404.61219,195.65297 402.73191,190.40303 402.73191,189.19436 C 402.73191,188.50346 402.73191,185.81175 402.73191,185.78797 z "
       id="path5960" />
    <path
       style="fill:#6c6a21;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 386.18661,260.24184 C 388.71783,261.17608 390.37026,263.3509 391.05287,266.08134 C 391.06621,266.13475 388.13311,266.79387 388.13311,269.48773 C 388.13311,273.42096 386.18661,272.84911 386.18661,269.48773 C 386.18661,265.76814 384.33977,267.92821 383.26686,269.00112 C 381.77543,270.49252 382.21949,263.94465 382.29359,263.64822 C 382.65716,262.19397 384.60715,260.87362 386.18661,260.24184 z "
       id="path5964" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer13"
     inkscape:label="leaves sillouettes"
     style="display:inline">
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 139.93262,55.49033 C 137.43742,55.836219 136.20991,53.769843 132.9821,52.96287 C 129.06675,51.984034 129.92479,56.958145 130.45463,58.017816 C 131.44867,60.005885 133.06522,55.955988 129.82275,62.440861 C 127.9078,66.270816 130.92303,66.86393 134.24583,66.86393 C 138.27675,66.86393 135.24321,59.647084 139.93262,64.336469 C 143.68884,68.09269 141.97213,59.85715 141.82821,59.281546 C 141.48553,57.910838 140.56448,56.754085 139.93262,55.49033 z "
       id="path5697" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 113.39426,78.237505 C 112.52133,74.745873 111.21264,85.128234 109.60307,88.347372 C 107.98949,91.574491 111.17747,91.527718 112.13053,87.715492 C 113.477,82.32957 115.34041,84.657275 116.55358,87.083645 C 116.62116,87.218786 120.42721,86.534203 117.18546,83.292452 C 115.63055,81.737551 119.08104,79.172736 119.08104,76.973773 C 119.08104,73.982747 113.89475,77.937215 113.39426,78.237505 z "
       id="path5699" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 107.70746,95.297908 C 107.70746,92.282245 104.64766,100.58653 103.91627,103.51214 C 102.82521,107.8764 106.55946,105.66582 109.60307,104.14402 C 112.88721,102.50193 114.26799,104.14402 118.44919,104.14402 C 121.59822,104.14402 120.14489,98.289537 119.71291,96.561634 C 118.85156,93.116188 113.94902,96.238164 113.39426,98.457218 C 112.53658,101.88785 115.01256,97.59806 110.8668,96.561634 C 109.76642,96.286538 108.76057,95.719127 107.70746,95.297908 z "
       id="path5701" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 151.3062,66.232052 C 147.8414,65.365863 146.88316,64.308989 146.88316,68.759514 C 146.88316,73.020862 145.23407,73.567915 143.09194,75.710043 C 141.29857,77.503439 148.21384,74.463068 150.67435,75.07819 C 151.9827,75.405279 152.51122,72.815222 153.83366,72.55073 C 155.15024,72.287405 154.82716,76.882384 157.62485,71.286999 C 158.00501,70.526693 153.51664,66.674145 151.3062,66.232052 z "
       id="path5703" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 119.71291,13.787197 C 121.29187,10.629269 121.29328,20.739113 122.87225,23.897041 C 124.41845,26.989429 120.68275,27.144487 119.71291,23.265188 C 118.96911,20.290041 117.92925,29.136155 117.18546,32.111302 C 116.20117,36.048408 113.76126,33.170731 114.65799,29.583841 C 115.81899,24.939762 113.59013,29.432189 114.65799,25.160771 C 115.74203,20.824618 116.14838,20.332502 114.02611,18.210265 C 111.21581,15.399927 114.17796,13.749235 116.55358,13.15532 C 117.59549,12.894864 118.65981,13.576572 119.71291,13.787197 z "
       id="path5705" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 97.597625,79.501236 C 95.20571,81.433638 93.174554,84.521308 93.174554,89.611099 C 93.174554,92.136473 98.232799,80.751639 96.333888,88.347372 C 95.095479,93.300963 99.893324,90.990713 101.38881,90.242957 C 104.77335,88.550707 106.93329,91.22208 104.54813,86.451765 C 102.65237,82.660234 101.35486,83.625353 105.81185,81.396843 C 110.00829,79.298635 104.72777,78.869383 102.02066,78.869383 C 99.682964,78.869383 101.17001,78.786771 97.597625,79.501236 z "
       id="path5707" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 192.37748,119.94066 C 188.41739,120.84455 188.07851,126.12377 188.5863,128.15492 C 189.04604,129.99392 192.75661,127.01756 194.27309,128.15492 C 197.05509,130.24143 196.22594,125.39845 196.80055,123.1 C 197.36898,120.82624 199.57543,122.81984 192.37748,119.94066 z "
       id="path5713" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 230.9213,135.10546 C 235.50694,133.61305 237.11474,134.60455 238.50371,140.16037 C 238.85538,141.56708 239.53475,143.78503 238.50371,145.84714 C 236.57161,149.71133 233.44876,145.00623 233.44876,142.68783 C 233.44876,140.98975 228.80568,143.70334 228.39384,142.05595 C 227.4443,138.25781 227.79288,139.01597 230.9213,135.10546 z "
       id="path5719" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 259.35526,149.00649 C 262.34043,148.87869 265.07992,147.27101 267.56952,143.95156 C 269.2309,141.73641 263.97201,143.74517 263.14646,143.95156 C 262.60086,144.08796 267.02553,138.22082 261.88272,140.79223 C 259.62618,141.9205 258.93656,141.21093 256.82781,143.31968 C 253.24746,146.90003 255.46527,147.4505 259.35526,149.00649 z "
       id="path5725" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 280.83871,159.11632 C 282.65299,158.34418 288.41177,158.48448 292.21228,158.48448 C 293.81634,158.48448 289.18244,161.77332 290.3167,162.90755 C 293.8641,166.45494 288.53384,164.8595 287.15736,164.17128 C 282.90576,162.04546 283.16216,167.51474 282.73429,169.22619 C 281.50991,174.12376 277.32974,167.82767 277.04749,166.69874 C 276.13177,163.03575 278.20402,161.22409 280.83871,159.11632 z "
       id="path5729" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 251.14101,161.64382 C 249.94657,156.86611 256.67856,170.97255 251.77287,166.06686 C 251.36931,165.66329 253.66846,169.30933 253.66846,172.38551 C 253.66846,174.51799 249.24539,173.8259 249.24539,169.85805 C 249.24539,169.4215 246.2367,167.93301 245.45421,164.80314 C 245.20006,163.7865 247.69554,163.12216 247.98168,162.90755"
       id="path5731" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 267.56952,158.48448 C 271.53174,156.00209 272.78672,158.17719 274.52004,161.64382 C 276.89904,166.40183 271.54636,165.435 271.36071,165.435 C 268.95926,165.435 269.26741,170.53934 266.93765,171.12178 C 263.73033,171.92363 264.41019,166.38505 264.41019,164.17128 C 264.41019,162.00279 267.14423,160.61085 267.56952,158.48448 z "
       id="path5743" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 295.37161,98.457218 C 295.37161,94.754087 302.89773,98.400938 303.58588,99.089098 C 304.42836,99.931571 302.21429,101.32758 301.05839,101.61655 C 300.01651,101.87704 301.95075,103.73397 301.69027,104.77587 C 300.57858,109.22267 295.37161,100.31847 295.37161,98.457218 z "
       id="path5745" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 292.21228,87.715492 C 291.53075,90.441646 285.98501,87.624104 283.99802,89.611099 C 283.88758,89.721535 286.78492,91.87913 283.99802,94.666027 C 281.7805,96.883549 289.39044,99.489384 290.3167,99.720945 C 292.90133,100.3671 291.65268,94.521471 292.84416,92.138563 C 293.90909,90.008716 293.81249,91.716004 292.21228,87.715492 z "
       id="path5747" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 304.84962,80.764966 C 306.51145,77.44128 307.7935,76.005883 312.432,75.07819 C 315.57898,74.448793 314.95945,81.263066 314.95945,81.396843 C 314.95945,82.197883 308.51116,84.685802 308.00893,85.188035 C 307.76844,85.428549 309.90843,89.607192 308.00893,91.506683 C 305.36985,94.145776 307.18111,83.679365 304.84962,80.764966 z "
       id="path5749" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 217.02026,72.55073 C 220.3725,72.435191 222.4004,76.37908 223.33891,80.133112 C 223.6454,81.359101 220.67804,80.698259 219.54772,80.133112 C 217.86274,79.290634 218.70522,84.345556 217.02026,85.188035 C 213.76163,86.817352 215.57519,78.331011 215.75653,77.605652 C 216.34391,75.256132 210.70526,76.339731 217.02026,72.55073 z "
       id="path5753" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 205.01481,85.819908 C 207.80939,84.147941 211.83326,83.792253 215.12465,87.083645 C 216.3254,88.284369 212.39968,89.611099 210.70159,89.611099 C 208.30014,89.611099 207.34456,93.451709 205.01481,94.034147 C 202.93808,94.553331 202.23146,91.637234 203.75108,89.611099 C 205.53045,87.238629 205.01481,92.280836 205.01481,85.819908 z "
       id="path5761" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 239.76743,40.325564 C 242.24331,37.024372 245.34989,43.276223 245.45421,43.484902 C 245.86194,44.300338 242.93205,43.490205 245.45421,46.012363 C 246.82076,47.378915 243.76955,54.43849 242.2949,48.539824 C 241.81502,46.620263 237.27244,52.460903 235.97622,47.276094 C 235.59454,45.749355 239.16586,41.328159 239.76743,40.325564 z "
       id="path5763" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 297.2672,29.583841 C 294.47629,30.727923 293.7926,33.377659 294.73975,37.166225 C 294.80414,37.423761 301.36554,33.53741 301.69027,33.375033 C 305.89715,31.271595 305.40186,34.086506 307.37707,32.111302 C 310.4487,29.039682 303.38588,27.954184 302.32213,27.688232 C 300.30421,27.183762 298.91491,28.59523 297.2672,29.583841 z "
       id="path5769" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 301.05839,39.693687 C 298.19775,38.978516 307.04385,38.978516 309.90453,39.693687 C 311.50041,40.092662 307.9084,42.321681 306.7452,43.484902 C 304.97802,45.252058 306.9352,47.276094 301.69027,47.276094 C 301.46835,47.276094 300.74823,42.829971 299.1628,49.171677 C 297.85241,54.413222 298.00769,46.841613 298.53093,44.748634 C 299.14104,42.308184 299.23045,42.740331 301.05839,39.693687 z "
       id="path5771" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 309.27265,21.36958 C 306.11021,21.914348 304.1106,23.211614 308.00893,25.160771 C 310.42022,26.366429 310.30664,27.458492 312.432,29.583841 C 315.62963,32.781482 316.23337,28.360868 315.59131,25.792649 C 315.35948,24.865225 313.66844,22.524192 313.06384,20.105849 C 312.74077,18.813544 310.53639,20.948328 309.27265,21.36958 z "
       id="path5779" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 259.35526,200.81948 C 258.73004,203.8257 257.14022,207.77002 262.51458,207.77002 C 265.81766,207.77002 263.39833,202.33509 267.56952,206.50629 C 271.61967,210.55642 270.72884,207.33799 270.72884,203.97883 C 270.72884,201.62376 265.83902,201.5339 264.41019,200.81948 C 262.37058,199.79969 262.46132,200.19829 259.35526,200.81948 z "
       id="path5781" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 265.67393,215.35239 C 264.46223,218.00555 265.41427,220.77952 267.56952,222.93478 C 269.18048,224.54574 269.74979,218.85895 271.36071,217.24801 C 273.94723,214.6615 275.37535,217.3945 276.41564,212.19306 C 276.91816,209.6805 271.31909,212.83535 265.67393,215.35239 z "
       id="path5785" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 253.66846,198.92387 C 249.79649,199.1632 248.242,201.51644 253.03661,202.7151 C 255.65031,203.36852 252.68995,207.69871 257.45965,206.50629 C 260.11601,205.84218 258.12375,200.94835 257.45965,198.29203 C 257.14893,197.04911 254.9322,198.71328 253.66846,198.92387 z "
       id="path5789" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 357.29447,248.84129 C 355.82239,250.88133 355.24997,254.86217 356.66262,257.68742 C 357.66389,259.69 358.91357,253.17551 361.08566,252.63248 C 362.91327,252.17559 364.31297,254.70304 366.14058,255.15994 C 368.18393,255.6708 367.62991,250.33061 366.14058,248.84129 C 364.00023,246.70091 368.96427,242.92247 362.98126,244.41824 C 361.0653,244.89721 359.51796,247.5072 357.29447,248.84129 z "
       id="path5791" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 385.09656,246.94569 C 389.1619,251.33553 389.18887,248.23909 390.78336,245.05011 C 392.42511,241.76663 393.8196,242.90834 392.04709,239.3633 C 390.56203,236.39318 385.94333,241.67588 385.72844,241.89076 C 384.66032,242.95885 380.47976,238.34395 383.20098,243.78638 C 383.75019,244.88483 384.46472,245.89259 385.09656,246.94569 z "
       id="path5797" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 398.36574,258.95114 C 402.04785,257.5315 402.31227,257.99804 404.05255,261.47861 C 405.70801,264.78952 407.5543,262.84834 408.4756,266.53354 C 409.08949,268.9891 401.73119,268.00676 400.89321,267.79728 C 395.93062,266.55662 399.96406,262.40777 395.20643,267.1654 C 394.56045,267.81136 393.22294,260.56642 393.31082,260.21488 C 393.59117,259.09348 397.95891,258.95114 398.36574,258.95114 z "
       id="path5805" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 26.828636,15.050928 C 29.849818,20.276131 30.162122,17.404241 31.251705,16.314657 C 34.012993,13.553371 33.557111,11.947109 36.306628,11.259736 C 36.677709,11.16696 34.943895,6.5702289 30.619828,8.7322749 C 29.940576,9.0718879 26.951689,14.743318 26.828636,15.050928 z "
       id="path5807" />
    <path
       style="fill:#252917;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 21.141838,6.2048139 C 17.526982,8.0122409 19.142849,11.707787 22.405567,12.523466 C 24.675492,13.090947 27.608517,5.9087549 28.092366,4.9410829 C 28.795377,3.5350629 33.299379,5.0931489 29.356097,1.1498669 C 25.607852,-2.5983771 22.386307,4.1306809 21.141838,6.2048139 z "
       id="path5809" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer14"
     inkscape:label="leaves deep green"
     style="display:inline">
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 174.68526,269.69286 C 180.49598,270.5181 181.32904,273.5209 181.63576,274.74779 C 181.7109,275.0483 176.49825,270.87401 181.00391,275.37966 C 184.44833,278.82411 187.14741,279.17085 181.00391,279.17085 C 178.54765,279.17085 176.65024,276.85342 174.68526,275.37966 C 172.87045,274.01858 174.3585,281.14813 172.15776,281.69831 C 169.50144,282.36239 171.49369,276.1404 172.15776,273.48406 C 172.52615,272.0106 174.12117,271.10304 174.68526,269.69286 z "
       id="path5812" />
    <text id="suspendRedraw3" x="220" y="220" style="font-size: 24px; fill: red;">Inside the markup</text>  
     <!-- Added so that we can test incorrect processing for comment sections;
          we used to get incorrectly setup __text nodes inside multiline
          comments. Adding in some inline - dashes and a > character to
          make sure things don't break. -->
     <!--<rect id="rectToAnimateAtStart" x="50" y="50" width="50" height="50" fill="#0f5" stroke="#085" stroke-width="4">
            <animate id="animAtStart" attributeName="x" calcMode="linear" additive="replace" accumulate="none"
                           from="50" to="100" begin="2s; 5s" dur="2s" fill="remove"/>
         </rect>
         <text x="30" y="120" fill="navy">begins at "2s; 5s"</text>-->
         
    <!-- from="-500 0" to="0 0" -->
  <!--<animateTransform attributeName="transform" type="translate" from="-500 0" to="-500 0" begin="0" dur="1ms" fill="freeze" />
  <animateTransform attributeName="transform" type="translate" values="-500 0;-200 0;0 0" keyTimes="0;0.75;1.0" begin="1s" dur="350ms" fill="freeze" />-->
  
    <text x="10" y="250" style="font-size: 24pt; font-weight: bold; fill: red;">Entities: &quot;&amp;&lt;&gt;</text>
         
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 188.1296,294.79233 C 188.69263,292.33965 196.65451,292.53943 191.53598,293.81907 C 191.18411,293.90703 190.88714,294.14348 190.56273,294.30569 C 187.32399,295.92505 194.11025,296.04416 196.88887,296.73883 C 199.60544,297.41797 191.41637,298.19869 188.61622,298.19869 C 186.29375,298.19869 193.08438,299.72498 194.94237,301.11847 C 195.11467,301.24769 190.33545,303.55161 186.1831,303.55161 C 185.71369,303.55161 190.11373,296.96333 184.72321,299.65859 C 182.95224,300.54407 186.58349,296.0292 188.1296,294.79233 z "
       id="path5814" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 186.1831,308.9045 C 183.36606,310.313 191.536,313.541 191.536,316.6905 C 191.536,320.42375 185.83006,312.49222 187.15636,319.12367 C 188.07305,323.70721 183.79284,323.27069 182.77672,323.01664 C 179.90506,322.29876 182.03476,317.12902 181.31684,314.25739 C 180.37587,310.49352 180.52407,312.29991 186.1831,308.9045 z "
       id="path5816" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 210.02781,326.90967 C 213.52148,328.36206 211.99109,330.73553 211.97431,330.80268 C 211.97092,330.81622 209.01892,327.74032 210.02781,331.77594 C 210.99282,335.63604 207.07773,331.4111 206.62141,330.80268 C 206.10193,330.11004 205.1659,336.65969 203.70165,330.80268 C 202.90936,327.63342 204.26532,326.90967 207.59467,326.90967 C 208.40571,326.90967 209.21678,326.90967 210.02781,326.90967 z "
       id="path5822" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 172.55756,293.81907 C 175.84087,293.81907 179.86514,300.17794 180.34357,302.09172 C 180.65831,303.35064 176.7653,300.8328 176.45058,302.09172 C 175.55779,305.66287 173.68915,303.3816 172.55756,301.11847 C 171.75652,299.51641 172.39371,305.44186 169.15118,301.11847 C 166.86634,298.07202 171.2962,296.9725 172.55756,293.81907 z "
       id="path5824" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 155.03901,263.64822 C 154.62368,263.09447 157.54968,267.82333 161.85176,269.97436 C 163.54993,270.82345 157.34796,270.2227 156.49889,271.92086 C 155.51122,273.89622 159.95618,273.9763 154.55238,275.32725 C 152.17344,275.92199 151.6326,277.52226 151.6326,273.38075 C 151.6326,271.65644 148.1578,271.64717 147.73961,269.97436 C 146.97894,266.93177 149.5967,266.56798 152.11925,266.56798 C 153.8178,266.56798 154.4355,265.15697 155.03901,263.64822 z "
       id="path5826" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 136.06057,255.86218 C 138.16928,255.86218 134.56949,260.69726 136.06057,262.18835 C 136.3771,262.50488 138.24847,259.75136 139.95359,263.16159 C 141.71498,266.68441 143.13513,261.28899 142.87333,260.24184 C 142.2628,257.79973 139.16507,259.57045 142.38671,256.34883 C 145.24831,253.48722 139.75403,255.96607 142.38671,252.45581 C 144.87828,249.13374 139.49781,250.96507 138.49371,251.96919 C 136.99955,253.46332 136.52647,253.53268 136.06057,255.86218 z "
       id="path5828" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 159.41865,229.58437 C 157.69815,231.30483 164.66804,231.60352 165.25816,233.96401 C 165.57535,235.23272 162.53486,235.03548 161.36515,234.45062 C 159.52997,233.53303 161.47045,240.29014 159.41865,240.29014 C 155.81448,240.29014 157.564,235.33201 154.55238,238.34364 C 153.11676,239.77925 150.34643,234.17217 150.17275,233.47739 C 149.65911,231.42286 154.52558,229.95604 156.01226,229.58437 C 158.67698,228.91817 154.45965,228.59257 159.41865,229.58437 z "
       id="path5830" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 256.74395,323.01664 C 259.05665,322.43849 261.72614,323.49563 263.55672,325.93642 C 265.81941,328.95334 264.73677,330.62933 262.09683,331.2893 C 258.49859,332.18888 261.12358,330.15813 261.12358,335.18232 C 261.12358,335.33796 256.25733,339.31691 256.25733,334.6957 C 256.25733,330.19908 256.01106,329.58316 254.79745,328.36955 C 253.66129,327.23339 252.74074,336.68811 251.39105,331.2893 C 250.47021,327.60597 249.84916,326.95067 252.85094,325.44978 C 254.54541,324.60256 253.89436,324.15648 256.74395,323.01664 z "
       id="path5832" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 245.55154,309.39112 C 247.4872,308.42328 249.94201,309.88316 251.87767,310.85098 C 253.02907,311.42669 242.21583,314.25739 248.95792,314.25739 C 252.14967,314.25739 248.56197,320.9795 248.47131,321.07014 C 245.40332,324.13817 246.00939,319.00852 245.55154,317.17712 C 244.66886,313.64639 242.14517,322.84557 242.14517,316.6905 C 242.14517,312.01301 243.96069,313.36826 245.55154,309.39112 z "
       id="path5834" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 247.98468,344.91486 C 250.64176,346.56612 250.55791,349.01426 249.44454,351.241 C 249.42579,351.27852 246.7809,348.85898 247.98468,353.67412 C 248.6133,356.18867 245.06492,357.48733 245.06492,354.16078 C 245.06492,350.38127 242.83582,352.35556 241.1719,353.1875 C 238.36859,354.58917 242.04195,349.39769 242.14517,349.2945 C 243.48469,347.95495 245.60085,347.56664 247.01142,346.86136 C 247.66025,346.53694 247.66025,345.56369 247.98468,344.91486 z "
       id="path5840" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 239.22539,368.27291 C 239.62776,368.07174 242.33247,374.01878 239.22539,375.57233 C 235.97758,377.19624 237.76553,377.11925 237.76553,380.92523 C 237.76553,384.08938 233.82982,381.85578 233.38587,381.41184 C 232.10351,380.12946 233.91928,377.81834 234.35915,376.05895 C 234.72927,374.57844 231.56738,372.62717 231.92601,371.19269 C 232.78114,367.77217 235.33238,370.99529 235.33238,367.29967 C 235.33238,365.96206 237.98344,367.77615 239.22539,368.27291 z "
       id="path5842" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 212.94756,367.29967 C 211.53462,369.86673 210.27963,372.9044 212.46093,375.0857 C 213.68021,376.30495 215.58282,373.22157 216.35395,371.67931 C 217.16501,370.05722 220.42446,373.93494 221.70685,372.65258 C 224.15213,370.20727 218.90503,368.42406 218.30045,368.27291 C 216.74262,367.88348 222.42496,366.3028 221.70685,364.86655 C 220.82434,363.10151 217.78175,366.31841 215.86732,365.83979 C 214.81169,365.57588 213.92081,366.81305 212.94756,367.29967 z "
       id="path5850" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 220.73361,397.95714 C 218.35802,399.49688 217.32721,402.96599 217.32721,403.79666 C 217.32721,404.71485 220.57452,401.02658 219.27373,406.2298 C 218.7362,408.37985 222.85314,408.94398 223.65336,405.74318 C 224.42033,402.67532 224.92429,400.20135 227.05975,402.33678 C 229.29089,404.56795 231.20106,403.67253 232.89927,402.8234 C 233.71322,402.41642 229.04132,397.01898 229.00626,396.98391 C 227.34832,395.32597 226.08648,400.25307 226.08648,394.55076 C 226.08648,390.93938 222.21015,394.85297 221.70685,395.52403 C 221.18273,396.22282 221.05802,397.14611 220.73361,397.95714 z "
       id="path5856" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 190.56273,415.4757 C 189.27996,416.53838 187.66011,420.27349 187.15636,422.28845 C 186.73815,423.96128 189.8301,420.10134 191.04935,418.88208 C 191.13942,418.79201 194.21467,411.08706 192.02262,419.85533 C 190.95859,424.11139 193.1379,422.00436 193.96912,420.34195 C 195.38337,417.51344 194.92473,420.79331 195.91563,422.7751 C 196.56544,424.07473 198.34876,418.63887 198.34876,417.4222 C 198.34876,412.60983 199.68968,417.30323 201.26851,418.88208 C 202.73739,420.35094 199.39077,414.51962 197.37549,414.0158 C 194.54006,413.30696 193.3773,413.22403 190.56273,415.4757 z "
       id="path5860" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 287.88804,66.564467 C 286.3614,65.061487 283.81374,64.61796 280.58864,64.61796 C 278.58979,64.61796 283.28847,67.184428 283.99503,67.537708 C 285.48876,68.28459 280.7963,68.789961 279.6154,69.970861 C 278.63542,70.950839 282.16386,71.094589 283.50842,71.430723 C 284.86212,71.769169 284.69347,74.213096 285.94153,74.837117 C 287.4589,75.595794 289.01758,69.658266 289.34793,68.997596 C 290.1049,67.483648 291.5107,70.187129 287.88804,66.564467 z "
       id="path5870" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 249.44454,43.206402 C 251.75838,40.582054 254.55912,41.870663 255.28406,42.233138 C 255.5925,42.387367 250.36409,44.179644 255.77069,44.179644 C 259.17727,44.179644 258.38192,46.523717 256.25733,47.586039 C 253.1182,49.155603 253.24792,49.622185 252.85094,50.019166 C 252.26609,50.604011 252.7342,51.712514 252.36431,52.452294 C 252.30882,52.563286 249.74221,43.950536 249.44454,43.206402 z "
       id="path5874" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 248.95792,31.040736 C 247.49968,33.957227 254.93804,25.893256 251.87767,32.013978 C 250.49436,34.780592 247.88609,29.968906 251.87767,33.960486 C 253.36567,35.448461 256.39201,31.744598 254.31083,35.906993 C 253.92979,36.66905 249.4006,37.875485 248.47131,38.340122 C 246.36522,39.393154 248.10128,42.699549 247.01142,38.340122 C 245.98725,34.243461 247.4691,35.184285 248.47131,34.933728 C 249.16242,34.760966 250.78682,35.612954 248.95792,31.040736 z "
       id="path5876" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 343.85008,79.216753 C 344.18924,76.974139 344.11771,74.161928 347.25648,73.377231 C 348.52519,73.060064 346.81838,76.34552 347.74311,77.270246 C 348.49175,78.018878 351.09333,76.858528 348.22974,80.676639 C 346.89187,82.460478 349.43903,82.086405 352.12273,82.623147 C 354.24485,83.047561 347.89612,84.607907 345.79659,84.083009 C 344.10172,83.659301 344.74894,80.714844 343.85008,79.216753 z "
       id="path5882" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 340.93034,84.569655 C 342.59426,85.13074 346.0358,88.294965 347.25648,89.922529 C 348.33561,91.361377 343.86951,88.589177 343.36347,88.462669 C 339.60341,87.522652 342.94655,91.521834 343.36347,92.355687 C 344.15818,93.945065 340.04649,91.074639 339.47046,89.922529 C 339.02495,89.031512 338.02933,90.900494 336.06408,90.409173 C 334.65605,90.057159 340.76021,84.9099 340.93034,84.569655 z "
       id="path5886" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 267.93634,123.01316 C 269.74458,121.94884 273.13371,120.78443 276.209,121.55328 C 278.51695,122.13026 273.42382,125.13566 272.80264,125.44628 C 272.70767,125.49376 276.40455,128.30234 277.18227,129.3393 C 278.46239,131.04612 272.92593,129.79508 270.85612,130.31253 C 269.99025,130.529 271.34274,134.48598 271.34274,135.66544 C 271.34274,138.07686 267.92332,132.24167 266.47649,130.31253 C 265.34981,128.81033 268.90962,127.90357 268.90962,125.44628 C 268.90962,122.30029 264.27147,132.17536 267.93634,123.01316 z "
       id="path5890" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 264.04334,129.82592 C 264.04334,128.31973 255.96,129.02164 261.12358,130.31253 C 266.8608,131.74684 258.69046,130.03078 258.69046,135.1788 C 258.69046,136.99235 262.27435,136.32957 263.55672,137.61195 C 265.97226,140.02749 267.46602,140.07766 265.98984,137.12531 C 264.44244,134.03045 266.85895,133.34542 264.04334,129.82592 z "
       id="path5892" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 289.83456,124.47302 C 289.08624,121.29001 287.47759,121.27188 284.9683,122.52652 C 281.44892,124.2862 287.6322,126.35557 287.88804,126.41952 C 289.61906,126.85228 287.09009,130.1765 287.88804,131.77243 C 288.76158,133.51947 291.39417,129.62645 292.26767,127.87942 C 293.91954,124.57572 296.69664,126.46885 294.21419,123.9864 C 293.17555,122.94776 291.27489,124.18496 289.83456,124.47302 z "
       id="path5898" />
    <path
       style="fill:#30451d;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 350.66288,10.602421 C 349.93115,9.8706889 350.88797,17.342325 351.1495,18.388426 C 351.62322,20.283377 354.35719,16.058021 355.52914,14.495411 C 356.28928,13.481899 356.7332,17.722454 357.96226,17.415184 C 360.06178,16.89031 358.89727,13.188563 359.42215,11.089041 C 359.57884,10.462296 364.13819,12.885307 360.39539,9.1425329 C 358.70767,7.4547799 356.57202,8.8643989 355.04251,9.6291539 C 353.70827,10.29627 352.62451,10.602421 350.66288,10.602421 z "
       id="path5900" />
  </g>
  <g
     inkscape:groupmode="layer"
     id="layer10"
     inkscape:label="leaves sun"
     style="display:inline">
    <path
       id="path5644"
       d="M 116.46386,233.57852 C 114.27075,236.41537 107.63866,242.7252 109.5485,246.54485 C 109.74144,246.93076 114.06347,242.70144 114.30281,242.22275 C 116.29304,238.24228 116.88027,241.6957 117.3283,244.38379 C 117.6533,246.33385 118.67951,247.08623 119.48935,248.70592 C 120.40053,250.52827 119.1191,244.63158 118.62494,242.65494 C 117.92687,239.86269 117.99141,238.76505 121.2182,238.76505 C 121.63591,238.76505 125.10865,242.00692 125.54031,242.22275 C 128.52277,243.71398 126.75002,243.00024 125.54031,241.79052 C 123.90824,240.15846 123.52695,238.49143 122.94704,236.17179 C 122.87072,235.86648 119.47172,233.99312 119.05713,233.57852 C 118.4459,232.96727 117.3283,233.57852 116.46386,233.57852 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5646"
       d="M 135.48116,230.55305 C 133.38345,228.45534 139.08378,235.45483 139.80327,238.33285 C 140.6584,241.7534 140.66769,238.90482 140.66769,236.60398 C 140.66769,235.23722 141.35309,233.93658 141.96432,232.71409 C 142.10839,232.42595 141.21957,231.92781 141.5321,231.84967 C 143.07591,231.46374 144.74263,231.80342 146.28644,231.41745 C 148.03772,230.97963 143.14672,229.63149 141.5321,228.82421 C 139.65868,227.88749 136.83391,229.7414 135.48116,230.55305 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5648"
       d="M 129.86242,250.00254 C 130.39287,251.2509 130.29462,255.17143 130.29462,257.78232 C 130.29462,260.42487 130.76274,261.27595 132.02346,262.53665 C 133.09605,263.60926 133.32011,258.60002 133.32011,257.35013 C 133.32011,254.27061 133.59773,253.06665 135.48116,252.59579 C 136.06763,252.44918 139.88797,255.984 140.23547,256.0535 C 142.38728,256.48385 138.17444,252.13143 137.6422,250.00254 C 137.23894,248.38945 133.97474,249.243 133.32011,249.57033 C 132.53358,249.96359 130.62453,250.00254 129.86242,250.00254 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5650"
       d="M 126.40472,271.61308 C 125.37805,272.12643 121.6496,272.90991 119.92158,273.34193 C 117.46909,273.95504 115.99081,274.24721 114.73504,275.50298 C 114.63125,275.60679 119.09145,276.79962 120.35376,276.79962 C 121.79449,276.79962 123.27821,276.4502 124.67589,276.79962 C 124.82903,276.8379 121.24272,280.68952 125.54031,280.68952 C 127.36784,280.68952 128.3128,278.6022 128.99797,277.23184 C 130.30274,274.62235 128.9902,274.21415 130.72684,272.47749 C 131.50268,271.70168 132.97647,271.95671 133.75232,271.18088 C 135.48715,269.44605 128.81051,271.13193 126.40472,271.61308 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5652"
       d="M 159.25276,257.35013 C 160.44341,256.15946 169.1048,263.57277 171.35466,264.69772 C 172.76401,265.40238 165.54456,265.12991 164.00708,265.12991 C 163.67231,265.12991 165.24124,263.27613 167.03256,266.85876 C 168.29724,269.38815 168.58972,270.4942 169.19361,272.90972 C 169.57693,274.44298 164.97101,271.28038 164.87152,271.18088 C 163.18203,269.4914 162.27824,270.4957 162.27824,267.29099 C 162.27824,266.24214 159.72182,267.21727 159.25276,268.15539 C 158.39315,269.87462 158.42232,264.40139 157.95612,262.53665 C 157.28821,259.86495 156.16684,263.52195 155.36286,265.12991 C 154.47062,266.91438 155.23855,269.81925 155.36286,270.31645 C 155.86682,272.33222 152.40911,267.1457 151.90517,265.12991 C 151.78879,264.66432 155.84874,262.05077 156.22729,261.67223 C 157.16651,260.73301 154.57325,259.58598 153.63403,258.64676 C 151.89025,256.90298 158.58914,257.18423 160.98161,257.78232"
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5654"
       d="M 158.38835,281.12175 C 157.80629,280.53969 156.65949,288.52312 156.65949,290.19815 C 156.65949,292.00336 157.97629,286.72031 159.25276,285.44384 C 160.44757,284.24902 163.49996,286.91913 164.00708,287.17269 C 165.61574,287.97701 167.4151,288.88912 169.19361,289.33374 C 172.11385,290.06379 170.22137,287.49936 169.62583,286.30826 C 168.60677,284.27014 167.87857,284.25066 165.73593,283.71499 C 163.43794,283.14049 165.00199,280.5998 165.30371,279.39288 C 165.86006,277.16752 161.10497,279.76344 160.98161,279.82511 C 160.11718,280.2573 159.25276,280.68952 158.38835,281.12175 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5656"
       d="M 129.86242,322.18178 C 128.03326,323.79424 126.40472,326.89649 126.40472,330.39378 C 126.40472,334.1149 127.66288,331.2967 129.86242,329.09716 C 131.38976,327.56978 132.07904,330.88154 133.32011,332.12263 C 134.70572,333.50825 133.66331,327.88949 135.04895,326.50389 C 135.60302,325.94983 135.45445,324.01746 135.48116,323.91061 C 135.58482,323.49598 130.18904,322.31242 129.86242,322.18178 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5658"
       d="M 163.14266,327.3683 C 163.49565,327.92816 169.09874,332.59173 171.35466,334.28368 C 172.59601,335.21469 168.58426,336.01251 167.03256,336.01251 C 165.72795,336.01251 168.38727,338.97992 167.46478,339.90241 C 166.22963,341.13757 162.18121,338.34117 161.84603,338.17358 C 160.2314,337.36627 160.52924,341.65142 159.25276,342.9279 C 157.60695,344.57371 160.44951,338.30676 161.84603,336.44473 C 163.87746,333.73614 160.55708,332.98705 158.82054,332.98705 C 157.67779,332.98705 162.09079,329.83918 162.71045,329.52936 C 163.36751,329.20082 162.99859,328.08867 163.14266,327.3683 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5660"
       d="M 90.963427,326.50389 C 90.963427,327.08016 90.963427,327.08016 90.963427,326.50389 C 90.963427,322.89063 90.099011,333.69591 90.099011,337.30914 C 90.099011,340.08041 93.31677,332.65008 93.988916,329.96156 C 94.508372,327.88376 96.47448,333.61397 98.311013,334.7159 C 100.16822,335.83022 99.268524,330.33391 98.743237,328.23274 C 98.646977,327.84772 101.54019,328.43642 98.743237,325.63946 C 96.864112,323.76035 96.174111,323.45425 94.421107,325.20725 C 93.021321,326.60703 93.710957,327.05339 90.963427,326.50389 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5662"
       d="M 208.95702,336.01251 C 207.01875,337.9508 214.50975,336.24512 217.16905,335.58032 C 219.19865,335.0729 215.65992,336.15179 214.14356,338.17358 C 211.75816,341.35408 216.57574,340.05076 217.16905,339.90241 C 221.42635,338.83809 218.93841,340.53047 216.73682,341.63127 C 214.97738,342.511 215.39447,345.27186 215.00797,346.8178 C 214.80151,347.6437 217.23066,349.47269 214.57577,346.8178 C 212.97501,345.21704 212.84692,344.95938 212.84692,342.9279 C 212.84692,340.10218 210.09318,341.23917 208.52482,341.63127 C 205.82978,342.30502 208.72562,338.66696 208.95702,337.74137 C 209.09681,337.1823 208.95702,336.58879 208.95702,336.01251 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5664"
       d="M 233.16085,340.33463 C 235.22663,332.07144 239.6088,349.37586 244.83053,354.59761 C 245.32525,355.0923 242.55989,352.59785 241.37285,352.00434 C 239.18288,350.90934 238.11703,350.37641 236.18631,349.41107 C 233.7176,348.17672 235.29706,349.02852 233.59304,352.43654 C 231.99288,355.6369 233.16085,351.92667 233.16085,349.84327 C 233.16085,347.63645 232.2964,346.28322 232.2964,343.79231 C 232.2964,343.72456 233.16085,341.0225 233.16085,340.33463 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5666"
       d="M 221.49115,356.32643 C 221.38701,358.07807 220.62673,362.35754 220.62673,365.40288 C 220.62673,368.6857 220.39337,368.195 221.49115,369.29277 C 223.07265,370.87426 222.21976,364.81006 223.21999,362.80961 C 224.66769,359.9142 226.81785,362.6636 228.83873,363.67402 C 231.73437,365.12185 229.06008,364.99157 228.40653,362.37739 C 228.09626,361.13642 227.17251,358.61277 226.67769,357.62308 C 226.15822,356.58418 224.25889,358.57475 223.21999,358.05529 C 222.49103,357.69083 222.06743,356.90273 221.49115,356.32643 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5668"
       d="M 243.5339,361.94519 C 242.00857,361.1825 246.00134,365.27703 248.72043,367.99615 C 249.9756,369.25131 250.49201,371.19252 250.88149,372.75046 C 251.40686,374.85198 246.70751,370.35469 246.55939,370.1572 C 243.70532,366.35177 244.83053,370.39493 244.83053,372.31824 C 244.83053,373.82978 240.04238,375.79285 239.2118,376.20814 C 236.98733,377.32039 240.50843,371.34761 240.50843,368.86056 C 240.50843,366.32057 242.88268,365.2013 243.5339,361.94519 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5670"
       d="M 268.60213,355.46203 C 267.21024,356.69555 265.57666,360.99985 265.57666,364.53845 C 265.57666,367.06347 265.31536,369.54419 265.57666,370.58941 C 266.1191,372.75919 267.3055,366.34282 267.3055,364.10624 C 267.3055,360.72188 270.51102,365.33075 270.7632,365.8351 C 272.00203,368.31273 271.62762,363.08531 271.62762,361.94519 C 271.62762,359.18524 270.56824,357.91964 268.60213,355.46203 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5672"
       d="M 218.89787,405.16629 C 218.89787,401.68169 217.60124,412.05476 217.60124,415.53936 C 217.60124,417.47762 220.32819,412.76787 221.49115,411.21724 C 222.26431,410.18635 223.79628,413.52238 224.94882,412.94608 C 226.92794,411.95653 226.97059,408.33822 224.94882,407.32733 C 222.79833,406.2521 221.40802,406.17034 218.89787,405.16629 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5674"
       d="M 198.58397,359.35192 C 195.36245,357.74117 192.97436,364.5019 192.10081,367.99615 C 191.71011,369.5588 195.41442,367.85208 196.85512,367.13173 C 198.64992,366.23432 197.22137,371.85304 199.01617,372.75046 C 199.47552,372.98015 200.31279,366.83912 200.31279,366.2673 C 200.31279,363.72697 200.88741,362.08257 201.60944,364.97066 C 201.89115,366.09752 203.92814,365.17509 205.06712,365.40288 C 206.03946,365.59733 203.29527,361.27535 202.90607,361.08076 C 201.42541,360.34043 200.73413,360.21199 198.58397,359.35192 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5676"
       d="M 64.939335,252.87008 C 64.000335,253.0425 59.620918,255.19212 57.662397,257.15065 C 55.287221,259.52582 61.933765,257.58099 61.942958,257.5787 C 64.759571,256.87455 63.430932,256.31495 62.371018,258.4348 C 60.495959,262.18492 63.742044,261.68709 65.795457,260.14702 C 68.0335,258.46848 67.364049,259.43173 68.791835,262.2873 C 70.094671,264.893 71.096171,266.36796 70.075992,262.2873 C 68.964061,257.8396 67.935713,258.66336 67.935713,254.15427 C 67.935713,253.06761 65.948278,253.27366 64.939335,252.87008 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5678"
       d="M 70.175288,222.47817 C 70.970856,221.99272 76.510211,222.51676 78.496797,223.33429 C 81.478284,224.56121 75.187922,224.1904 73.81594,224.1904 C 70.486276,224.1904 73.447105,225.59904 74.856137,226.75873 C 76.643239,228.22956 77.456623,229.50587 77.456623,232.32345 C 77.456623,235.62083 75.79871,232.24311 74.336056,231.03929 C 72.571136,229.58673 72.255673,233.55373 72.255673,235.31983 C 72.255673,235.4202 71.000621,232.04413 70.695395,231.03929 C 70.167043,229.29994 70.127111,227.02826 69.65518,225.47458 C 69.441392,224.77072 70.132267,222.65519 70.175288,222.47817 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5680"
       d="M 48.245178,239.60038 C 48.025336,240.6254 46.472673,243.69405 46.104923,245.1651 C 45.337201,248.236 45.607189,248.19631 48.245178,246.87733 C 50.701701,245.64905 49.818245,244.27421 53.381862,245.1651 C 55.228077,245.62665 56.775731,246.86967 58.518519,247.30537 C 61.282383,247.99633 63.134073,248.11497 60.658799,246.87733 C 59.14315,246.1195 57.805489,244.88014 56.8063,243.88092 C 55.40546,242.48009 53.71126,242.14405 52.097678,241.74065 C 50.001853,241.2167 49.469683,242.04939 48.245178,239.60038 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5682"
       d="M 30.266863,245.59315 C 29.00661,245.2781 25.682609,247.91279 25.130205,249.01759 C 23.822556,251.63294 24.147407,253.4728 24.702169,254.58231 C 25.392387,255.96274 27.319949,252.94 28.554643,252.01398 C 29.78406,251.09192 29.579611,254.92 30.266863,256.29452 C 31.06642,257.89361 31.571012,252.85012 32.835205,251.58593 C 33.73301,250.68811 30.564235,246.33658 30.266863,245.59315 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5684"
       d="M 32.407144,208.78042 C 34.545041,206.64252 30.533643,214.53431 29.410766,217.34152 C 27.938646,221.02179 33.055095,216.03387 33.263266,215.20123 C 33.785101,213.11388 36.341063,216.48539 39.256022,216.48539 C 41.78752,216.48539 40.421698,212.3959 39.684082,210.9207 C 38.601137,208.75479 36.688701,209.20796 34.975485,210.06459 C 33.69354,210.70555 32.223609,208.22977 33.263266,211.34873 C 33.548623,212.20485 32.692525,209.63651 32.407144,208.78042 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       id="path5686"
       d="M 22.133828,159.98213 C 23.901106,161.14 28.982705,164.29207 28.982705,166.83101 C 28.982705,168.7825 25.185531,167.36972 24.702169,166.40298 C 24.131429,165.2615 22.515829,167.80566 21.277707,168.11519 C 19.47288,168.56641 21.254555,164.35531 21.705766,162.55047 C 21.916271,161.70846 21.991149,160.83826 22.133828,159.98213 z "
       style="fill:#97bc29;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <text id="myText" 
          x="80" 
          y="80" 
          font-family="Verdana" 
          font-size="24" 
          fill="blue">hello world</text><desc id="myDesc">This is a description</desc><title id="myTitle">This is a title</title>
  </g><g
     inkscape:groupmode="layer"
     id="layer4"
     inkscape:label="mask"
     style="opacity:0.90697674;display:inline">
    <rect
       style="opacity:1;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:5.80000019;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       id="rect5688"
       width="568.43536"
       height="57.219986"
       x="-66.21785"
       y="-60.337234" />
    <rect
       style="opacity:1;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:5.80000019;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       id="rect5690"
       width="568.43536"
       height="57.219986"
       x="-69.605858"
       y="454.64255" />
    <rect
       style="opacity:1;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:5.80000019;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       id="rect5692"
       width="568.43536"
       height="79.053925"
       x="-53.937576"
       y="3.7275786"
       transform="matrix(0,1,-1,0,0,0)" />
    <rect
       style="opacity:1;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:5.80000019;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;display:inline"
       id="rect5694"
       width="568.43536"
       height="79.053925"
       x="-50.173149"
       y="-533.83899"
       transform="matrix(0,1,-1,0,0,0)" />
  </g></svg>
